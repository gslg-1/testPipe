ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"tasks.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskIsTaskSuspended:
  27              	.LFB16:
  28              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 4


 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 5


 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 6


 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 7


 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 8


 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 9


 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 10


 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 11


 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 12


 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 13


 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 14


 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 15


 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 16


 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 17


 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 18


 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 19


1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 20


1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 21


1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 22


1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 23


1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 24


1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 25


1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 26


1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 27


1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 28


1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 29


1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 30


1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 31


1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  29              		.loc 1 1726 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 32


  35              		.loc 1 1734 0
  36 0000 0246     		mov	r2, r0
  37 0002 40B9     		cbnz	r0, .L2
  38              	.LBB113:
  39              	.LBB114:
  40              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 33


  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 34


 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 35


 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  41              		.loc 2 195 0
  42              		.syntax unified
  43              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  44 0004 4FF05003 			mov r3, #80												
  45 0008 83F31188 		msr basepri, r3											
  46 000c BFF36F8F 		isb														
  47 0010 BFF34F8F 		dsb														
  48              	
  49              	@ 0 "" 2
  50              	.LVL1:
  51              		.thumb
  52              		.syntax unified
  53              	.L3:
  54 0014 FEE7     		b	.L3
  55              	.L2:
  56              	.LBE114:
  57              	.LBE113:
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  58              		.loc 1 1737 0
  59 0016 4169     		ldr	r1, [r0, #20]
  60 0018 0A4B     		ldr	r3, .L12
  61 001a 9942     		cmp	r1, r3
  62 001c 01D1     		bne	.L7
  63 001e 0123     		movs	r3, #1
  64 0020 00E0     		b	.L4
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 36


  65              	.L7:
  66 0022 0023     		movs	r3, #0
  67              	.L4:
  68              		.loc 1 1737 0 is_stmt 0 discriminator 4
  69 0024 43B1     		cbz	r3, .L8
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  70              		.loc 1 1740 0 is_stmt 1
  71 0026 926A     		ldr	r2, [r2, #40]
  72 0028 0749     		ldr	r1, .L12+4
  73 002a 8A42     		cmp	r2, r1
  74 002c 06D0     		beq	.L9
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  75              		.loc 1 1744 0
  76 002e 02B1     		cbz	r2, .L6
  77 0030 0023     		movs	r3, #0
  78              	.L6:
  79              		.loc 1 1744 0 is_stmt 0 discriminator 4
  80 0032 2BB9     		cbnz	r3, .L11
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  81              		.loc 1 1727 0 is_stmt 1
  82 0034 0020     		movs	r0, #0
  83              	.LVL2:
  84 0036 7047     		bx	lr
  85              	.LVL3:
  86              	.L8:
  87 0038 0020     		movs	r0, #0
  88              	.LVL4:
  89 003a 7047     		bx	lr
  90              	.LVL5:
  91              	.L9:
  92 003c 0020     		movs	r0, #0
  93              	.LVL6:
  94 003e 7047     		bx	lr
  95              	.LVL7:
  96              	.L11:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  97              		.loc 1 1746 0
  98 0040 0120     		movs	r0, #1
  99              	.LVL8:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 37


1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 100              		.loc 1 1764 0
 101 0042 7047     		bx	lr
 102              	.L13:
 103              		.align	2
 104              	.L12:
 105 0044 00000000 		.word	.LANCHOR0
 106 0048 00000000 		.word	.LANCHOR1
 107              		.cfi_endproc
 108              	.LFE16:
 110              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	prvTaskCheckFreeStackSpace:
 116              	.LFB46:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 38


1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 39


1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 40


1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 41


1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 42


2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 43


2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 44


2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 45


2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 46


2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 47


2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 48


2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 49


2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 50


2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 51


2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 52


2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 53


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 54


2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 55


2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 56


2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 57


2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 58


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 59


2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 60


3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 61


3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 62


3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 63


3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 64


3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 65


3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 66


3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 67


3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 68


3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 69


3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 117              		.loc 1 3623 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 70


 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 122              	.LVL9:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 123              		.loc 1 3624 0
 124 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 125              		.loc 1 3626 0
 126 0002 01E0     		b	.L15
 127              	.LVL10:
 128              	.L16:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 129              		.loc 1 3628 0
 130 0004 0130     		adds	r0, r0, #1
 131              	.LVL11:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 132              		.loc 1 3629 0
 133 0006 0133     		adds	r3, r3, #1
 134              	.LVL12:
 135              	.L15:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 136              		.loc 1 3626 0
 137 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 138 000a A52A     		cmp	r2, #165
 139 000c FAD0     		beq	.L16
 140              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 141              		.loc 1 3635 0
 142 000e C3F38F00 		ubfx	r0, r3, #2, #16
 143              	.LVL14:
 144 0012 7047     		bx	lr
 145              		.cfi_endproc
 146              	.LFE46:
 148              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 149              		.align	2
 150              		.thumb
 151              		.thumb_func
 153              	prvResetNextTaskUnblockTime:
 154              	.LFB49:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 71


3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 72


3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 155              		.loc 1 3725 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 160              		.loc 1 3728 0
 161 0000 0A4B     		ldr	r3, .L22
 162 0002 1B68     		ldr	r3, [r3]
 163 0004 1B68     		ldr	r3, [r3]
 164 0006 0BB9     		cbnz	r3, .L21
 165 0008 0123     		movs	r3, #1
 166 000a 00E0     		b	.L18
 167              	.L21:
 168 000c 0023     		movs	r3, #0
 169              	.L18:
 170              		.loc 1 3728 0 is_stmt 0 discriminator 4
 171 000e 23B1     		cbz	r3, .L19
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 172              		.loc 1 3734 0 is_stmt 1
 173 0010 4FF0FF32 		mov	r2, #-1
 174 0014 064B     		ldr	r3, .L22+4
 175 0016 1A60     		str	r2, [r3]
 176 0018 7047     		bx	lr
 177              	.L19:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 73


3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 178              		.loc 1 3742 0
 179 001a 044B     		ldr	r3, .L22
 180 001c 1B68     		ldr	r3, [r3]
 181 001e DB68     		ldr	r3, [r3, #12]
 182 0020 DB68     		ldr	r3, [r3, #12]
 183              	.LVL15:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 184              		.loc 1 3743 0
 185 0022 5A68     		ldr	r2, [r3, #4]
 186 0024 024B     		ldr	r3, .L22+4
 187              	.LVL16:
 188 0026 1A60     		str	r2, [r3]
 189 0028 7047     		bx	lr
 190              	.L23:
 191 002a 00BF     		.align	2
 192              	.L22:
 193 002c 00000000 		.word	.LANCHOR2
 194 0030 00000000 		.word	.LANCHOR3
 195              		.cfi_endproc
 196              	.LFE49:
 198              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 199              		.align	2
 200              		.thumb
 201              		.thumb_func
 203              	prvInitialiseNewTask:
 204              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 205              		.loc 1 825 0
 206              		.cfi_startproc
 207              		@ args = 16, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL17:
 210 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 211              	.LCFI0:
 212              		.cfi_def_cfa_offset 32
 213              		.cfi_offset 4, -32
 214              		.cfi_offset 5, -28
 215              		.cfi_offset 6, -24
 216              		.cfi_offset 7, -20
 217              		.cfi_offset 8, -16
 218              		.cfi_offset 9, -12
 219              		.cfi_offset 10, -8
 220              		.cfi_offset 14, -4
 221 0004 8146     		mov	r9, r0
 222 0006 0D46     		mov	r5, r1
 223 0008 1746     		mov	r7, r2
 224 000a 9A46     		mov	r10, r3
 225 000c 089E     		ldr	r6, [sp, #32]
 226 000e DDF82480 		ldr	r8, [sp, #36]
 227 0012 0A9C     		ldr	r4, [sp, #40]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 74


 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 228              		.loc 1 847 0
 229 0014 9200     		lsls	r2, r2, #2
 230              	.LVL18:
 231 0016 A521     		movs	r1, #165
 232              	.LVL19:
 233 0018 206B     		ldr	r0, [r4, #48]
 234              	.LVL20:
 235 001a FFF7FEFF 		bl	memset
 236              	.LVL21:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 237              		.loc 1 857 0
 238 001e 236B     		ldr	r3, [r4, #48]
 239 0020 07F18042 		add	r2, r7, #1073741824
 240 0024 013A     		subs	r2, r2, #1
 241 0026 03EB8207 		add	r7, r3, r2, lsl #2
 242              	.LVL22:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 243              		.loc 1 858 0
 244 002a 27F00707 		bic	r7, r7, #7
 245              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 246              		.loc 1 885 0
 247 002e 0023     		movs	r3, #0
 248 0030 06E0     		b	.L25
 249              	.LVL24:
 250              	.L27:
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 251              		.loc 1 887 0
 252 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 253 0034 E218     		adds	r2, r4, r3
 254 0036 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 255              		.loc 1 892 0
 256 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 257 003c 12B1     		cbz	r2, .L26
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 258              		.loc 1 885 0 discriminator 2
 259 003e 0133     		adds	r3, r3, #1
 260              	.LVL25:
 261              	.L25:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 262              		.loc 1 885 0 is_stmt 0 discriminator 1
 263 0040 0F2B     		cmp	r3, #15
 264 0042 F6D9     		bls	.L27
 265              	.L26:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266              		.loc 1 904 0 is_stmt 1
 267 0044 0023     		movs	r3, #0
 268              	.LVL26:
 269 0046 84F84330 		strb	r3, [r4, #67]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 270              		.loc 1 908 0
 271 004a 372E     		cmp	r6, #55
 272 004c 00D9     		bls	.L28
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 910 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 75


 274 004e 3726     		movs	r6, #55
 275              	.L28:
 276              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 277              		.loc 1 917 0
 278 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 279              		.loc 1 920 0
 280 0052 E664     		str	r6, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 281              		.loc 1 921 0
 282 0054 0025     		movs	r5, #0
 283              	.LVL28:
 284 0056 2565     		str	r5, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 285              		.loc 1 925 0
 286 0058 201D     		adds	r0, r4, #4
 287 005a FFF7FEFF 		bl	vListInitialiseItem
 288              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 289              		.loc 1 926 0
 290 005e 04F11800 		add	r0, r4, #24
 291 0062 FFF7FEFF 		bl	vListInitialiseItem
 292              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 293              		.loc 1 930 0
 294 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 295              		.loc 1 933 0
 296 0068 C6F13806 		rsb	r6, r6, #56
 297              	.LVL31:
 298 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 299              		.loc 1 934 0
 300 006e 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 301              		.loc 1 976 0
 302 0070 6565     		str	r5, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 303              		.loc 1 977 0
 304 0072 84F85850 		strb	r5, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 1004 0
 306 0076 5246     		mov	r2, r10
 307 0078 4946     		mov	r1, r9
 308 007a 3846     		mov	r0, r7
 309 007c FFF7FEFF 		bl	pxPortInitialiseStack
 310              	.LVL32:
 311 0080 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 312              		.loc 1 1008 0
 313 0082 B8F1000F 		cmp	r8, #0
 314 0086 01D0     		beq	.L24
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 315              		.loc 1 1012 0
 316 0088 C8F80040 		str	r4, [r8]
 317              	.L24:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 76


 318 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 319              		.cfi_endproc
 320              	.LFE6:
 322              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 323              		.align	2
 324              		.thumb
 325              		.thumb_func
 327              	prvInitialiseTaskLists:
 328              	.LFB42:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 329              		.loc 1 3431 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333 0000 38B5     		push	{r3, r4, r5, lr}
 334              	.LCFI1:
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 3, -16
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 14, -4
 340              	.LVL33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 341              		.loc 1 3434 0
 342 0002 0024     		movs	r4, #0
 343 0004 07E0     		b	.L33
 344              	.LVL34:
 345              	.L34:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 346              		.loc 1 3436 0 discriminator 3
 347 0006 04EB8402 		add	r2, r4, r4, lsl #2
 348 000a 9300     		lsls	r3, r2, #2
 349 000c 0E48     		ldr	r0, .L36
 350 000e 1844     		add	r0, r0, r3
 351 0010 FFF7FEFF 		bl	vListInitialise
 352              	.LVL35:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 353              		.loc 1 3434 0 discriminator 3
 354 0014 0134     		adds	r4, r4, #1
 355              	.LVL36:
 356              	.L33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 357              		.loc 1 3434 0 is_stmt 0 discriminator 1
 358 0016 372C     		cmp	r4, #55
 359 0018 F5D9     		bls	.L34
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 360              		.loc 1 3439 0 is_stmt 1
 361 001a 0C4D     		ldr	r5, .L36+4
 362 001c 2846     		mov	r0, r5
 363 001e FFF7FEFF 		bl	vListInitialise
 364              	.LVL37:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 365              		.loc 1 3440 0
 366 0022 0B4C     		ldr	r4, .L36+8
 367              	.LVL38:
 368 0024 2046     		mov	r0, r4
 369 0026 FFF7FEFF 		bl	vListInitialise
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 77


 370              	.LVL39:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371              		.loc 1 3441 0
 372 002a 0A48     		ldr	r0, .L36+12
 373 002c FFF7FEFF 		bl	vListInitialise
 374              	.LVL40:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 375              		.loc 1 3445 0
 376 0030 0948     		ldr	r0, .L36+16
 377 0032 FFF7FEFF 		bl	vListInitialise
 378              	.LVL41:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 379              		.loc 1 3451 0
 380 0036 0948     		ldr	r0, .L36+20
 381 0038 FFF7FEFF 		bl	vListInitialise
 382              	.LVL42:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 383              		.loc 1 3457 0
 384 003c 084B     		ldr	r3, .L36+24
 385 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 386              		.loc 1 3458 0
 387 0040 084B     		ldr	r3, .L36+28
 388 0042 1C60     		str	r4, [r3]
 389 0044 38BD     		pop	{r3, r4, r5, pc}
 390              	.L37:
 391 0046 00BF     		.align	2
 392              	.L36:
 393 0048 00000000 		.word	.LANCHOR4
 394 004c 00000000 		.word	.LANCHOR5
 395 0050 00000000 		.word	.LANCHOR6
 396 0054 00000000 		.word	.LANCHOR1
 397 0058 00000000 		.word	.LANCHOR7
 398 005c 00000000 		.word	.LANCHOR0
 399 0060 00000000 		.word	.LANCHOR2
 400 0064 00000000 		.word	.LANCHOR8
 401              		.cfi_endproc
 402              	.LFE42:
 404              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 405              		.align	2
 406              		.thumb
 407              		.thumb_func
 409              	prvAddNewTaskToReadyList:
 410              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 411              		.loc 1 1022 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL43:
 416 0000 10B5     		push	{r4, lr}
 417              	.LCFI2:
 418              		.cfi_def_cfa_offset 8
 419              		.cfi_offset 4, -8
 420              		.cfi_offset 14, -4
 421 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 78


 422              		.loc 1 1025 0
 423 0004 FFF7FEFF 		bl	vPortEnterCritical
 424              	.LVL44:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 425              		.loc 1 1027 0
 426 0008 204A     		ldr	r2, .L44
 427 000a 1368     		ldr	r3, [r2]
 428 000c 0133     		adds	r3, r3, #1
 429 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 430              		.loc 1 1028 0
 431 0010 1F4B     		ldr	r3, .L44+4
 432 0012 1B68     		ldr	r3, [r3]
 433 0014 3BB9     		cbnz	r3, .L39
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434              		.loc 1 1032 0
 435 0016 1E4B     		ldr	r3, .L44+4
 436 0018 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 437              		.loc 1 1034 0
 438 001a 1368     		ldr	r3, [r2]
 439 001c 012B     		cmp	r3, #1
 440 001e 0DD1     		bne	.L40
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 441              		.loc 1 1039 0
 442 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 443              	.LVL45:
 444 0024 0AE0     		b	.L40
 445              	.L39:
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 446              		.loc 1 1051 0
 447 0026 1B4B     		ldr	r3, .L44+8
 448 0028 1B68     		ldr	r3, [r3]
 449 002a 3BB9     		cbnz	r3, .L40
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 450              		.loc 1 1053 0
 451 002c 184B     		ldr	r3, .L44+4
 452 002e 1B68     		ldr	r3, [r3]
 453 0030 DA6A     		ldr	r2, [r3, #44]
 454 0032 E36A     		ldr	r3, [r4, #44]
 455 0034 9A42     		cmp	r2, r3
 456 0036 01D8     		bhi	.L40
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 457              		.loc 1 1055 0
 458 0038 154B     		ldr	r3, .L44+4
 459 003a 1C60     		str	r4, [r3]
 460              	.L40:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1068 0
 462 003c 164A     		ldr	r2, .L44+12
 463 003e 1368     		ldr	r3, [r2]
 464 0040 0133     		adds	r3, r3, #1
 465 0042 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 466              		.loc 1 1073 0
 467 0044 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 79


 468              		.loc 1 1078 0
 469 0046 E36A     		ldr	r3, [r4, #44]
 470 0048 144A     		ldr	r2, .L44+16
 471 004a 1268     		ldr	r2, [r2]
 472 004c 9342     		cmp	r3, r2
 473 004e 01D9     		bls	.L41
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 474              		.loc 1 1078 0 is_stmt 0 discriminator 1
 475 0050 124A     		ldr	r2, .L44+16
 476 0052 1360     		str	r3, [r2]
 477              	.L41:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478              		.loc 1 1078 0 discriminator 3
 479 0054 03EB8303 		add	r3, r3, r3, lsl #2
 480 0058 9A00     		lsls	r2, r3, #2
 481 005a 211D     		adds	r1, r4, #4
 482 005c 1048     		ldr	r0, .L44+20
 483 005e 1044     		add	r0, r0, r2
 484 0060 FFF7FEFF 		bl	vListInsertEnd
 485              	.LVL46:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 486              		.loc 1 1082 0 is_stmt 1 discriminator 3
 487 0064 FFF7FEFF 		bl	vPortExitCritical
 488              	.LVL47:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 489              		.loc 1 1084 0 discriminator 3
 490 0068 0A4B     		ldr	r3, .L44+8
 491 006a 1B68     		ldr	r3, [r3]
 492 006c 6BB1     		cbz	r3, .L38
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 493              		.loc 1 1088 0
 494 006e 084B     		ldr	r3, .L44+4
 495 0070 1B68     		ldr	r3, [r3]
 496 0072 DA6A     		ldr	r2, [r3, #44]
 497 0074 E36A     		ldr	r3, [r4, #44]
 498 0076 9A42     		cmp	r2, r3
 499 0078 07D2     		bcs	.L38
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 500              		.loc 1 1090 0
 501 007a 4FF08052 		mov	r2, #268435456
 502 007e 094B     		ldr	r3, .L44+24
 503 0080 1A60     		str	r2, [r3]
 504              		.syntax unified
 505              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 506 0082 BFF34F8F 		dsb
 507              	@ 0 "" 2
 508              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 509 0086 BFF36F8F 		isb
 510              	@ 0 "" 2
 511              		.thumb
 512              		.syntax unified
 513              	.L38:
 514 008a 10BD     		pop	{r4, pc}
 515              	.LVL48:
 516              	.L45:
 517              		.align	2
 518              	.L44:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 80


 519 008c 00000000 		.word	.LANCHOR9
 520 0090 00000000 		.word	.LANCHOR10
 521 0094 00000000 		.word	.LANCHOR11
 522 0098 00000000 		.word	.LANCHOR12
 523 009c 00000000 		.word	.LANCHOR13
 524 00a0 00000000 		.word	.LANCHOR4
 525 00a4 04ED00E0 		.word	-536810236
 526              		.cfi_endproc
 527              	.LFE7:
 529              		.section	.text.prvDeleteTCB,"ax",%progbits
 530              		.align	2
 531              		.thumb
 532              		.thumb_func
 534              	prvDeleteTCB:
 535              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 536              		.loc 1 3671 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              	.LVL49:
 541 0000 10B5     		push	{r4, lr}
 542              	.LCFI3:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 4, -8
 545              		.cfi_offset 14, -4
 546 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 547              		.loc 1 3697 0
 548 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 549 0008 33B9     		cbnz	r3, .L47
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 550              		.loc 1 3701 0
 551 000a 006B     		ldr	r0, [r0, #48]
 552              	.LVL50:
 553 000c FFF7FEFF 		bl	vPortFree
 554              	.LVL51:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 555              		.loc 1 3702 0
 556 0010 2046     		mov	r0, r4
 557 0012 FFF7FEFF 		bl	vPortFree
 558              	.LVL52:
 559 0016 10BD     		pop	{r4, pc}
 560              	.LVL53:
 561              	.L47:
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 562              		.loc 1 3704 0
 563 0018 012B     		cmp	r3, #1
 564 001a 02D1     		bne	.L49
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 565              		.loc 1 3708 0
 566 001c FFF7FEFF 		bl	vPortFree
 567              	.LVL54:
 568 0020 10BD     		pop	{r4, pc}
 569              	.LVL55:
 570              	.L49:
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 81


 571              		.loc 1 3714 0
 572 0022 022B     		cmp	r3, #2
 573 0024 08D0     		beq	.L46
 574              	.LBB115:
 575              	.LBB116:
 576              		.loc 2 195 0
 577              		.syntax unified
 578              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 579 0026 4FF05003 			mov r3, #80												
 580 002a 83F31188 		msr basepri, r3											
 581 002e BFF36F8F 		isb														
 582 0032 BFF34F8F 		dsb														
 583              	
 584              	@ 0 "" 2
 585              	.LVL56:
 586              		.thumb
 587              		.syntax unified
 588              	.L50:
 589 0036 FEE7     		b	.L50
 590              	.L46:
 591 0038 10BD     		pop	{r4, pc}
 592              	.LBE116:
 593              	.LBE115:
 594              		.cfi_endproc
 595              	.LFE48:
 597 003a 00BF     		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 598              		.align	2
 599              		.thumb
 600              		.thumb_func
 602              	prvCheckTasksWaitingTermination:
 603              	.LFB43:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604              		.loc 1 3463 0
 605              		.cfi_startproc
 606              		@ args = 0, pretend = 0, frame = 0
 607              		@ frame_needed = 0, uses_anonymous_args = 0
 608 0000 10B5     		push	{r4, lr}
 609              	.LCFI4:
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 4, -8
 612              		.cfi_offset 14, -4
 613              	.LBB117:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 614              		.loc 1 3473 0
 615 0002 14E0     		b	.L53
 616              	.L54:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 617              		.loc 1 3475 0
 618 0004 FFF7FEFF 		bl	vPortEnterCritical
 619              	.LVL57:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 620              		.loc 1 3477 0
 621 0008 0B4B     		ldr	r3, .L56
 622 000a DB68     		ldr	r3, [r3, #12]
 623 000c DC68     		ldr	r4, [r3, #12]
 624              	.LVL58:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 82


 625              		.loc 1 3478 0
 626 000e 201D     		adds	r0, r4, #4
 627 0010 FFF7FEFF 		bl	uxListRemove
 628              	.LVL59:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 629              		.loc 1 3479 0
 630 0014 094A     		ldr	r2, .L56+4
 631 0016 1368     		ldr	r3, [r2]
 632 0018 013B     		subs	r3, r3, #1
 633 001a 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 634              		.loc 1 3480 0
 635 001c 084A     		ldr	r2, .L56+8
 636 001e 1368     		ldr	r3, [r2]
 637 0020 013B     		subs	r3, r3, #1
 638 0022 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639              		.loc 1 3482 0
 640 0024 FFF7FEFF 		bl	vPortExitCritical
 641              	.LVL60:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 642              		.loc 1 3484 0
 643 0028 2046     		mov	r0, r4
 644 002a FFF7FEFF 		bl	prvDeleteTCB
 645              	.LVL61:
 646              	.L53:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 647              		.loc 1 3473 0
 648 002e 044B     		ldr	r3, .L56+8
 649 0030 1B68     		ldr	r3, [r3]
 650 0032 002B     		cmp	r3, #0
 651 0034 E6D1     		bne	.L54
 652              	.LBE117:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 653              		.loc 1 3488 0
 654 0036 10BD     		pop	{r4, pc}
 655              	.L57:
 656              		.align	2
 657              	.L56:
 658 0038 00000000 		.word	.LANCHOR7
 659 003c 00000000 		.word	.LANCHOR9
 660 0040 00000000 		.word	.LANCHOR14
 661              		.cfi_endproc
 662              	.LFE43:
 664              		.section	.text.prvIdleTask,"ax",%progbits
 665              		.align	2
 666              		.thumb
 667              		.thumb_func
 669              	prvIdleTask:
 670              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 671              		.loc 1 3219 0
 672              		.cfi_startproc
 673              		@ Volatile: function does not return.
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              	.LVL62:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 83


 677 0000 08B5     		push	{r3, lr}
 678              	.LCFI5:
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 3, -8
 681              		.cfi_offset 14, -4
 682              	.LVL63:
 683              	.L59:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684              		.loc 1 3235 0
 685 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 686              	.LVL64:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 687              		.loc 1 3258 0
 688 0006 064B     		ldr	r3, .L62
 689 0008 1B68     		ldr	r3, [r3]
 690 000a 012B     		cmp	r3, #1
 691 000c F9D9     		bls	.L59
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 692              		.loc 1 3260 0
 693 000e 4FF08052 		mov	r2, #268435456
 694 0012 044B     		ldr	r3, .L62+4
 695 0014 1A60     		str	r2, [r3]
 696              		.syntax unified
 697              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 698 0016 BFF34F8F 		dsb
 699              	@ 0 "" 2
 700              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 701 001a BFF36F8F 		isb
 702              	@ 0 "" 2
 703              		.thumb
 704              		.syntax unified
 705 001e F0E7     		b	.L59
 706              	.L63:
 707              		.align	2
 708              	.L62:
 709 0020 00000000 		.word	.LANCHOR4
 710 0024 04ED00E0 		.word	-536810236
 711              		.cfi_endproc
 712              	.LFE41:
 714              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 715              		.align	2
 716              		.thumb
 717              		.thumb_func
 719              	prvAddCurrentTaskToDelayedList:
 720              	.LFB63:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 84


3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 85


3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 86


3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 87


3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 88


3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 89


4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 90


4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 91


4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 92


4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 93


4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 94


4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 95


4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 96


4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 97


4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 98


4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 99


4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 100


4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 101


4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 102


4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 103


4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 104


4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 721              		.loc 1 4907 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              	.LVL65:
 726 0000 70B5     		push	{r4, r5, r6, lr}
 727              	.LCFI6:
 728              		.cfi_def_cfa_offset 16
 729              		.cfi_offset 4, -16
 730              		.cfi_offset 5, -12
 731              		.cfi_offset 6, -8
 732              		.cfi_offset 14, -4
 733 0002 0446     		mov	r4, r0
 734 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 735              		.loc 1 4909 0
 736 0006 174B     		ldr	r3, .L69
 737 0008 1D68     		ldr	r5, [r3]
 738              	.LVL66:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 739              		.loc 1 4922 0
 740 000a 174B     		ldr	r3, .L69+4
 741 000c 1868     		ldr	r0, [r3]
 742              	.LVL67:
 743 000e 0430     		adds	r0, r0, #4
 744 0010 FFF7FEFF 		bl	uxListRemove
 745              	.LVL68:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 105


4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 746              		.loc 1 4935 0
 747 0014 B4F1FF3F 		cmp	r4, #-1
 748 0018 07D1     		bne	.L65
 749              		.loc 1 4935 0 is_stmt 0 discriminator 1
 750 001a 36B1     		cbz	r6, .L65
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 751              		.loc 1 4940 0 is_stmt 1
 752 001c 124B     		ldr	r3, .L69+4
 753 001e 1968     		ldr	r1, [r3]
 754 0020 0431     		adds	r1, r1, #4
 755 0022 1248     		ldr	r0, .L69+8
 756 0024 FFF7FEFF 		bl	vListInsertEnd
 757              	.LVL69:
 758 0028 70BD     		pop	{r4, r5, r6, pc}
 759              	.LVL70:
 760              	.L65:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 761              		.loc 1 4947 0
 762 002a 2C44     		add	r4, r4, r5
 763              	.LVL71:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 764              		.loc 1 4950 0
 765 002c 0E4B     		ldr	r3, .L69+4
 766 002e 1B68     		ldr	r3, [r3]
 767 0030 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 768              		.loc 1 4952 0
 769 0032 A542     		cmp	r5, r4
 770 0034 07D9     		bls	.L67
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 771              		.loc 1 4956 0
 772 0036 0E4B     		ldr	r3, .L69+12
 773 0038 1868     		ldr	r0, [r3]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 106


 774 003a 0B4B     		ldr	r3, .L69+4
 775 003c 1968     		ldr	r1, [r3]
 776 003e 0431     		adds	r1, r1, #4
 777 0040 FFF7FEFF 		bl	vListInsert
 778              	.LVL72:
 779 0044 70BD     		pop	{r4, r5, r6, pc}
 780              	.LVL73:
 781              	.L67:
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 782              		.loc 1 4962 0
 783 0046 0B4B     		ldr	r3, .L69+16
 784 0048 1868     		ldr	r0, [r3]
 785 004a 074B     		ldr	r3, .L69+4
 786 004c 1968     		ldr	r1, [r3]
 787 004e 0431     		adds	r1, r1, #4
 788 0050 FFF7FEFF 		bl	vListInsert
 789              	.LVL74:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 790              		.loc 1 4967 0
 791 0054 084B     		ldr	r3, .L69+20
 792 0056 1B68     		ldr	r3, [r3]
 793 0058 9C42     		cmp	r4, r3
 794 005a 01D2     		bcs	.L64
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 795              		.loc 1 4969 0
 796 005c 064B     		ldr	r3, .L69+20
 797 005e 1C60     		str	r4, [r3]
 798              	.L64:
 799 0060 70BD     		pop	{r4, r5, r6, pc}
 800              	.LVL75:
 801              	.L70:
 802 0062 00BF     		.align	2
 803              	.L69:
 804 0064 00000000 		.word	.LANCHOR15
 805 0068 00000000 		.word	.LANCHOR10
 806 006c 00000000 		.word	.LANCHOR0
 807 0070 00000000 		.word	.LANCHOR8
 808 0074 00000000 		.word	.LANCHOR2
 809 0078 00000000 		.word	.LANCHOR3
 810              		.cfi_endproc
 811              	.LFE63:
 813              		.section	.text.xTaskCreateStatic,"ax",%progbits
 814              		.align	2
 815              		.global	xTaskCreateStatic
 816              		.thumb
 817              		.thumb_func
 819              	xTaskCreateStatic:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 107


 820              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 821              		.loc 1 582 0
 822              		.cfi_startproc
 823              		@ args = 12, pretend = 0, frame = 8
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825              	.LVL76:
 826 0000 70B5     		push	{r4, r5, r6, lr}
 827              	.LCFI7:
 828              		.cfi_def_cfa_offset 16
 829              		.cfi_offset 4, -16
 830              		.cfi_offset 5, -12
 831              		.cfi_offset 6, -8
 832              		.cfi_offset 14, -4
 833 0002 86B0     		sub	sp, sp, #24
 834              	.LCFI8:
 835              		.cfi_def_cfa_offset 40
 836 0004 0B9D     		ldr	r5, [sp, #44]
 837 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 838              		.loc 1 586 0
 839 0008 45B9     		cbnz	r5, .L72
 840              	.LBB118:
 841              	.LBB119:
 842              		.loc 2 195 0
 843              		.syntax unified
 844              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 845 000a 4FF05003 			mov r3, #80												
 846 000e 83F31188 		msr basepri, r3											
 847 0012 BFF36F8F 		isb														
 848 0016 BFF34F8F 		dsb														
 849              	
 850              	@ 0 "" 2
 851              	.LVL77:
 852              		.thumb
 853              		.syntax unified
 854              	.L73:
 855 001a FEE7     		b	.L73
 856              	.LVL78:
 857              	.L72:
 858              	.LBE119:
 859              	.LBE118:
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860              		.loc 1 587 0
 861 001c 44B9     		cbnz	r4, .L74
 862              	.LBB120:
 863              	.LBB121:
 864              		.loc 2 195 0
 865              		.syntax unified
 866              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 867 001e 4FF05003 			mov r3, #80												
 868 0022 83F31188 		msr basepri, r3											
 869 0026 BFF36F8F 		isb														
 870 002a BFF34F8F 		dsb														
 871              	
 872              	@ 0 "" 2
 873              	.LVL79:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 108


 874              		.thumb
 875              		.syntax unified
 876              	.L75:
 877 002e FEE7     		b	.L75
 878              	.LVL80:
 879              	.L74:
 880              	.LBE121:
 881              	.LBE120:
 882              	.LBB122:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 883              		.loc 1 594 0
 884 0030 5C26     		movs	r6, #92
 885 0032 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 886              		.loc 1 595 0
 887 0034 049E     		ldr	r6, [sp, #16]
 888 0036 5C2E     		cmp	r6, #92
 889 0038 08D0     		beq	.L76
 890              	.LBB123:
 891              	.LBB124:
 892              		.loc 2 195 0
 893              		.syntax unified
 894              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 895 003a 4FF05003 			mov r3, #80												
 896 003e 83F31188 		msr basepri, r3											
 897 0042 BFF36F8F 		isb														
 898 0046 BFF34F8F 		dsb														
 899              	
 900              	@ 0 "" 2
 901              	.LVL81:
 902              		.thumb
 903              		.syntax unified
 904              	.L77:
 905 004a FEE7     		b	.L77
 906              	.LVL82:
 907              	.L76:
 908              	.LBE124:
 909              	.LBE123:
 910              	.LBE122:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911              		.loc 1 600 0
 912 004c 8CB1     		cbz	r4, .L78
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 913              		.loc 1 600 0 is_stmt 0 discriminator 1
 914 004e 85B1     		cbz	r5, .L78
 915              	.LVL83:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916              		.loc 1 605 0 is_stmt 1
 917 0050 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 918              		.loc 1 611 0
 919 0052 0225     		movs	r5, #2
 920 0054 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 921              		.loc 1 615 0
 922 0058 0025     		movs	r5, #0
 923 005a 0395     		str	r5, [sp, #12]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 109


 924 005c 0294     		str	r4, [sp, #8]
 925 005e 05AD     		add	r5, sp, #20
 926 0060 0195     		str	r5, [sp, #4]
 927 0062 0A9D     		ldr	r5, [sp, #40]
 928 0064 0095     		str	r5, [sp]
 929 0066 FFF7FEFF 		bl	prvInitialiseNewTask
 930              	.LVL84:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 931              		.loc 1 616 0
 932 006a 2046     		mov	r0, r4
 933 006c FFF7FEFF 		bl	prvAddNewTaskToReadyList
 934              	.LVL85:
 935 0070 01E0     		b	.L79
 936              	.LVL86:
 937              	.L78:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 938              		.loc 1 620 0
 939 0072 0023     		movs	r3, #0
 940              	.LVL87:
 941 0074 0593     		str	r3, [sp, #20]
 942              	.LVL88:
 943              	.L79:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944              		.loc 1 624 0
 945 0076 0598     		ldr	r0, [sp, #20]
 946 0078 06B0     		add	sp, sp, #24
 947              	.LCFI9:
 948              		.cfi_def_cfa_offset 16
 949              		@ sp needed
 950 007a 70BD     		pop	{r4, r5, r6, pc}
 951              		.cfi_endproc
 952              	.LFE4:
 954              		.section	.text.xTaskCreate,"ax",%progbits
 955              		.align	2
 956              		.global	xTaskCreate
 957              		.thumb
 958              		.thumb_func
 960              	xTaskCreate:
 961              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 962              		.loc 1 732 0
 963              		.cfi_startproc
 964              		@ args = 8, pretend = 0, frame = 0
 965              		@ frame_needed = 0, uses_anonymous_args = 0
 966              	.LVL89:
 967 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 968              	.LCFI10:
 969              		.cfi_def_cfa_offset 28
 970              		.cfi_offset 4, -28
 971              		.cfi_offset 5, -24
 972              		.cfi_offset 6, -20
 973              		.cfi_offset 7, -16
 974              		.cfi_offset 8, -12
 975              		.cfi_offset 9, -8
 976              		.cfi_offset 14, -4
 977 0004 85B0     		sub	sp, sp, #20
 978              	.LCFI11:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 110


 979              		.cfi_def_cfa_offset 48
 980 0006 0646     		mov	r6, r0
 981 0008 0F46     		mov	r7, r1
 982 000a 1546     		mov	r5, r2
 983 000c 9846     		mov	r8, r3
 984              	.LBB125:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 985              		.loc 1 766 0
 986 000e 9000     		lsls	r0, r2, #2
 987              	.LVL90:
 988 0010 FFF7FEFF 		bl	pvPortMalloc
 989              	.LVL91:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 990              		.loc 1 768 0
 991 0014 60B1     		cbz	r0, .L85
 992 0016 8146     		mov	r9, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 993              		.loc 1 771 0
 994 0018 5C20     		movs	r0, #92
 995              	.LVL92:
 996 001a FFF7FEFF 		bl	pvPortMalloc
 997              	.LVL93:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 998              		.loc 1 773 0
 999 001e 0446     		mov	r4, r0
 1000 0020 10B1     		cbz	r0, .L83
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1001              		.loc 1 776 0
 1002 0022 C0F83090 		str	r9, [r0, #48]
 1003 0026 04E0     		b	.L82
 1004              	.L83:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1005              		.loc 1 782 0
 1006 0028 4846     		mov	r0, r9
 1007              	.LVL94:
 1008 002a FFF7FEFF 		bl	vPortFree
 1009              	.LVL95:
 1010 002e 00E0     		b	.L82
 1011              	.LVL96:
 1012              	.L85:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1013              		.loc 1 787 0
 1014 0030 0024     		movs	r4, #0
 1015              	.LVL97:
 1016              	.L82:
 1017              	.LBE125:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1018              		.loc 1 792 0
 1019 0032 9CB1     		cbz	r4, .L86
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1020              		.loc 1 798 0
 1021 0034 0023     		movs	r3, #0
 1022 0036 84F85930 		strb	r3, [r4, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1023              		.loc 1 802 0
 1024 003a 0393     		str	r3, [sp, #12]
 1025 003c 0294     		str	r4, [sp, #8]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 111


 1026 003e 0D9B     		ldr	r3, [sp, #52]
 1027 0040 0193     		str	r3, [sp, #4]
 1028 0042 0C9B     		ldr	r3, [sp, #48]
 1029 0044 0093     		str	r3, [sp]
 1030 0046 4346     		mov	r3, r8
 1031 0048 2A46     		mov	r2, r5
 1032 004a 3946     		mov	r1, r7
 1033 004c 3046     		mov	r0, r6
 1034 004e FFF7FEFF 		bl	prvInitialiseNewTask
 1035              	.LVL98:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1036              		.loc 1 803 0
 1037 0052 2046     		mov	r0, r4
 1038 0054 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1039              	.LVL99:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1040              		.loc 1 804 0
 1041 0058 0120     		movs	r0, #1
 1042 005a 01E0     		b	.L84
 1043              	.LVL100:
 1044              	.L86:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1045              		.loc 1 808 0
 1046 005c 4FF0FF30 		mov	r0, #-1
 1047              	.L84:
 1048              	.LVL101:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1049              		.loc 1 812 0
 1050 0060 05B0     		add	sp, sp, #20
 1051              	.LCFI12:
 1052              		.cfi_def_cfa_offset 28
 1053              		@ sp needed
 1054 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1055              		.cfi_endproc
 1056              	.LFE5:
 1058 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1059              		.align	2
 1060              		.global	vTaskDelete
 1061              		.thumb
 1062              		.thumb_func
 1064              	vTaskDelete:
 1065              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1066              		.loc 1 1107 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              	.LVL102:
 1071 0000 38B5     		push	{r3, r4, r5, lr}
 1072              	.LCFI13:
 1073              		.cfi_def_cfa_offset 16
 1074              		.cfi_offset 3, -16
 1075              		.cfi_offset 4, -12
 1076              		.cfi_offset 5, -8
 1077              		.cfi_offset 14, -4
 1078 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 112


 1079              		.loc 1 1110 0
 1080 0004 FFF7FEFF 		bl	vPortEnterCritical
 1081              	.LVL103:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1082              		.loc 1 1114 0
 1083 0008 0CB9     		cbnz	r4, .L89
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1084              		.loc 1 1114 0 is_stmt 0 discriminator 1
 1085 000a 224B     		ldr	r3, .L97
 1086 000c 1C68     		ldr	r4, [r3]
 1087              	.LVL104:
 1088              	.L89:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1089              		.loc 1 1117 0 is_stmt 1 discriminator 4
 1090 000e 251D     		adds	r5, r4, #4
 1091 0010 2846     		mov	r0, r5
 1092 0012 FFF7FEFF 		bl	uxListRemove
 1093              	.LVL105:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1094              		.loc 1 1127 0 discriminator 4
 1095 0016 A36A     		ldr	r3, [r4, #40]
 1096 0018 1BB1     		cbz	r3, .L90
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1097              		.loc 1 1129 0
 1098 001a 04F11800 		add	r0, r4, #24
 1099 001e FFF7FEFF 		bl	uxListRemove
 1100              	.LVL106:
 1101              	.L90:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1102              		.loc 1 1140 0
 1103 0022 1D4A     		ldr	r2, .L97+4
 1104 0024 1368     		ldr	r3, [r2]
 1105 0026 0133     		adds	r3, r3, #1
 1106 0028 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1107              		.loc 1 1142 0
 1108 002a 1A4B     		ldr	r3, .L97
 1109 002c 1B68     		ldr	r3, [r3]
 1110 002e 9C42     		cmp	r4, r3
 1111 0030 08D1     		bne	.L91
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1112              		.loc 1 1149 0
 1113 0032 2946     		mov	r1, r5
 1114 0034 1948     		ldr	r0, .L97+8
 1115 0036 FFF7FEFF 		bl	vListInsertEnd
 1116              	.LVL107:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1117              		.loc 1 1154 0
 1118 003a 194A     		ldr	r2, .L97+12
 1119 003c 1368     		ldr	r3, [r2]
 1120 003e 0133     		adds	r3, r3, #1
 1121 0040 1360     		str	r3, [r2]
 1122 0042 08E0     		b	.L92
 1123              	.L91:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1124              		.loc 1 1165 0
 1125 0044 174A     		ldr	r2, .L97+16
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 113


 1126 0046 1368     		ldr	r3, [r2]
 1127 0048 013B     		subs	r3, r3, #1
 1128 004a 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1129              		.loc 1 1166 0
 1130 004c 2046     		mov	r0, r4
 1131 004e FFF7FEFF 		bl	prvDeleteTCB
 1132              	.LVL108:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1133              		.loc 1 1170 0
 1134 0052 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1135              	.LVL109:
 1136              	.L92:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1137              		.loc 1 1175 0
 1138 0056 FFF7FEFF 		bl	vPortExitCritical
 1139              	.LVL110:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1140              		.loc 1 1179 0
 1141 005a 134B     		ldr	r3, .L97+20
 1142 005c 1B68     		ldr	r3, [r3]
 1143 005e BBB1     		cbz	r3, .L88
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1144              		.loc 1 1181 0
 1145 0060 0C4B     		ldr	r3, .L97
 1146 0062 1B68     		ldr	r3, [r3]
 1147 0064 9C42     		cmp	r4, r3
 1148 0066 13D1     		bne	.L88
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1149              		.loc 1 1183 0
 1150 0068 104B     		ldr	r3, .L97+24
 1151 006a 1B68     		ldr	r3, [r3]
 1152 006c 43B1     		cbz	r3, .L94
 1153              	.LBB126:
 1154              	.LBB127:
 1155              		.loc 2 195 0
 1156              		.syntax unified
 1157              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1158 006e 4FF05003 			mov r3, #80												
 1159 0072 83F31188 		msr basepri, r3											
 1160 0076 BFF36F8F 		isb														
 1161 007a BFF34F8F 		dsb														
 1162              	
 1163              	@ 0 "" 2
 1164              	.LVL111:
 1165              		.thumb
 1166              		.syntax unified
 1167              	.L95:
 1168 007e FEE7     		b	.L95
 1169              	.L94:
 1170              	.LBE127:
 1171              	.LBE126:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1172              		.loc 1 1184 0
 1173 0080 4FF08052 		mov	r2, #268435456
 1174 0084 0A4B     		ldr	r3, .L97+28
 1175 0086 1A60     		str	r2, [r3]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 114


 1176              		.syntax unified
 1177              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1178 0088 BFF34F8F 		dsb
 1179              	@ 0 "" 2
 1180              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1181 008c BFF36F8F 		isb
 1182              	@ 0 "" 2
 1183              		.thumb
 1184              		.syntax unified
 1185              	.L88:
 1186 0090 38BD     		pop	{r3, r4, r5, pc}
 1187              	.LVL112:
 1188              	.L98:
 1189 0092 00BF     		.align	2
 1190              	.L97:
 1191 0094 00000000 		.word	.LANCHOR10
 1192 0098 00000000 		.word	.LANCHOR12
 1193 009c 00000000 		.word	.LANCHOR7
 1194 00a0 00000000 		.word	.LANCHOR14
 1195 00a4 00000000 		.word	.LANCHOR9
 1196 00a8 00000000 		.word	.LANCHOR11
 1197 00ac 00000000 		.word	.LANCHOR16
 1198 00b0 04ED00E0 		.word	-536810236
 1199              		.cfi_endproc
 1200              	.LFE8:
 1202              		.section	.text.eTaskGetState,"ax",%progbits
 1203              		.align	2
 1204              		.global	eTaskGetState
 1205              		.thumb
 1206              		.thumb_func
 1208              	eTaskGetState:
 1209              	.LFB11:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1210              		.loc 1 1328 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              	.LVL113:
 1215 0000 38B5     		push	{r3, r4, r5, lr}
 1216              	.LCFI14:
 1217              		.cfi_def_cfa_offset 16
 1218              		.cfi_offset 3, -16
 1219              		.cfi_offset 4, -12
 1220              		.cfi_offset 5, -8
 1221              		.cfi_offset 14, -4
 1222              	.LVL114:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1223              		.loc 1 1333 0
 1224 0002 40B9     		cbnz	r0, .L100
 1225              	.LBB128:
 1226              	.LBB129:
 1227              		.loc 2 195 0
 1228              		.syntax unified
 1229              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1230 0004 4FF05003 			mov r3, #80												
 1231 0008 83F31188 		msr basepri, r3											
 1232 000c BFF36F8F 		isb														
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 115


 1233 0010 BFF34F8F 		dsb														
 1234              	
 1235              	@ 0 "" 2
 1236              	.LVL115:
 1237              		.thumb
 1238              		.syntax unified
 1239              	.L101:
 1240 0014 FEE7     		b	.L101
 1241              	.L100:
 1242 0016 0546     		mov	r5, r0
 1243              	.LBE129:
 1244              	.LBE128:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1245              		.loc 1 1335 0
 1246 0018 144B     		ldr	r3, .L111
 1247 001a 1B68     		ldr	r3, [r3]
 1248 001c 9842     		cmp	r0, r3
 1249 001e 19D0     		beq	.L104
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1250              		.loc 1 1342 0
 1251 0020 FFF7FEFF 		bl	vPortEnterCritical
 1252              	.LVL116:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1253              		.loc 1 1344 0
 1254 0024 6C69     		ldr	r4, [r5, #20]
 1255              	.LVL117:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1256              		.loc 1 1346 0
 1257 0026 FFF7FEFF 		bl	vPortExitCritical
 1258              	.LVL118:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1259              		.loc 1 1348 0
 1260 002a 114B     		ldr	r3, .L111+4
 1261 002c 1B68     		ldr	r3, [r3]
 1262 002e 9C42     		cmp	r4, r3
 1263 0030 12D0     		beq	.L105
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1264              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1265 0032 104B     		ldr	r3, .L111+8
 1266 0034 1B68     		ldr	r3, [r3]
 1267 0036 9C42     		cmp	r4, r3
 1268 0038 10D0     		beq	.L106
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1269              		.loc 1 1356 0 is_stmt 1
 1270 003a 0F4B     		ldr	r3, .L111+12
 1271 003c 9C42     		cmp	r4, r3
 1272 003e 03D1     		bne	.L103
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1273              		.loc 1 1361 0
 1274 0040 AB6A     		ldr	r3, [r5, #40]
 1275 0042 6BB9     		cbnz	r3, .L107
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1276              		.loc 1 1363 0
 1277 0044 0320     		movs	r0, #3
 1278 0046 38BD     		pop	{r3, r4, r5, pc}
 1279              	.LVL119:
 1280              	.L103:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 116


1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1281              		.loc 1 1373 0
 1282 0048 0C4B     		ldr	r3, .L111+16
 1283 004a 9C42     		cmp	r4, r3
 1284 004c 0AD0     		beq	.L108
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1285              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1286 004e 5CB9     		cbnz	r4, .L109
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1287              		.loc 1 1378 0 is_stmt 1
 1288 0050 0420     		movs	r0, #4
 1289 0052 38BD     		pop	{r3, r4, r5, pc}
 1290              	.LVL120:
 1291              	.L104:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1292              		.loc 1 1338 0
 1293 0054 0020     		movs	r0, #0
 1294              	.LVL121:
 1295 0056 38BD     		pop	{r3, r4, r5, pc}
 1296              	.LVL122:
 1297              	.L105:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1298              		.loc 1 1352 0
 1299 0058 0220     		movs	r0, #2
 1300 005a 38BD     		pop	{r3, r4, r5, pc}
 1301              	.LVL123:
 1302              	.L106:
 1303 005c 0220     		movs	r0, #2
 1304 005e 38BD     		pop	{r3, r4, r5, pc}
 1305              	.LVL124:
 1306              	.L107:
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1307              		.loc 1 1367 0
 1308 0060 0220     		movs	r0, #2
 1309 0062 38BD     		pop	{r3, r4, r5, pc}
 1310              	.LVL125:
 1311              	.L108:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1312              		.loc 1 1378 0
 1313 0064 0420     		movs	r0, #4
 1314 0066 38BD     		pop	{r3, r4, r5, pc}
 1315              	.LVL126:
 1316              	.L109:
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1317              		.loc 1 1386 0
 1318 0068 0120     		movs	r0, #1
 1319              	.LVL127:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1320              		.loc 1 1391 0
 1321 006a 38BD     		pop	{r3, r4, r5, pc}
 1322              	.LVL128:
 1323              	.L112:
 1324              		.align	2
 1325              	.L111:
 1326 006c 00000000 		.word	.LANCHOR10
 1327 0070 00000000 		.word	.LANCHOR2
 1328 0074 00000000 		.word	.LANCHOR8
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 117


 1329 0078 00000000 		.word	.LANCHOR0
 1330 007c 00000000 		.word	.LANCHOR7
 1331              		.cfi_endproc
 1332              	.LFE11:
 1334              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1335              		.align	2
 1336              		.global	uxTaskPriorityGet
 1337              		.thumb
 1338              		.thumb_func
 1340              	uxTaskPriorityGet:
 1341              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1342              		.loc 1 1399 0
 1343              		.cfi_startproc
 1344              		@ args = 0, pretend = 0, frame = 0
 1345              		@ frame_needed = 0, uses_anonymous_args = 0
 1346              	.LVL129:
 1347 0000 10B5     		push	{r4, lr}
 1348              	.LCFI15:
 1349              		.cfi_def_cfa_offset 8
 1350              		.cfi_offset 4, -8
 1351              		.cfi_offset 14, -4
 1352 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1353              		.loc 1 1403 0
 1354 0004 FFF7FEFF 		bl	vPortEnterCritical
 1355              	.LVL130:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1356              		.loc 1 1407 0
 1357 0008 0CB9     		cbnz	r4, .L114
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1358              		.loc 1 1407 0 is_stmt 0 discriminator 1
 1359 000a 034B     		ldr	r3, .L116
 1360 000c 1C68     		ldr	r4, [r3]
 1361              	.LVL131:
 1362              	.L114:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1363              		.loc 1 1408 0 is_stmt 1 discriminator 4
 1364 000e E46A     		ldr	r4, [r4, #44]
 1365              	.LVL132:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1366              		.loc 1 1410 0 discriminator 4
 1367 0010 FFF7FEFF 		bl	vPortExitCritical
 1368              	.LVL133:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1369              		.loc 1 1413 0 discriminator 4
 1370 0014 2046     		mov	r0, r4
 1371 0016 10BD     		pop	{r4, pc}
 1372              	.LVL134:
 1373              	.L117:
 1374              		.align	2
 1375              	.L116:
 1376 0018 00000000 		.word	.LANCHOR10
 1377              		.cfi_endproc
 1378              	.LFE12:
 1380              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1381              		.align	2
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 118


 1382              		.global	uxTaskPriorityGetFromISR
 1383              		.thumb
 1384              		.thumb_func
 1386              	uxTaskPriorityGetFromISR:
 1387              	.LFB13:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1388              		.loc 1 1421 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              	.LVL135:
 1393 0000 10B5     		push	{r4, lr}
 1394              	.LCFI16:
 1395              		.cfi_def_cfa_offset 8
 1396              		.cfi_offset 4, -8
 1397              		.cfi_offset 14, -4
 1398 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1399              		.loc 1 1441 0
 1400 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1401              	.LVL136:
 1402              	.LBB130:
 1403              	.LBB131:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1404              		.loc 2 211 0
 1405              		.syntax unified
 1406              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1407 0008 EFF31183 			mrs r3, basepri											
 1408 000c 4FF05002 		mov r2, #80												
 1409 0010 82F31188 		msr basepri, r2											
 1410 0014 BFF36F8F 		isb														
 1411 0018 BFF34F8F 		dsb														
 1412              	
 1413              	@ 0 "" 2
 1414              		.thumb
 1415              		.syntax unified
 1416              	.LBE131:
 1417              	.LBE130:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1418              		.loc 1 1447 0
 1419 001c 0CB9     		cbnz	r4, .L119
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 119


 1420              		.loc 1 1447 0 is_stmt 0 discriminator 1
 1421 001e 034A     		ldr	r2, .L121
 1422 0020 1468     		ldr	r4, [r2]
 1423              	.LVL137:
 1424              	.L119:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1425              		.loc 1 1448 0 is_stmt 1 discriminator 4
 1426 0022 E06A     		ldr	r0, [r4, #44]
 1427              	.LVL138:
 1428              	.LBB132:
 1429              	.LBB133:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1430              		.loc 2 229 0 discriminator 4
 1431              		.syntax unified
 1432              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1433 0024 83F31188 			msr basepri, r3	
 1434              	@ 0 "" 2
 1435              	.LVL139:
 1436              		.thumb
 1437              		.syntax unified
 1438              	.LBE133:
 1439              	.LBE132:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1440              		.loc 1 1453 0 discriminator 4
 1441 0028 10BD     		pop	{r4, pc}
 1442              	.LVL140:
 1443              	.L122:
 1444 002a 00BF     		.align	2
 1445              	.L121:
 1446 002c 00000000 		.word	.LANCHOR10
 1447              		.cfi_endproc
 1448              	.LFE13:
 1450              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1451              		.align	2
 1452              		.global	vTaskPrioritySet
 1453              		.thumb
 1454              		.thumb_func
 1456              	vTaskPrioritySet:
 1457              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 120


 1458              		.loc 1 1461 0
 1459              		.cfi_startproc
 1460              		@ args = 0, pretend = 0, frame = 0
 1461              		@ frame_needed = 0, uses_anonymous_args = 0
 1462              	.LVL141:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1463              		.loc 1 1466 0
 1464 0000 3729     		cmp	r1, #55
 1465 0002 08D9     		bls	.L124
 1466              	.LBB134:
 1467              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1468              		.loc 2 195 0
 1469              		.syntax unified
 1470              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1471 0004 4FF05003 			mov r3, #80												
 1472 0008 83F31188 		msr basepri, r3											
 1473 000c BFF36F8F 		isb														
 1474 0010 BFF34F8F 		dsb														
 1475              	
 1476              	@ 0 "" 2
 1477              	.LVL142:
 1478              		.thumb
 1479              		.syntax unified
 1480              	.L125:
 1481 0014 FEE7     		b	.L125
 1482              	.L124:
 1483              	.LBE135:
 1484              	.LBE134:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1485              		.loc 1 1461 0
 1486 0016 70B5     		push	{r4, r5, r6, lr}
 1487              	.LCFI17:
 1488              		.cfi_def_cfa_offset 16
 1489              		.cfi_offset 4, -16
 1490              		.cfi_offset 5, -12
 1491              		.cfi_offset 6, -8
 1492              		.cfi_offset 14, -4
 1493 0018 0446     		mov	r4, r0
 1494 001a 0D46     		mov	r5, r1
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1495              		.loc 1 1469 0
 1496 001c 3729     		cmp	r1, #55
 1497 001e 00D9     		bls	.L126
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1498              		.loc 1 1471 0
 1499 0020 3725     		movs	r5, #55
 1500              	.L126:
 1501              	.LVL143:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1502              		.loc 1 1478 0
 1503 0022 FFF7FEFF 		bl	vPortEnterCritical
 1504              	.LVL144:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1505              		.loc 1 1482 0
 1506 0026 0CB9     		cbnz	r4, .L127
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 121


 1507              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1508 0028 284B     		ldr	r3, .L142
 1509 002a 1C68     		ldr	r4, [r3]
 1510              	.LVL145:
 1511              	.L127:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1512              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1513 002c E26C     		ldr	r2, [r4, #76]
 1514              	.LVL146:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1515              		.loc 1 1496 0 discriminator 4
 1516 002e 9542     		cmp	r5, r2
 1517 0030 49D0     		beq	.L128
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1518              		.loc 1 1500 0
 1519 0032 0AD9     		bls	.L129
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1520              		.loc 1 1502 0
 1521 0034 254B     		ldr	r3, .L142
 1522 0036 1B68     		ldr	r3, [r3]
 1523 0038 9C42     		cmp	r4, r3
 1524 003a 0CD0     		beq	.L137
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1525              		.loc 1 1507 0
 1526 003c 234B     		ldr	r3, .L142
 1527 003e 1B68     		ldr	r3, [r3]
 1528 0040 DB6A     		ldr	r3, [r3, #44]
 1529 0042 9D42     		cmp	r5, r3
 1530 0044 09D2     		bcs	.L138
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1531              		.loc 1 1464 0
 1532 0046 0026     		movs	r6, #0
 1533 0048 0AE0     		b	.L130
 1534              	.L129:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1535              		.loc 1 1523 0
 1536 004a 204B     		ldr	r3, .L142
 1537 004c 1B68     		ldr	r3, [r3]
 1538 004e 9C42     		cmp	r4, r3
 1539 0050 05D0     		beq	.L139
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1540              		.loc 1 1464 0
 1541 0052 0026     		movs	r6, #0
 1542 0054 04E0     		b	.L130
 1543              	.L137:
 1544 0056 0026     		movs	r6, #0
 1545 0058 02E0     		b	.L130
 1546              	.L138:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1547              		.loc 1 1509 0
 1548 005a 0126     		movs	r6, #1
 1549 005c 00E0     		b	.L130
 1550              	.L139:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1551              		.loc 1 1528 0
 1552 005e 0126     		movs	r6, #1
 1553              	.L130:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 122


 1554              	.LVL147:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1555              		.loc 1 1540 0
 1556 0060 E36A     		ldr	r3, [r4, #44]
 1557              	.LVL148:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1558              		.loc 1 1546 0
 1559 0062 9A42     		cmp	r2, r3
 1560 0064 00D1     		bne	.L131
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1561              		.loc 1 1548 0
 1562 0066 E562     		str	r5, [r4, #44]
 1563              	.L131:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1564              		.loc 1 1556 0
 1565 0068 E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1566              		.loc 1 1566 0
 1567 006a A269     		ldr	r2, [r4, #24]
 1568              	.LVL149:
 1569 006c 002A     		cmp	r2, #0
 1570 006e 02DB     		blt	.L132
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1571              		.loc 1 1568 0
 1572 0070 C5F13805 		rsb	r5, r5, #56
 1573              	.LVL150:
 1574 0074 A561     		str	r5, [r4, #24]
 1575              	.L132:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1576              		.loc 1 1579 0
 1577 0076 6169     		ldr	r1, [r4, #20]
 1578 0078 03EB8303 		add	r3, r3, r3, lsl #2
 1579              	.LVL151:
 1580 007c 9A00     		lsls	r2, r3, #2
 1581 007e 144B     		ldr	r3, .L142+4
 1582 0080 1A44     		add	r2, r2, r3
 1583 0082 9142     		cmp	r1, r2
 1584 0084 01D1     		bne	.L140
 1585 0086 0123     		movs	r3, #1
 1586 0088 00E0     		b	.L133
 1587              	.L140:
 1588 008a 0023     		movs	r3, #0
 1589              	.L133:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1590              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1591 008c 93B1     		cbz	r3, .L134
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1592              		.loc 1 1584 0 is_stmt 1
 1593 008e 251D     		adds	r5, r4, #4
 1594 0090 2846     		mov	r0, r5
 1595 0092 FFF7FEFF 		bl	uxListRemove
 1596              	.LVL152:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1597              		.loc 1 1595 0
 1598 0096 E36A     		ldr	r3, [r4, #44]
 1599 0098 0E4A     		ldr	r2, .L142+8
 1600 009a 1268     		ldr	r2, [r2]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 123


 1601 009c 9342     		cmp	r3, r2
 1602 009e 01D9     		bls	.L135
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1603              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1604 00a0 0C4A     		ldr	r2, .L142+8
 1605 00a2 1360     		str	r3, [r2]
 1606              	.L135:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1607              		.loc 1 1595 0 discriminator 3
 1608 00a4 03EB8303 		add	r3, r3, r3, lsl #2
 1609 00a8 9A00     		lsls	r2, r3, #2
 1610 00aa 2946     		mov	r1, r5
 1611 00ac 0848     		ldr	r0, .L142+4
 1612 00ae 1044     		add	r0, r0, r2
 1613 00b0 FFF7FEFF 		bl	vListInsertEnd
 1614              	.LVL153:
 1615              	.L134:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1616              		.loc 1 1602 0 is_stmt 1
 1617 00b4 3EB1     		cbz	r6, .L128
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1618              		.loc 1 1604 0
 1619 00b6 4FF08052 		mov	r2, #268435456
 1620 00ba 074B     		ldr	r3, .L142+12
 1621 00bc 1A60     		str	r2, [r3]
 1622              		.syntax unified
 1623              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1624 00be BFF34F8F 		dsb
 1625              	@ 0 "" 2
 1626              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1627 00c2 BFF36F8F 		isb
 1628              	@ 0 "" 2
 1629              	.LVL154:
 1630              		.thumb
 1631              		.syntax unified
 1632              	.L128:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1633              		.loc 1 1616 0
 1634 00c6 FFF7FEFF 		bl	vPortExitCritical
 1635              	.LVL155:
 1636 00ca 70BD     		pop	{r4, r5, r6, pc}
 1637              	.LVL156:
 1638              	.L143:
 1639              		.align	2
 1640              	.L142:
 1641 00cc 00000000 		.word	.LANCHOR10
 1642 00d0 00000000 		.word	.LANCHOR4
 1643 00d4 00000000 		.word	.LANCHOR13
 1644 00d8 04ED00E0 		.word	-536810236
 1645              		.cfi_endproc
 1646              	.LFE14:
 1648              		.section	.text.vTaskResume,"ax",%progbits
 1649              		.align	2
 1650              		.global	vTaskResume
 1651              		.thumb
 1652              		.thumb_func
 1654              	vTaskResume:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 124


 1655              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1656              		.loc 1 1772 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
 1659              		@ frame_needed = 0, uses_anonymous_args = 0
 1660              	.LVL157:
 1661 0000 38B5     		push	{r3, r4, r5, lr}
 1662              	.LCFI18:
 1663              		.cfi_def_cfa_offset 16
 1664              		.cfi_offset 3, -16
 1665              		.cfi_offset 4, -12
 1666              		.cfi_offset 5, -8
 1667              		.cfi_offset 14, -4
 1668              	.LVL158:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1669              		.loc 1 1776 0
 1670 0002 40B9     		cbnz	r0, .L145
 1671              	.LBB136:
 1672              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1673              		.loc 2 195 0
 1674              		.syntax unified
 1675              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1676 0004 4FF05003 			mov r3, #80												
 1677 0008 83F31188 		msr basepri, r3											
 1678 000c BFF36F8F 		isb														
 1679 0010 BFF34F8F 		dsb														
 1680              	
 1681              	@ 0 "" 2
 1682              	.LVL159:
 1683              		.thumb
 1684              		.syntax unified
 1685              	.L146:
 1686 0014 FEE7     		b	.L146
 1687              	.L145:
 1688 0016 0446     		mov	r4, r0
 1689              	.LBE137:
 1690              	.LBE136:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1691              		.loc 1 1780 0
 1692 0018 60B3     		cbz	r0, .L144
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1693              		.loc 1 1780 0 is_stmt 0 discriminator 1
 1694 001a 174B     		ldr	r3, .L151
 1695 001c 1B68     		ldr	r3, [r3]
 1696 001e 9842     		cmp	r0, r3
 1697 0020 28D0     		beq	.L144
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1698              		.loc 1 1782 0 is_stmt 1
 1699 0022 FFF7FEFF 		bl	vPortEnterCritical
 1700              	.LVL160:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1701              		.loc 1 1784 0
 1702 0026 2046     		mov	r0, r4
 1703 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1704              	.LVL161:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 125


 1705 002c 00B3     		cbz	r0, .L148
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1706              		.loc 1 1790 0
 1707 002e 251D     		adds	r5, r4, #4
 1708 0030 2846     		mov	r0, r5
 1709 0032 FFF7FEFF 		bl	uxListRemove
 1710              	.LVL162:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1711              		.loc 1 1791 0
 1712 0036 E36A     		ldr	r3, [r4, #44]
 1713 0038 104A     		ldr	r2, .L151+4
 1714 003a 1268     		ldr	r2, [r2]
 1715 003c 9342     		cmp	r3, r2
 1716 003e 01D9     		bls	.L149
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1717              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1718 0040 0E4A     		ldr	r2, .L151+4
 1719 0042 1360     		str	r3, [r2]
 1720              	.L149:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1721              		.loc 1 1791 0 discriminator 3
 1722 0044 03EB8303 		add	r3, r3, r3, lsl #2
 1723 0048 9A00     		lsls	r2, r3, #2
 1724 004a 2946     		mov	r1, r5
 1725 004c 0C48     		ldr	r0, .L151+8
 1726 004e 1044     		add	r0, r0, r2
 1727 0050 FFF7FEFF 		bl	vListInsertEnd
 1728              	.LVL163:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1729              		.loc 1 1794 0 is_stmt 1 discriminator 3
 1730 0054 E26A     		ldr	r2, [r4, #44]
 1731 0056 084B     		ldr	r3, .L151
 1732 0058 1B68     		ldr	r3, [r3]
 1733 005a DB6A     		ldr	r3, [r3, #44]
 1734 005c 9A42     		cmp	r2, r3
 1735 005e 07D3     		bcc	.L148
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1736              		.loc 1 1799 0
 1737 0060 4FF08052 		mov	r2, #268435456
 1738 0064 074B     		ldr	r3, .L151+12
 1739 0066 1A60     		str	r2, [r3]
 1740              		.syntax unified
 1741              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1742 0068 BFF34F8F 		dsb
 1743              	@ 0 "" 2
 1744              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1745 006c BFF36F8F 		isb
 1746              	@ 0 "" 2
 1747              		.thumb
 1748              		.syntax unified
 1749              	.L148:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1750              		.loc 1 1811 0
 1751 0070 FFF7FEFF 		bl	vPortExitCritical
 1752              	.LVL164:
 1753              	.L144:
 1754 0074 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 126


 1755              	.LVL165:
 1756              	.L152:
 1757 0076 00BF     		.align	2
 1758              	.L151:
 1759 0078 00000000 		.word	.LANCHOR10
 1760 007c 00000000 		.word	.LANCHOR13
 1761 0080 00000000 		.word	.LANCHOR4
 1762 0084 04ED00E0 		.word	-536810236
 1763              		.cfi_endproc
 1764              	.LFE17:
 1766              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1767              		.align	2
 1768              		.global	xTaskResumeFromISR
 1769              		.thumb
 1770              		.thumb_func
 1772              	xTaskResumeFromISR:
 1773              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1774              		.loc 1 1826 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778              	.LVL166:
 1779 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1780              	.LCFI19:
 1781              		.cfi_def_cfa_offset 24
 1782              		.cfi_offset 3, -24
 1783              		.cfi_offset 4, -20
 1784              		.cfi_offset 5, -16
 1785              		.cfi_offset 6, -12
 1786              		.cfi_offset 7, -8
 1787              		.cfi_offset 14, -4
 1788              	.LVL167:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1789              		.loc 1 1831 0
 1790 0002 40B9     		cbnz	r0, .L154
 1791              	.LBB138:
 1792              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1793              		.loc 2 195 0
 1794              		.syntax unified
 1795              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1796 0004 4FF05003 			mov r3, #80												
 1797 0008 83F31188 		msr basepri, r3											
 1798 000c BFF36F8F 		isb														
 1799 0010 BFF34F8F 		dsb														
 1800              	
 1801              	@ 0 "" 2
 1802              	.LVL168:
 1803              		.thumb
 1804              		.syntax unified
 1805              	.L155:
 1806 0014 FEE7     		b	.L155
 1807              	.L154:
 1808 0016 0446     		mov	r4, r0
 1809              	.LBE139:
 1810              	.LBE138:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 127


1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1811              		.loc 1 1849 0
 1812 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1813              	.LVL169:
 1814              	.LBB140:
 1815              	.LBB141:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1816              		.loc 2 211 0
 1817              		.syntax unified
 1818              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1819 001c EFF31187 			mrs r7, basepri											
 1820 0020 4FF05003 		mov r3, #80												
 1821 0024 83F31188 		msr basepri, r3											
 1822 0028 BFF36F8F 		isb														
 1823 002c BFF34F8F 		dsb														
 1824              	
 1825              	@ 0 "" 2
 1826              		.thumb
 1827              		.syntax unified
 1828              	.LBE141:
 1829              	.LBE140:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1830              		.loc 1 1853 0
 1831 0030 2046     		mov	r0, r4
 1832 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1833              	.LVL170:
 1834 0036 30B3     		cbz	r0, .L160
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1835              		.loc 1 1858 0
 1836 0038 154B     		ldr	r3, .L163
 1837 003a 1B68     		ldr	r3, [r3]
 1838 003c E3B9     		cbnz	r3, .L157
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1839              		.loc 1 1862 0
 1840 003e E26A     		ldr	r2, [r4, #44]
 1841 0040 144B     		ldr	r3, .L163+4
 1842 0042 1B68     		ldr	r3, [r3]
 1843 0044 DB6A     		ldr	r3, [r3, #44]
 1844 0046 9A42     		cmp	r2, r3
 1845 0048 01D2     		bcs	.L161
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1846              		.loc 1 1827 0
 1847 004a 0025     		movs	r5, #0
 1848 004c 00E0     		b	.L158
 1849              	.L161:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1850              		.loc 1 1864 0
 1851 004e 0125     		movs	r5, #1
 1852              	.L158:
 1853              	.LVL171:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1854              		.loc 1 1871 0
 1855 0050 261D     		adds	r6, r4, #4
 1856 0052 3046     		mov	r0, r6
 1857 0054 FFF7FEFF 		bl	uxListRemove
 1858              	.LVL172:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 128


 1859              		.loc 1 1872 0
 1860 0058 E36A     		ldr	r3, [r4, #44]
 1861 005a 0F4A     		ldr	r2, .L163+8
 1862 005c 1268     		ldr	r2, [r2]
 1863 005e 9342     		cmp	r3, r2
 1864 0060 01D9     		bls	.L159
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1865              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1866 0062 0D4A     		ldr	r2, .L163+8
 1867 0064 1360     		str	r3, [r2]
 1868              	.L159:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1869              		.loc 1 1872 0 discriminator 3
 1870 0066 03EB8303 		add	r3, r3, r3, lsl #2
 1871 006a 9A00     		lsls	r2, r3, #2
 1872 006c 3146     		mov	r1, r6
 1873 006e 0B48     		ldr	r0, .L163+12
 1874 0070 1044     		add	r0, r0, r2
 1875 0072 FFF7FEFF 		bl	vListInsertEnd
 1876              	.LVL173:
 1877 0076 07E0     		b	.L156
 1878              	.LVL174:
 1879              	.L157:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1880              		.loc 1 1879 0 is_stmt 1
 1881 0078 04F11801 		add	r1, r4, #24
 1882 007c 0848     		ldr	r0, .L163+16
 1883 007e FFF7FEFF 		bl	vListInsertEnd
 1884              	.LVL175:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1885              		.loc 1 1827 0
 1886 0082 0025     		movs	r5, #0
 1887 0084 00E0     		b	.L156
 1888              	.L160:
 1889 0086 0025     		movs	r5, #0
 1890              	.LVL176:
 1891              	.L156:
 1892              	.LBB142:
 1893              	.LBB143:
 1894              		.loc 2 229 0
 1895              		.syntax unified
 1896              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1897 0088 87F31188 			msr basepri, r7	
 1898              	@ 0 "" 2
 1899              	.LVL177:
 1900              		.thumb
 1901              		.syntax unified
 1902              	.LBE143:
 1903              	.LBE142:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1904              		.loc 1 1890 0
 1905 008c 2846     		mov	r0, r5
 1906 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1907              	.LVL178:
 1908              	.L164:
 1909              		.align	2
 1910              	.L163:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 129


 1911 0090 00000000 		.word	.LANCHOR16
 1912 0094 00000000 		.word	.LANCHOR10
 1913 0098 00000000 		.word	.LANCHOR13
 1914 009c 00000000 		.word	.LANCHOR4
 1915 00a0 00000000 		.word	.LANCHOR1
 1916              		.cfi_endproc
 1917              	.LFE18:
 1919              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1920              		.align	2
 1921              		.global	vTaskStartScheduler
 1922              		.thumb
 1923              		.thumb_func
 1925              	vTaskStartScheduler:
 1926              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1927              		.loc 1 1896 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 16
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931 0000 10B5     		push	{r4, lr}
 1932              	.LCFI20:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 4, -8
 1935              		.cfi_offset 14, -4
 1936 0002 88B0     		sub	sp, sp, #32
 1937              	.LCFI21:
 1938              		.cfi_def_cfa_offset 40
 1939              	.LBB144:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1940              		.loc 1 1902 0
 1941 0004 0024     		movs	r4, #0
 1942 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1943              		.loc 1 1903 0
 1944 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1945              		.loc 1 1908 0
 1946 000a 07AA     		add	r2, sp, #28
 1947 000c 06A9     		add	r1, sp, #24
 1948 000e 05A8     		add	r0, sp, #20
 1949 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1950              	.LVL179:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1951              		.loc 1 1909 0
 1952 0014 059B     		ldr	r3, [sp, #20]
 1953 0016 0293     		str	r3, [sp, #8]
 1954 0018 069B     		ldr	r3, [sp, #24]
 1955 001a 0193     		str	r3, [sp, #4]
 1956 001c 0094     		str	r4, [sp]
 1957 001e 2346     		mov	r3, r4
 1958 0020 079A     		ldr	r2, [sp, #28]
 1959 0022 1849     		ldr	r1, .L173
 1960 0024 1848     		ldr	r0, .L173+4
 1961 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1962              	.LVL180:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1963              		.loc 1 1917 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 130


 1964 002a 08B1     		cbz	r0, .L171
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1965              		.loc 1 1919 0
 1966 002c 0120     		movs	r0, #1
 1967 002e 00E0     		b	.L166
 1968              	.L171:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1969              		.loc 1 1923 0
 1970 0030 0020     		movs	r0, #0
 1971              	.L166:
 1972              	.LVL181:
 1973              	.LBE144:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1974              		.loc 1 1940 0
 1975 0032 0128     		cmp	r0, #1
 1976 0034 01D1     		bne	.L167
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1977              		.loc 1 1942 0
 1978 0036 FFF7FEFF 		bl	xTimerCreateTimerTask
 1979              	.LVL182:
 1980              	.L167:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1981              		.loc 1 1951 0
 1982 003a 0128     		cmp	r0, #1
 1983 003c 14D1     		bne	.L168
 1984              	.LBB145:
 1985              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1986              		.loc 2 195 0
 1987              		.syntax unified
 1988              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1989 003e 4FF05003 			mov r3, #80												
 1990 0042 83F31188 		msr basepri, r3											
 1991 0046 BFF36F8F 		isb														
 1992 004a BFF34F8F 		dsb														
 1993              	
 1994              	@ 0 "" 2
 1995              		.thumb
 1996              		.syntax unified
 1997              	.LBE146:
 1998              	.LBE145:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1999              		.loc 1 1977 0
 2000 004e 4FF0FF32 		mov	r2, #-1
 2001 0052 0E4B     		ldr	r3, .L173+8
 2002 0054 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2003              		.loc 1 1978 0
 2004 0056 0122     		movs	r2, #1
 2005 0058 0D4B     		ldr	r3, .L173+12
 2006 005a 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2007              		.loc 1 1979 0
 2008 005c 0022     		movs	r2, #0
 2009 005e 0D4B     		ldr	r3, .L173+16
 2010 0060 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 131


 2011              		.loc 1 1991 0
 2012 0062 FFF7FEFF 		bl	xPortStartScheduler
 2013              	.LVL183:
 2014 0066 0BE0     		b	.L165
 2015              	.LVL184:
 2016              	.L168:
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2017              		.loc 1 2006 0
 2018 0068 B0F1FF3F 		cmp	r0, #-1
 2019 006c 08D1     		bne	.L165
 2020              	.LBB147:
 2021              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2022              		.loc 2 195 0
 2023              		.syntax unified
 2024              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2025 006e 4FF05003 			mov r3, #80												
 2026 0072 83F31188 		msr basepri, r3											
 2027 0076 BFF36F8F 		isb														
 2028 007a BFF34F8F 		dsb														
 2029              	
 2030              	@ 0 "" 2
 2031              	.LVL185:
 2032              		.thumb
 2033              		.syntax unified
 2034              	.L170:
 2035 007e FEE7     		b	.L170
 2036              	.LVL186:
 2037              	.L165:
 2038              	.LBE148:
 2039              	.LBE147:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2040              		.loc 1 2012 0
 2041 0080 08B0     		add	sp, sp, #32
 2042              	.LCFI22:
 2043              		.cfi_def_cfa_offset 8
 2044              		@ sp needed
 2045 0082 10BD     		pop	{r4, pc}
 2046              	.L174:
 2047              		.align	2
 2048              	.L173:
 2049 0084 00000000 		.word	.LC0
 2050 0088 00000000 		.word	prvIdleTask
 2051 008c 00000000 		.word	.LANCHOR3
 2052 0090 00000000 		.word	.LANCHOR11
 2053 0094 00000000 		.word	.LANCHOR15
 2054              		.cfi_endproc
 2055              	.LFE19:
 2057              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2058              		.align	2
 2059              		.global	vTaskEndScheduler
 2060              		.thumb
 2061              		.thumb_func
 2063              	vTaskEndScheduler:
 2064              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2065              		.loc 1 2016 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 132


 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069 0000 08B5     		push	{r3, lr}
 2070              	.LCFI23:
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 3, -8
 2073              		.cfi_offset 14, -4
 2074              	.LBB149:
 2075              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2076              		.loc 2 195 0
 2077              		.syntax unified
 2078              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2079 0002 4FF05003 			mov r3, #80												
 2080 0006 83F31188 		msr basepri, r3											
 2081 000a BFF36F8F 		isb														
 2082 000e BFF34F8F 		dsb														
 2083              	
 2084              	@ 0 "" 2
 2085              		.thumb
 2086              		.syntax unified
 2087              	.LBE150:
 2088              	.LBE149:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2089              		.loc 1 2021 0
 2090 0012 0022     		movs	r2, #0
 2091 0014 024B     		ldr	r3, .L177
 2092 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2093              		.loc 1 2022 0
 2094 0018 FFF7FEFF 		bl	vPortEndScheduler
 2095              	.LVL187:
 2096 001c 08BD     		pop	{r3, pc}
 2097              	.L178:
 2098 001e 00BF     		.align	2
 2099              	.L177:
 2100 0020 00000000 		.word	.LANCHOR11
 2101              		.cfi_endproc
 2102              	.LFE20:
 2104              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2105              		.align	2
 2106              		.global	vTaskSuspendAll
 2107              		.thumb
 2108              		.thumb_func
 2110              	vTaskSuspendAll:
 2111              	.LFB21:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2112              		.loc 1 2027 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2117              		.loc 1 2032 0
 2118 0000 024A     		ldr	r2, .L180
 2119 0002 1368     		ldr	r3, [r2]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 133


 2120 0004 0133     		adds	r3, r3, #1
 2121 0006 1360     		str	r3, [r2]
 2122 0008 7047     		bx	lr
 2123              	.L181:
 2124 000a 00BF     		.align	2
 2125              	.L180:
 2126 000c 00000000 		.word	.LANCHOR16
 2127              		.cfi_endproc
 2128              	.LFE21:
 2130              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2131              		.align	2
 2132              		.global	xTaskGetTickCount
 2133              		.thumb
 2134              		.thumb_func
 2136              	xTaskGetTickCount:
 2137              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2138              		.loc 1 2210 0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 0
 2141              		@ frame_needed = 0, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2143              		.loc 1 2216 0
 2144 0000 014B     		ldr	r3, .L183
 2145 0002 1868     		ldr	r0, [r3]
 2146              	.LVL188:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2147              		.loc 1 2221 0
 2148 0004 7047     		bx	lr
 2149              	.L184:
 2150 0006 00BF     		.align	2
 2151              	.L183:
 2152 0008 00000000 		.word	.LANCHOR15
 2153              		.cfi_endproc
 2154              	.LFE23:
 2156              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2157              		.align	2
 2158              		.global	xTaskGetTickCountFromISR
 2159              		.thumb
 2160              		.thumb_func
 2162              	xTaskGetTickCountFromISR:
 2163              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2164              		.loc 1 2225 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168 0000 08B5     		push	{r3, lr}
 2169              	.LCFI24:
 2170              		.cfi_def_cfa_offset 8
 2171              		.cfi_offset 3, -8
 2172              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2173              		.loc 1 2243 0
 2174 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2175              	.LVL189:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 134


2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2176              		.loc 1 2247 0
 2177 0006 014B     		ldr	r3, .L187
 2178 0008 1868     		ldr	r0, [r3]
 2179              	.LVL190:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2180              		.loc 1 2252 0
 2181 000a 08BD     		pop	{r3, pc}
 2182              	.L188:
 2183              		.align	2
 2184              	.L187:
 2185 000c 00000000 		.word	.LANCHOR15
 2186              		.cfi_endproc
 2187              	.LFE24:
 2189              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2190              		.align	2
 2191              		.global	uxTaskGetNumberOfTasks
 2192              		.thumb
 2193              		.thumb_func
 2195              	uxTaskGetNumberOfTasks:
 2196              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2197              		.loc 1 2256 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2202              		.loc 1 2259 0
 2203 0000 014B     		ldr	r3, .L190
 2204 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2205              		.loc 1 2260 0
 2206 0004 7047     		bx	lr
 2207              	.L191:
 2208 0006 00BF     		.align	2
 2209              	.L190:
 2210 0008 00000000 		.word	.LANCHOR9
 2211              		.cfi_endproc
 2212              	.LFE25:
 2214              		.section	.text.pcTaskGetName,"ax",%progbits
 2215              		.align	2
 2216              		.global	pcTaskGetName
 2217              		.thumb
 2218              		.thumb_func
 2220              	pcTaskGetName:
 2221              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2222              		.loc 1 2264 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              		@ link register save eliminated.
 2227              	.LVL191:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2228              		.loc 1 2269 0
 2229 0000 0346     		mov	r3, r0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 135


 2230 0002 08B9     		cbnz	r0, .L193
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2231              		.loc 1 2269 0 is_stmt 0 discriminator 1
 2232 0004 074B     		ldr	r3, .L196
 2233 0006 1B68     		ldr	r3, [r3]
 2234              	.LVL192:
 2235              	.L193:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2236              		.loc 1 2270 0 is_stmt 1 discriminator 4
 2237 0008 43B9     		cbnz	r3, .L194
 2238              	.LBB151:
 2239              	.LBB152:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2240              		.loc 2 195 0
 2241              		.syntax unified
 2242              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2243 000a 4FF05003 			mov r3, #80												
 2244 000e 83F31188 		msr basepri, r3											
 2245 0012 BFF36F8F 		isb														
 2246 0016 BFF34F8F 		dsb														
 2247              	
 2248              	@ 0 "" 2
 2249              	.LVL193:
 2250              		.thumb
 2251              		.syntax unified
 2252              	.L195:
 2253 001a FEE7     		b	.L195
 2254              	.LVL194:
 2255              	.L194:
 2256              	.LBE152:
 2257              	.LBE151:
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2258              		.loc 1 2272 0
 2259 001c 03F13400 		add	r0, r3, #52
 2260 0020 7047     		bx	lr
 2261              	.L197:
 2262 0022 00BF     		.align	2
 2263              	.L196:
 2264 0024 00000000 		.word	.LANCHOR10
 2265              		.cfi_endproc
 2266              	.LFE26:
 2268              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2269              		.align	2
 2270              		.global	xTaskIncrementTick
 2271              		.thumb
 2272              		.thumb_func
 2274              	xTaskIncrementTick:
 2275              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2276              		.loc 1 2584 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2281              	.LCFI25:
 2282              		.cfi_def_cfa_offset 24
 2283              		.cfi_offset 3, -24
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 136


 2284              		.cfi_offset 4, -20
 2285              		.cfi_offset 5, -16
 2286              		.cfi_offset 6, -12
 2287              		.cfi_offset 7, -8
 2288              		.cfi_offset 14, -4
 2289              	.LVL195:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2290              		.loc 1 2593 0
 2291 0002 3D4B     		ldr	r3, .L220
 2292 0004 1B68     		ldr	r3, [r3]
 2293 0006 002B     		cmp	r3, #0
 2294 0008 68D1     		bne	.L199
 2295              	.LBB153:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2296              		.loc 1 2597 0
 2297 000a 3C4B     		ldr	r3, .L220+4
 2298 000c 1D68     		ldr	r5, [r3]
 2299 000e 0135     		adds	r5, r5, #1
 2300              	.LVL196:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2301              		.loc 1 2601 0
 2302 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2303              		.loc 1 2603 0
 2304 0012 C5B9     		cbnz	r5, .L200
 2305              	.LBB154:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2306              		.loc 1 2605 0
 2307 0014 3A4B     		ldr	r3, .L220+8
 2308 0016 1B68     		ldr	r3, [r3]
 2309 0018 1B68     		ldr	r3, [r3]
 2310 001a 43B1     		cbz	r3, .L201
 2311              	.LBB155:
 2312              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2313              		.loc 2 195 0
 2314              		.syntax unified
 2315              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2316 001c 4FF05003 			mov r3, #80												
 2317 0020 83F31188 		msr basepri, r3											
 2318 0024 BFF36F8F 		isb														
 2319 0028 BFF34F8F 		dsb														
 2320              	
 2321              	@ 0 "" 2
 2322              	.LVL197:
 2323              		.thumb
 2324              		.syntax unified
 2325              	.L202:
 2326 002c FEE7     		b	.L202
 2327              	.L201:
 2328              	.LBE156:
 2329              	.LBE155:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2330              		.loc 1 2605 0 discriminator 2
 2331 002e 344A     		ldr	r2, .L220+8
 2332 0030 1168     		ldr	r1, [r2]
 2333              	.LVL198:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 137


 2334 0032 344B     		ldr	r3, .L220+12
 2335 0034 1868     		ldr	r0, [r3]
 2336 0036 1060     		str	r0, [r2]
 2337 0038 1960     		str	r1, [r3]
 2338 003a 334A     		ldr	r2, .L220+16
 2339 003c 1368     		ldr	r3, [r2]
 2340 003e 0133     		adds	r3, r3, #1
 2341 0040 1360     		str	r3, [r2]
 2342 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2343              	.LVL199:
 2344              	.L200:
 2345              	.LBE154:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2346              		.loc 1 2616 0
 2347 0046 314B     		ldr	r3, .L220+20
 2348 0048 1B68     		ldr	r3, [r3]
 2349 004a 9D42     		cmp	r5, r3
 2350 004c 03D2     		bcs	.L214
 2351              	.LBE153:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2352              		.loc 1 2587 0
 2353 004e 0024     		movs	r4, #0
 2354 0050 39E0     		b	.L204
 2355              	.LVL200:
 2356              	.L216:
 2357              	.LBB157:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2358              		.loc 1 2682 0
 2359 0052 0124     		movs	r4, #1
 2360              	.LVL201:
 2361 0054 00E0     		b	.L203
 2362              	.LVL202:
 2363              	.L214:
 2364 0056 0024     		movs	r4, #0
 2365              	.LVL203:
 2366              	.L203:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2367              		.loc 1 2620 0
 2368 0058 294B     		ldr	r3, .L220+8
 2369 005a 1B68     		ldr	r3, [r3]
 2370 005c 1B68     		ldr	r3, [r3]
 2371 005e 0BB9     		cbnz	r3, .L215
 2372 0060 0123     		movs	r3, #1
 2373 0062 00E0     		b	.L205
 2374              	.L215:
 2375 0064 0023     		movs	r3, #0
 2376              	.L205:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2377              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2378 0066 23B1     		cbz	r3, .L206
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2379              		.loc 1 2627 0 is_stmt 1
 2380 0068 4FF0FF32 		mov	r2, #-1
 2381 006c 274B     		ldr	r3, .L220+20
 2382 006e 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2383              		.loc 1 2628 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 138


 2384 0070 29E0     		b	.L204
 2385              	.L206:
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2386              		.loc 1 2636 0
 2387 0072 234B     		ldr	r3, .L220+8
 2388 0074 1B68     		ldr	r3, [r3]
 2389 0076 DB68     		ldr	r3, [r3, #12]
 2390 0078 DE68     		ldr	r6, [r3, #12]
 2391              	.LVL204:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2392              		.loc 1 2637 0
 2393 007a 7368     		ldr	r3, [r6, #4]
 2394              	.LVL205:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2395              		.loc 1 2639 0
 2396 007c 9D42     		cmp	r5, r3
 2397 007e 02D2     		bcs	.L207
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2398              		.loc 1 2646 0
 2399 0080 224A     		ldr	r2, .L220+20
 2400 0082 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2401              		.loc 1 2647 0
 2402 0084 1FE0     		b	.L204
 2403              	.L207:
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2404              		.loc 1 2655 0
 2405 0086 371D     		adds	r7, r6, #4
 2406 0088 3846     		mov	r0, r7
 2407 008a FFF7FEFF 		bl	uxListRemove
 2408              	.LVL206:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2409              		.loc 1 2659 0
 2410 008e B36A     		ldr	r3, [r6, #40]
 2411 0090 1BB1     		cbz	r3, .L208
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2412              		.loc 1 2661 0
 2413 0092 06F11800 		add	r0, r6, #24
 2414 0096 FFF7FEFF 		bl	uxListRemove
 2415              	.LVL207:
 2416              	.L208:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2417              		.loc 1 2670 0
 2418 009a F36A     		ldr	r3, [r6, #44]
 2419 009c 1C4A     		ldr	r2, .L220+24
 2420 009e 1268     		ldr	r2, [r2]
 2421 00a0 9342     		cmp	r3, r2
 2422 00a2 01D9     		bls	.L209
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2423              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2424 00a4 1A4A     		ldr	r2, .L220+24
 2425 00a6 1360     		str	r3, [r2]
 2426              	.L209:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2427              		.loc 1 2670 0 discriminator 3
 2428 00a8 03EB8303 		add	r3, r3, r3, lsl #2
 2429 00ac 9A00     		lsls	r2, r3, #2
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 139


 2430 00ae 3946     		mov	r1, r7
 2431 00b0 1848     		ldr	r0, .L220+28
 2432 00b2 1044     		add	r0, r0, r2
 2433 00b4 FFF7FEFF 		bl	vListInsertEnd
 2434              	.LVL208:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2435              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2436 00b8 F26A     		ldr	r2, [r6, #44]
 2437 00ba 174B     		ldr	r3, .L220+32
 2438 00bc 1B68     		ldr	r3, [r3]
 2439 00be DB6A     		ldr	r3, [r3, #44]
 2440 00c0 9A42     		cmp	r2, r3
 2441 00c2 C6D2     		bcs	.L216
 2442 00c4 C8E7     		b	.L203
 2443              	.LVL209:
 2444              	.L204:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2445              		.loc 1 2699 0
 2446 00c6 144B     		ldr	r3, .L220+32
 2447 00c8 1B68     		ldr	r3, [r3]
 2448 00ca DB6A     		ldr	r3, [r3, #44]
 2449 00cc 03EB8303 		add	r3, r3, r3, lsl #2
 2450 00d0 9A00     		lsls	r2, r3, #2
 2451 00d2 104B     		ldr	r3, .L220+28
 2452 00d4 9B58     		ldr	r3, [r3, r2]
 2453 00d6 012B     		cmp	r3, #1
 2454 00d8 06D8     		bhi	.L217
 2455 00da 06E0     		b	.L212
 2456              	.LVL210:
 2457              	.L199:
 2458              	.LBE157:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2459              		.loc 1 2727 0
 2460 00dc 0F4A     		ldr	r2, .L220+36
 2461 00de 1368     		ldr	r3, [r2]
 2462 00e0 0133     		adds	r3, r3, #1
 2463 00e2 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2464              		.loc 1 2587 0
 2465 00e4 0024     		movs	r4, #0
 2466 00e6 00E0     		b	.L212
 2467              	.LVL211:
 2468              	.L217:
 2469              	.LBB158:
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2470              		.loc 1 2701 0
 2471 00e8 0124     		movs	r4, #1
 2472              	.LVL212:
 2473              	.L212:
 2474              	.LBE158:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2475              		.loc 1 2740 0
 2476 00ea 0D4B     		ldr	r3, .L220+40
 2477 00ec 1B68     		ldr	r3, [r3]
 2478 00ee 03B1     		cbz	r3, .L213
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2479              		.loc 1 2742 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 140


 2480 00f0 0124     		movs	r4, #1
 2481              	.LVL213:
 2482              	.L213:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2483              		.loc 1 2752 0
 2484 00f2 2046     		mov	r0, r4
 2485 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2486              	.LVL214:
 2487              	.L221:
 2488 00f6 00BF     		.align	2
 2489              	.L220:
 2490 00f8 00000000 		.word	.LANCHOR16
 2491 00fc 00000000 		.word	.LANCHOR15
 2492 0100 00000000 		.word	.LANCHOR2
 2493 0104 00000000 		.word	.LANCHOR8
 2494 0108 00000000 		.word	.LANCHOR17
 2495 010c 00000000 		.word	.LANCHOR3
 2496 0110 00000000 		.word	.LANCHOR13
 2497 0114 00000000 		.word	.LANCHOR4
 2498 0118 00000000 		.word	.LANCHOR10
 2499 011c 00000000 		.word	.LANCHOR18
 2500 0120 00000000 		.word	.LANCHOR19
 2501              		.cfi_endproc
 2502              	.LFE28:
 2504              		.section	.text.xTaskResumeAll,"ax",%progbits
 2505              		.align	2
 2506              		.global	xTaskResumeAll
 2507              		.thumb
 2508              		.thumb_func
 2510              	xTaskResumeAll:
 2511              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2512              		.loc 1 2100 0
 2513              		.cfi_startproc
 2514              		@ args = 0, pretend = 0, frame = 0
 2515              		@ frame_needed = 0, uses_anonymous_args = 0
 2516 0000 38B5     		push	{r3, r4, r5, lr}
 2517              	.LCFI26:
 2518              		.cfi_def_cfa_offset 16
 2519              		.cfi_offset 3, -16
 2520              		.cfi_offset 4, -12
 2521              		.cfi_offset 5, -8
 2522              		.cfi_offset 14, -4
 2523              	.LVL215:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2524              		.loc 1 2106 0
 2525 0002 344B     		ldr	r3, .L238
 2526 0004 1B68     		ldr	r3, [r3]
 2527 0006 43B9     		cbnz	r3, .L223
 2528              	.LBB159:
 2529              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2530              		.loc 2 195 0
 2531              		.syntax unified
 2532              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2533 0008 4FF05003 			mov r3, #80												
 2534 000c 83F31188 		msr basepri, r3											
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 141


 2535 0010 BFF36F8F 		isb														
 2536 0014 BFF34F8F 		dsb														
 2537              	
 2538              	@ 0 "" 2
 2539              	.LVL216:
 2540              		.thumb
 2541              		.syntax unified
 2542              	.L224:
 2543 0018 FEE7     		b	.L224
 2544              	.L223:
 2545              	.LBE160:
 2546              	.LBE159:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2547              		.loc 1 2113 0
 2548 001a FFF7FEFF 		bl	vPortEnterCritical
 2549              	.LVL217:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2550              		.loc 1 2115 0
 2551 001e 2D4B     		ldr	r3, .L238
 2552 0020 1A68     		ldr	r2, [r3]
 2553 0022 013A     		subs	r2, r2, #1
 2554 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2555              		.loc 1 2117 0
 2556 0026 1B68     		ldr	r3, [r3]
 2557 0028 002B     		cmp	r3, #0
 2558 002a 4BD1     		bne	.L234
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2559              		.loc 1 2119 0
 2560 002c 2A4B     		ldr	r3, .L238+4
 2561 002e 1B68     		ldr	r3, [r3]
 2562 0030 2BBB     		cbnz	r3, .L235
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2563              		.loc 1 2102 0
 2564 0032 0024     		movs	r4, #0
 2565 0034 49E0     		b	.L225
 2566              	.LVL218:
 2567              	.L229:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2568              		.loc 1 2125 0
 2569 0036 294B     		ldr	r3, .L238+8
 2570 0038 DB68     		ldr	r3, [r3, #12]
 2571 003a DC68     		ldr	r4, [r3, #12]
 2572              	.LVL219:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2573              		.loc 1 2126 0
 2574 003c 04F11800 		add	r0, r4, #24
 2575 0040 FFF7FEFF 		bl	uxListRemove
 2576              	.LVL220:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2577              		.loc 1 2127 0
 2578 0044 251D     		adds	r5, r4, #4
 2579 0046 2846     		mov	r0, r5
 2580 0048 FFF7FEFF 		bl	uxListRemove
 2581              	.LVL221:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2582              		.loc 1 2128 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 142


 2583 004c E36A     		ldr	r3, [r4, #44]
 2584 004e 244A     		ldr	r2, .L238+12
 2585 0050 1268     		ldr	r2, [r2]
 2586 0052 9342     		cmp	r3, r2
 2587 0054 01D9     		bls	.L227
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2588              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2589 0056 224A     		ldr	r2, .L238+12
 2590 0058 1360     		str	r3, [r2]
 2591              	.L227:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2592              		.loc 1 2128 0 discriminator 3
 2593 005a 03EB8303 		add	r3, r3, r3, lsl #2
 2594 005e 9A00     		lsls	r2, r3, #2
 2595 0060 2946     		mov	r1, r5
 2596 0062 2048     		ldr	r0, .L238+16
 2597 0064 1044     		add	r0, r0, r2
 2598 0066 FFF7FEFF 		bl	vListInsertEnd
 2599              	.LVL222:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2600              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2601 006a E26A     		ldr	r2, [r4, #44]
 2602 006c 1E4B     		ldr	r3, .L238+20
 2603 006e 1B68     		ldr	r3, [r3]
 2604 0070 DB6A     		ldr	r3, [r3, #44]
 2605 0072 9A42     		cmp	r2, r3
 2606 0074 04D3     		bcc	.L226
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2607              		.loc 1 2134 0
 2608 0076 0122     		movs	r2, #1
 2609 0078 1C4B     		ldr	r3, .L238+24
 2610 007a 1A60     		str	r2, [r3]
 2611 007c 00E0     		b	.L226
 2612              	.LVL223:
 2613              	.L235:
 2614 007e 0024     		movs	r4, #0
 2615              	.LVL224:
 2616              	.L226:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2617              		.loc 1 2123 0
 2618 0080 164B     		ldr	r3, .L238+8
 2619 0082 1B68     		ldr	r3, [r3]
 2620 0084 002B     		cmp	r3, #0
 2621 0086 D6D1     		bne	.L229
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2622              		.loc 1 2142 0
 2623 0088 0CB1     		cbz	r4, .L230
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2624              		.loc 1 2150 0
 2625 008a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2626              	.LVL225:
 2627              	.L230:
 2628              	.LBB161:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2629              		.loc 1 2158 0
 2630 008e 184B     		ldr	r3, .L238+28
 2631 0090 1C68     		ldr	r4, [r3]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 143


 2632              	.LVL226:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2633              		.loc 1 2160 0
 2634 0092 54B1     		cbz	r4, .L231
 2635              	.L233:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2636              		.loc 1 2164 0
 2637 0094 FFF7FEFF 		bl	xTaskIncrementTick
 2638              	.LVL227:
 2639 0098 10B1     		cbz	r0, .L232
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2640              		.loc 1 2166 0
 2641 009a 0122     		movs	r2, #1
 2642 009c 134B     		ldr	r3, .L238+24
 2643 009e 1A60     		str	r2, [r3]
 2644              	.L232:
 2645              	.LVL228:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2646              		.loc 1 2173 0
 2647 00a0 013C     		subs	r4, r4, #1
 2648              	.LVL229:
 2649 00a2 F7D1     		bne	.L233
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2650              		.loc 1 2175 0
 2651 00a4 0022     		movs	r2, #0
 2652 00a6 124B     		ldr	r3, .L238+28
 2653 00a8 1A60     		str	r2, [r3]
 2654              	.L231:
 2655              	.LBE161:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2656              		.loc 1 2183 0
 2657 00aa 104B     		ldr	r3, .L238+24
 2658 00ac 1B68     		ldr	r3, [r3]
 2659 00ae 5BB1     		cbz	r3, .L236
 2660              	.LVL230:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2661              		.loc 1 2190 0
 2662 00b0 4FF08052 		mov	r2, #268435456
 2663 00b4 0F4B     		ldr	r3, .L238+32
 2664 00b6 1A60     		str	r2, [r3]
 2665              		.syntax unified
 2666              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2667 00b8 BFF34F8F 		dsb
 2668              	@ 0 "" 2
 2669              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2670 00bc BFF36F8F 		isb
 2671              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2672              		.loc 1 2187 0
 2673              		.thumb
 2674              		.syntax unified
 2675 00c0 0124     		movs	r4, #1
 2676              	.LVL231:
 2677 00c2 02E0     		b	.L225
 2678              	.LVL232:
 2679              	.L234:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 144


 2680              		.loc 1 2102 0
 2681 00c4 0024     		movs	r4, #0
 2682 00c6 00E0     		b	.L225
 2683              	.LVL233:
 2684              	.L236:
 2685 00c8 0024     		movs	r4, #0
 2686              	.LVL234:
 2687              	.L225:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2688              		.loc 1 2203 0
 2689 00ca FFF7FEFF 		bl	vPortExitCritical
 2690              	.LVL235:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2691              		.loc 1 2206 0
 2692 00ce 2046     		mov	r0, r4
 2693 00d0 38BD     		pop	{r3, r4, r5, pc}
 2694              	.LVL236:
 2695              	.L239:
 2696 00d2 00BF     		.align	2
 2697              	.L238:
 2698 00d4 00000000 		.word	.LANCHOR16
 2699 00d8 00000000 		.word	.LANCHOR9
 2700 00dc 00000000 		.word	.LANCHOR1
 2701 00e0 00000000 		.word	.LANCHOR13
 2702 00e4 00000000 		.word	.LANCHOR4
 2703 00e8 00000000 		.word	.LANCHOR10
 2704 00ec 00000000 		.word	.LANCHOR19
 2705 00f0 00000000 		.word	.LANCHOR18
 2706 00f4 04ED00E0 		.word	-536810236
 2707              		.cfi_endproc
 2708              	.LFE22:
 2710              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2711              		.align	2
 2712              		.global	vTaskDelayUntil
 2713              		.thumb
 2714              		.thumb_func
 2716              	vTaskDelayUntil:
 2717              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2718              		.loc 1 1199 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 2722              	.LVL237:
 2723 0000 38B5     		push	{r3, r4, r5, lr}
 2724              	.LCFI27:
 2725              		.cfi_def_cfa_offset 16
 2726              		.cfi_offset 3, -16
 2727              		.cfi_offset 4, -12
 2728              		.cfi_offset 5, -8
 2729              		.cfi_offset 14, -4
 2730              	.LVL238:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2731              		.loc 1 1203 0
 2732 0002 40B9     		cbnz	r0, .L241
 2733              	.LBB162:
 2734              	.LBB163:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 145


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2735              		.loc 2 195 0
 2736              		.syntax unified
 2737              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2738 0004 4FF05003 			mov r3, #80												
 2739 0008 83F31188 		msr basepri, r3											
 2740 000c BFF36F8F 		isb														
 2741 0010 BFF34F8F 		dsb														
 2742              	
 2743              	@ 0 "" 2
 2744              	.LVL239:
 2745              		.thumb
 2746              		.syntax unified
 2747              	.L242:
 2748 0014 FEE7     		b	.L242
 2749              	.L241:
 2750 0016 0546     		mov	r5, r0
 2751              	.LBE163:
 2752              	.LBE162:
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2753              		.loc 1 1204 0
 2754 0018 41B9     		cbnz	r1, .L243
 2755              	.LBB164:
 2756              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2757              		.loc 2 195 0
 2758              		.syntax unified
 2759              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2760 001a 4FF05003 			mov r3, #80												
 2761 001e 83F31188 		msr basepri, r3											
 2762 0022 BFF36F8F 		isb														
 2763 0026 BFF34F8F 		dsb														
 2764              	
 2765              	@ 0 "" 2
 2766              	.LVL240:
 2767              		.thumb
 2768              		.syntax unified
 2769              	.L244:
 2770 002a FEE7     		b	.L244
 2771              	.L243:
 2772              	.LBE165:
 2773              	.LBE164:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2774              		.loc 1 1205 0
 2775 002c 1C4B     		ldr	r3, .L256
 2776 002e 1B68     		ldr	r3, [r3]
 2777 0030 43B1     		cbz	r3, .L245
 2778              	.LBB166:
 2779              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2780              		.loc 2 195 0
 2781              		.syntax unified
 2782              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2783 0032 4FF05003 			mov r3, #80												
 2784 0036 83F31188 		msr basepri, r3											
 2785 003a BFF36F8F 		isb														
 2786 003e BFF34F8F 		dsb														
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 146


 2787              	
 2788              	@ 0 "" 2
 2789              	.LVL241:
 2790              		.thumb
 2791              		.syntax unified
 2792              	.L246:
 2793 0042 FEE7     		b	.L246
 2794              	.L245:
 2795 0044 0C46     		mov	r4, r1
 2796              	.LBE167:
 2797              	.LBE166:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2798              		.loc 1 1207 0
 2799 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2800              	.LVL242:
 2801              	.LBB168:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2802              		.loc 1 1211 0
 2803 004a 164B     		ldr	r3, .L256+4
 2804 004c 1868     		ldr	r0, [r3]
 2805              	.LVL243:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2806              		.loc 1 1214 0
 2807 004e 2A68     		ldr	r2, [r5]
 2808 0050 A318     		adds	r3, r4, r2
 2809              	.LVL244:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2810              		.loc 1 1216 0
 2811 0052 9042     		cmp	r0, r2
 2812 0054 05D2     		bcs	.L247
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2813              		.loc 1 1223 0
 2814 0056 9A42     		cmp	r2, r3
 2815 0058 09D9     		bls	.L251
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2816              		.loc 1 1223 0 is_stmt 0 discriminator 1
 2817 005a 9842     		cmp	r0, r3
 2818 005c 09D3     		bcc	.L252
 2819              	.LBE168:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2820              		.loc 1 1201 0 is_stmt 1
 2821 005e 0022     		movs	r2, #0
 2822 0060 0CE0     		b	.L248
 2823              	.L247:
 2824              	.LBB169:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2825              		.loc 1 1237 0
 2826 0062 9A42     		cmp	r2, r3
 2827 0064 07D8     		bhi	.L253
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2828              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2829 0066 9842     		cmp	r0, r3
 2830 0068 07D3     		bcc	.L254
 2831              	.LBE169:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2832              		.loc 1 1201 0 is_stmt 1
 2833 006a 0022     		movs	r2, #0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 147


 2834 006c 06E0     		b	.L248
 2835              	.L251:
 2836 006e 0022     		movs	r2, #0
 2837 0070 04E0     		b	.L248
 2838              	.L252:
 2839              	.LBB170:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2840              		.loc 1 1225 0
 2841 0072 0122     		movs	r2, #1
 2842 0074 02E0     		b	.L248
 2843              	.L253:
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2844              		.loc 1 1239 0
 2845 0076 0122     		movs	r2, #1
 2846 0078 00E0     		b	.L248
 2847              	.L254:
 2848 007a 0122     		movs	r2, #1
 2849              	.L248:
 2850              	.LVL245:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2851              		.loc 1 1248 0
 2852 007c 2B60     		str	r3, [r5]
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2853              		.loc 1 1250 0
 2854 007e 1AB1     		cbz	r2, .L249
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2855              		.loc 1 1256 0
 2856 0080 0021     		movs	r1, #0
 2857 0082 181A     		subs	r0, r3, r0
 2858              	.LVL246:
 2859 0084 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2860              	.LVL247:
 2861              	.L249:
 2862              	.LBE170:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2863              		.loc 1 1263 0
 2864 0088 FFF7FEFF 		bl	xTaskResumeAll
 2865              	.LVL248:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2866              		.loc 1 1267 0
 2867 008c 38B9     		cbnz	r0, .L240
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2868              		.loc 1 1269 0
 2869 008e 4FF08052 		mov	r2, #268435456
 2870 0092 054B     		ldr	r3, .L256+8
 2871 0094 1A60     		str	r2, [r3]
 2872              		.syntax unified
 2873              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2874 0096 BFF34F8F 		dsb
 2875              	@ 0 "" 2
 2876              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2877 009a BFF36F8F 		isb
 2878              	@ 0 "" 2
 2879              		.thumb
 2880              		.syntax unified
 2881              	.L240:
 2882 009e 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 148


 2883              	.LVL249:
 2884              	.L257:
 2885              		.align	2
 2886              	.L256:
 2887 00a0 00000000 		.word	.LANCHOR16
 2888 00a4 00000000 		.word	.LANCHOR15
 2889 00a8 04ED00E0 		.word	-536810236
 2890              		.cfi_endproc
 2891              	.LFE9:
 2893              		.section	.text.vTaskDelay,"ax",%progbits
 2894              		.align	2
 2895              		.global	vTaskDelay
 2896              		.thumb
 2897              		.thumb_func
 2899              	vTaskDelay:
 2900              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2901              		.loc 1 1283 0
 2902              		.cfi_startproc
 2903              		@ args = 0, pretend = 0, frame = 0
 2904              		@ frame_needed = 0, uses_anonymous_args = 0
 2905              	.LVL250:
 2906 0000 10B5     		push	{r4, lr}
 2907              	.LCFI28:
 2908              		.cfi_def_cfa_offset 8
 2909              		.cfi_offset 4, -8
 2910              		.cfi_offset 14, -4
 2911              	.LVL251:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2912              		.loc 1 1287 0
 2913 0002 A8B1     		cbz	r0, .L263
 2914 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2915              		.loc 1 1289 0
 2916 0006 104B     		ldr	r3, .L265
 2917 0008 1B68     		ldr	r3, [r3]
 2918 000a 43B1     		cbz	r3, .L260
 2919              	.LBB171:
 2920              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2921              		.loc 2 195 0
 2922              		.syntax unified
 2923              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2924 000c 4FF05003 			mov r3, #80												
 2925 0010 83F31188 		msr basepri, r3											
 2926 0014 BFF36F8F 		isb														
 2927 0018 BFF34F8F 		dsb														
 2928              	
 2929              	@ 0 "" 2
 2930              	.LVL252:
 2931              		.thumb
 2932              		.syntax unified
 2933              	.L261:
 2934 001c FEE7     		b	.L261
 2935              	.L260:
 2936              	.LBE172:
 2937              	.LBE171:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 149


1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2938              		.loc 1 1290 0
 2939 001e FFF7FEFF 		bl	vTaskSuspendAll
 2940              	.LVL253:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2941              		.loc 1 1301 0
 2942 0022 0021     		movs	r1, #0
 2943 0024 2046     		mov	r0, r4
 2944 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2945              	.LVL254:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2946              		.loc 1 1303 0
 2947 002a FFF7FEFF 		bl	xTaskResumeAll
 2948              	.LVL255:
 2949 002e 00E0     		b	.L259
 2950              	.LVL256:
 2951              	.L263:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2952              		.loc 1 1284 0
 2953 0030 0020     		movs	r0, #0
 2954              	.LVL257:
 2955              	.L259:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2956              		.loc 1 1312 0
 2957 0032 38B9     		cbnz	r0, .L258
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2958              		.loc 1 1314 0
 2959 0034 4FF08052 		mov	r2, #268435456
 2960 0038 044B     		ldr	r3, .L265+4
 2961 003a 1A60     		str	r2, [r3]
 2962              		.syntax unified
 2963              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2964 003c BFF34F8F 		dsb
 2965              	@ 0 "" 2
 2966              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2967 0040 BFF36F8F 		isb
 2968              	@ 0 "" 2
 2969              		.thumb
 2970              		.syntax unified
 2971              	.L258:
 2972 0044 10BD     		pop	{r4, pc}
 2973              	.L266:
 2974 0046 00BF     		.align	2
 2975              	.L265:
 2976 0048 00000000 		.word	.LANCHOR16
 2977 004c 04ED00E0 		.word	-536810236
 2978              		.cfi_endproc
 2979              	.LFE10:
 2981              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2982              		.align	2
 2983              		.global	vTaskSwitchContext
 2984              		.thumb
 2985              		.thumb_func
 2987              	vTaskSwitchContext:
 2988              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2989              		.loc 1 2846 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 150


 2990              		.cfi_startproc
 2991              		@ args = 0, pretend = 0, frame = 0
 2992              		@ frame_needed = 0, uses_anonymous_args = 0
 2993              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2994              		.loc 1 2847 0
 2995 0000 204B     		ldr	r3, .L276
 2996 0002 1B68     		ldr	r3, [r3]
 2997 0004 1BB1     		cbz	r3, .L268
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2998              		.loc 1 2851 0
 2999 0006 0122     		movs	r2, #1
 3000 0008 1F4B     		ldr	r3, .L276+4
 3001 000a 1A60     		str	r2, [r3]
 3002 000c 7047     		bx	lr
 3003              	.L268:
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3004              		.loc 1 2855 0
 3005 000e 0022     		movs	r2, #0
 3006 0010 1D4B     		ldr	r3, .L276+4
 3007 0012 1A60     		str	r2, [r3]
 3008              	.LBB173:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3009              		.loc 1 2890 0
 3010 0014 1D4B     		ldr	r3, .L276+8
 3011 0016 1B68     		ldr	r3, [r3]
 3012              	.LVL258:
 3013 0018 0AE0     		b	.L270
 3014              	.L273:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3015              		.loc 1 2890 0 is_stmt 0 discriminator 5
 3016 001a 43B9     		cbnz	r3, .L271
 3017              	.LBB174:
 3018              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3019              		.loc 2 195 0 is_stmt 1
 3020              		.syntax unified
 3021              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3022 001c 4FF05003 			mov r3, #80												
 3023 0020 83F31188 		msr basepri, r3											
 3024 0024 BFF36F8F 		isb														
 3025 0028 BFF34F8F 		dsb														
 3026              	
 3027              	@ 0 "" 2
 3028              	.LVL259:
 3029              		.thumb
 3030              		.syntax unified
 3031              	.L272:
 3032 002c FEE7     		b	.L272
 3033              	.LVL260:
 3034              	.L271:
 3035              	.LBE175:
 3036              	.LBE174:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3037              		.loc 1 2890 0 discriminator 3
 3038 002e 013B     		subs	r3, r3, #1
 3039              	.LVL261:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 151


 3040              	.L270:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3041              		.loc 1 2890 0 is_stmt 0 discriminator 4
 3042 0030 03EB8301 		add	r1, r3, r3, lsl #2
 3043 0034 8A00     		lsls	r2, r1, #2
 3044 0036 1649     		ldr	r1, .L276+12
 3045 0038 8A58     		ldr	r2, [r1, r2]
 3046 003a 002A     		cmp	r2, #0
 3047 003c EDD0     		beq	.L273
 3048              	.LBE173:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3049              		.loc 1 2846 0 is_stmt 1 discriminator 6
 3050 003e 30B4     		push	{r4, r5}
 3051              	.LCFI29:
 3052              		.cfi_def_cfa_offset 8
 3053              		.cfi_offset 4, -8
 3054              		.cfi_offset 5, -4
 3055              	.LVL262:
 3056              	.LBB177:
 3057              	.LBB176:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3058              		.loc 1 2890 0 discriminator 6
 3059 0040 0D46     		mov	r5, r1
 3060 0042 9900     		lsls	r1, r3, #2
 3061 0044 CA18     		adds	r2, r1, r3
 3062 0046 9000     		lsls	r0, r2, #2
 3063 0048 2844     		add	r0, r0, r5
 3064 004a 4268     		ldr	r2, [r0, #4]
 3065 004c 5468     		ldr	r4, [r2, #4]
 3066 004e 4460     		str	r4, [r0, #4]
 3067 0050 1944     		add	r1, r1, r3
 3068 0052 8A00     		lsls	r2, r1, #2
 3069 0054 0832     		adds	r2, r2, #8
 3070 0056 2A44     		add	r2, r2, r5
 3071 0058 9442     		cmp	r4, r2
 3072 005a 05D1     		bne	.L274
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3073              		.loc 1 2890 0 is_stmt 0 discriminator 7
 3074 005c 6068     		ldr	r0, [r4, #4]
 3075 005e 03EB8301 		add	r1, r3, r3, lsl #2
 3076 0062 8A00     		lsls	r2, r1, #2
 3077 0064 2A44     		add	r2, r2, r5
 3078 0066 5060     		str	r0, [r2, #4]
 3079              	.L274:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3080              		.loc 1 2890 0 discriminator 9
 3081 0068 03EB8301 		add	r1, r3, r3, lsl #2
 3082 006c 8A00     		lsls	r2, r1, #2
 3083 006e 0849     		ldr	r1, .L276+12
 3084 0070 0A44     		add	r2, r2, r1
 3085 0072 5268     		ldr	r2, [r2, #4]
 3086 0074 D168     		ldr	r1, [r2, #12]
 3087 0076 074A     		ldr	r2, .L276+16
 3088 0078 1160     		str	r1, [r2]
 3089              	.LBE176:
 3090 007a 044A     		ldr	r2, .L276+8
 3091 007c 1360     		str	r3, [r2]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 152


 3092              	.LBE177:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3093              		.loc 1 2901 0 is_stmt 1 discriminator 9
 3094 007e 30BC     		pop	{r4, r5}
 3095              	.LCFI30:
 3096              		.cfi_restore 5
 3097              		.cfi_restore 4
 3098              		.cfi_def_cfa_offset 0
 3099 0080 7047     		bx	lr
 3100              	.L277:
 3101 0082 00BF     		.align	2
 3102              	.L276:
 3103 0084 00000000 		.word	.LANCHOR16
 3104 0088 00000000 		.word	.LANCHOR19
 3105 008c 00000000 		.word	.LANCHOR13
 3106 0090 00000000 		.word	.LANCHOR4
 3107 0094 00000000 		.word	.LANCHOR10
 3108              		.cfi_endproc
 3109              	.LFE29:
 3111              		.section	.text.vTaskSuspend,"ax",%progbits
 3112              		.align	2
 3113              		.global	vTaskSuspend
 3114              		.thumb
 3115              		.thumb_func
 3117              	vTaskSuspend:
 3118              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3119              		.loc 1 1625 0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 3123              	.LVL263:
 3124 0000 38B5     		push	{r3, r4, r5, lr}
 3125              	.LCFI31:
 3126              		.cfi_def_cfa_offset 16
 3127              		.cfi_offset 3, -16
 3128              		.cfi_offset 4, -12
 3129              		.cfi_offset 5, -8
 3130              		.cfi_offset 14, -4
 3131 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3132              		.loc 1 1628 0
 3133 0004 FFF7FEFF 		bl	vPortEnterCritical
 3134              	.LVL264:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3135              		.loc 1 1632 0
 3136 0008 0CB9     		cbnz	r4, .L279
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3137              		.loc 1 1632 0 is_stmt 0 discriminator 1
 3138 000a 264B     		ldr	r3, .L289
 3139 000c 1C68     		ldr	r4, [r3]
 3140              	.LVL265:
 3141              	.L279:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3142              		.loc 1 1638 0 is_stmt 1 discriminator 4
 3143 000e 251D     		adds	r5, r4, #4
 3144 0010 2846     		mov	r0, r5
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 153


 3145 0012 FFF7FEFF 		bl	uxListRemove
 3146              	.LVL266:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3147              		.loc 1 1648 0 discriminator 4
 3148 0016 A36A     		ldr	r3, [r4, #40]
 3149 0018 1BB1     		cbz	r3, .L280
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3150              		.loc 1 1650 0
 3151 001a 04F11800 		add	r0, r4, #24
 3152 001e FFF7FEFF 		bl	uxListRemove
 3153              	.LVL267:
 3154              	.L280:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3155              		.loc 1 1657 0
 3156 0022 2946     		mov	r1, r5
 3157 0024 2048     		ldr	r0, .L289+4
 3158 0026 FFF7FEFF 		bl	vListInsertEnd
 3159              	.LVL268:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3160              		.loc 1 1661 0
 3161 002a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3162 002e DBB2     		uxtb	r3, r3
 3163 0030 012B     		cmp	r3, #1
 3164 0032 02D1     		bne	.L281
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3165              		.loc 1 1665 0
 3166 0034 0023     		movs	r3, #0
 3167 0036 84F85830 		strb	r3, [r4, #88]
 3168              	.L281:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3169              		.loc 1 1670 0
 3170 003a FFF7FEFF 		bl	vPortExitCritical
 3171              	.LVL269:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3172              		.loc 1 1672 0
 3173 003e 1B4B     		ldr	r3, .L289+8
 3174 0040 1B68     		ldr	r3, [r3]
 3175 0042 2BB1     		cbz	r3, .L282
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3176              		.loc 1 1676 0
 3177 0044 FFF7FEFF 		bl	vPortEnterCritical
 3178              	.LVL270:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3179              		.loc 1 1678 0
 3180 0048 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3181              	.LVL271:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3182              		.loc 1 1680 0
 3183 004c FFF7FEFF 		bl	vPortExitCritical
 3184              	.LVL272:
 3185              	.L282:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3186              		.loc 1 1687 0
 3187 0050 144B     		ldr	r3, .L289
 3188 0052 1B68     		ldr	r3, [r3]
 3189 0054 9C42     		cmp	r4, r3
 3190 0056 23D1     		bne	.L278
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 154


1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3191              		.loc 1 1689 0
 3192 0058 144B     		ldr	r3, .L289+8
 3193 005a 1B68     		ldr	r3, [r3]
 3194 005c A3B1     		cbz	r3, .L284
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3195              		.loc 1 1692 0
 3196 005e 144B     		ldr	r3, .L289+12
 3197 0060 1B68     		ldr	r3, [r3]
 3198 0062 43B1     		cbz	r3, .L285
 3199              	.LBB178:
 3200              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3201              		.loc 2 195 0
 3202              		.syntax unified
 3203              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3204 0064 4FF05003 			mov r3, #80												
 3205 0068 83F31188 		msr basepri, r3											
 3206 006c BFF36F8F 		isb														
 3207 0070 BFF34F8F 		dsb														
 3208              	
 3209              	@ 0 "" 2
 3210              	.LVL273:
 3211              		.thumb
 3212              		.syntax unified
 3213              	.L286:
 3214 0074 FEE7     		b	.L286
 3215              	.L285:
 3216              	.LBE179:
 3217              	.LBE178:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3218              		.loc 1 1693 0
 3219 0076 4FF08052 		mov	r2, #268435456
 3220 007a 0E4B     		ldr	r3, .L289+16
 3221 007c 1A60     		str	r2, [r3]
 3222              		.syntax unified
 3223              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3224 007e BFF34F8F 		dsb
 3225              	@ 0 "" 2
 3226              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3227 0082 BFF36F8F 		isb
 3228              	@ 0 "" 2
 3229              		.thumb
 3230              		.syntax unified
 3231 0086 38BD     		pop	{r3, r4, r5, pc}
 3232              	.LVL274:
 3233              	.L284:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3234              		.loc 1 1700 0
 3235 0088 074B     		ldr	r3, .L289+4
 3236 008a 1A68     		ldr	r2, [r3]
 3237 008c 0A4B     		ldr	r3, .L289+20
 3238 008e 1B68     		ldr	r3, [r3]
 3239 0090 9A42     		cmp	r2, r3
 3240 0092 03D1     		bne	.L287
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3241              		.loc 1 1706 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 155


 3242 0094 0022     		movs	r2, #0
 3243 0096 034B     		ldr	r3, .L289
 3244 0098 1A60     		str	r2, [r3]
 3245 009a 38BD     		pop	{r3, r4, r5, pc}
 3246              	.LVL275:
 3247              	.L287:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3248              		.loc 1 1710 0
 3249 009c FFF7FEFF 		bl	vTaskSwitchContext
 3250              	.LVL276:
 3251              	.L278:
 3252 00a0 38BD     		pop	{r3, r4, r5, pc}
 3253              	.LVL277:
 3254              	.L290:
 3255 00a2 00BF     		.align	2
 3256              	.L289:
 3257 00a4 00000000 		.word	.LANCHOR10
 3258 00a8 00000000 		.word	.LANCHOR0
 3259 00ac 00000000 		.word	.LANCHOR11
 3260 00b0 00000000 		.word	.LANCHOR16
 3261 00b4 04ED00E0 		.word	-536810236
 3262 00b8 00000000 		.word	.LANCHOR9
 3263              		.cfi_endproc
 3264              	.LFE15:
 3266              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3267              		.align	2
 3268              		.global	vTaskPlaceOnEventList
 3269              		.thumb
 3270              		.thumb_func
 3272              	vTaskPlaceOnEventList:
 3273              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3274              		.loc 1 2905 0
 3275              		.cfi_startproc
 3276              		@ args = 0, pretend = 0, frame = 0
 3277              		@ frame_needed = 0, uses_anonymous_args = 0
 3278              	.LVL278:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3279              		.loc 1 2906 0
 3280 0000 40B9     		cbnz	r0, .L292
 3281              	.LBB180:
 3282              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3283              		.loc 2 195 0
 3284              		.syntax unified
 3285              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3286 0002 4FF05003 			mov r3, #80												
 3287 0006 83F31188 		msr basepri, r3											
 3288 000a BFF36F8F 		isb														
 3289 000e BFF34F8F 		dsb														
 3290              	
 3291              	@ 0 "" 2
 3292              	.LVL279:
 3293              		.thumb
 3294              		.syntax unified
 3295              	.L293:
 3296 0012 FEE7     		b	.L293
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 156


 3297              	.L292:
 3298              	.LBE181:
 3299              	.LBE180:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3300              		.loc 1 2905 0
 3301 0014 10B5     		push	{r4, lr}
 3302              	.LCFI32:
 3303              		.cfi_def_cfa_offset 8
 3304              		.cfi_offset 4, -8
 3305              		.cfi_offset 14, -4
 3306 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3307              		.loc 1 2915 0
 3308 0018 044B     		ldr	r3, .L295
 3309 001a 1968     		ldr	r1, [r3]
 3310              	.LVL280:
 3311 001c 1831     		adds	r1, r1, #24
 3312 001e FFF7FEFF 		bl	vListInsert
 3313              	.LVL281:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3314              		.loc 1 2917 0
 3315 0022 0121     		movs	r1, #1
 3316 0024 2046     		mov	r0, r4
 3317 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3318              	.LVL282:
 3319 002a 10BD     		pop	{r4, pc}
 3320              	.LVL283:
 3321              	.L296:
 3322              		.align	2
 3323              	.L295:
 3324 002c 00000000 		.word	.LANCHOR10
 3325              		.cfi_endproc
 3326              	.LFE30:
 3328              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3329              		.align	2
 3330              		.global	vTaskPlaceOnUnorderedEventList
 3331              		.thumb
 3332              		.thumb_func
 3334              	vTaskPlaceOnUnorderedEventList:
 3335              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3336              		.loc 1 2922 0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 3340              	.LVL284:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3341              		.loc 1 2923 0
 3342 0000 40B9     		cbnz	r0, .L298
 3343              	.LBB182:
 3344              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3345              		.loc 2 195 0
 3346              		.syntax unified
 3347              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3348 0002 4FF05003 			mov r3, #80												
 3349 0006 83F31188 		msr basepri, r3											
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 157


 3350 000a BFF36F8F 		isb														
 3351 000e BFF34F8F 		dsb														
 3352              	
 3353              	@ 0 "" 2
 3354              	.LVL285:
 3355              		.thumb
 3356              		.syntax unified
 3357              	.L299:
 3358 0012 FEE7     		b	.L299
 3359              	.L298:
 3360 0014 0346     		mov	r3, r0
 3361              	.LBE183:
 3362              	.LBE182:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3363              		.loc 1 2927 0
 3364 0016 0F48     		ldr	r0, .L303
 3365              	.LVL286:
 3366 0018 0068     		ldr	r0, [r0]
 3367 001a 40B9     		cbnz	r0, .L300
 3368              	.LBB184:
 3369              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3370              		.loc 2 195 0
 3371              		.syntax unified
 3372              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3373 001c 4FF05003 			mov r3, #80												
 3374 0020 83F31188 		msr basepri, r3											
 3375 0024 BFF36F8F 		isb														
 3376 0028 BFF34F8F 		dsb														
 3377              	
 3378              	@ 0 "" 2
 3379              	.LVL287:
 3380              		.thumb
 3381              		.syntax unified
 3382              	.L301:
 3383 002c FEE7     		b	.L301
 3384              	.LVL288:
 3385              	.L300:
 3386              	.LBE185:
 3387              	.LBE184:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3388              		.loc 1 2922 0
 3389 002e 10B5     		push	{r4, lr}
 3390              	.LCFI33:
 3391              		.cfi_def_cfa_offset 8
 3392              		.cfi_offset 4, -8
 3393              		.cfi_offset 14, -4
 3394 0030 1846     		mov	r0, r3
 3395 0032 1446     		mov	r4, r2
 3396 0034 0B46     		mov	r3, r1
 3397              	.LVL289:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3398              		.loc 1 2932 0
 3399 0036 084A     		ldr	r2, .L303+4
 3400              	.LVL290:
 3401 0038 1168     		ldr	r1, [r2]
 3402              	.LVL291:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 158


 3403 003a 43F00043 		orr	r3, r3, #-2147483648
 3404              	.LVL292:
 3405 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3406              		.loc 1 2939 0
 3407 0040 1168     		ldr	r1, [r2]
 3408 0042 1831     		adds	r1, r1, #24
 3409 0044 FFF7FEFF 		bl	vListInsertEnd
 3410              	.LVL293:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3411              		.loc 1 2941 0
 3412 0048 0121     		movs	r1, #1
 3413 004a 2046     		mov	r0, r4
 3414 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3415              	.LVL294:
 3416 0050 10BD     		pop	{r4, pc}
 3417              	.LVL295:
 3418              	.L304:
 3419 0052 00BF     		.align	2
 3420              	.L303:
 3421 0054 00000000 		.word	.LANCHOR16
 3422 0058 00000000 		.word	.LANCHOR10
 3423              		.cfi_endproc
 3424              	.LFE31:
 3426              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3427              		.align	2
 3428              		.global	vTaskPlaceOnEventListRestricted
 3429              		.thumb
 3430              		.thumb_func
 3432              	vTaskPlaceOnEventListRestricted:
 3433              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3434              		.loc 1 2948 0
 3435              		.cfi_startproc
 3436              		@ args = 0, pretend = 0, frame = 0
 3437              		@ frame_needed = 0, uses_anonymous_args = 0
 3438              	.LVL296:
 3439 0000 38B5     		push	{r3, r4, r5, lr}
 3440              	.LCFI34:
 3441              		.cfi_def_cfa_offset 16
 3442              		.cfi_offset 3, -16
 3443              		.cfi_offset 4, -12
 3444              		.cfi_offset 5, -8
 3445              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3446              		.loc 1 2949 0
 3447 0002 40B9     		cbnz	r0, .L306
 3448              	.LBB186:
 3449              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3450              		.loc 2 195 0
 3451              		.syntax unified
 3452              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3453 0004 4FF05003 			mov r3, #80												
 3454 0008 83F31188 		msr basepri, r3											
 3455 000c BFF36F8F 		isb														
 3456 0010 BFF34F8F 		dsb														
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 159


 3457              	
 3458              	@ 0 "" 2
 3459              	.LVL297:
 3460              		.thumb
 3461              		.syntax unified
 3462              	.L307:
 3463 0014 FEE7     		b	.L307
 3464              	.L306:
 3465 0016 0C46     		mov	r4, r1
 3466 0018 1546     		mov	r5, r2
 3467              	.LBE187:
 3468              	.LBE186:
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3469              		.loc 1 2961 0
 3470 001a 064A     		ldr	r2, .L311
 3471              	.LVL298:
 3472 001c 1168     		ldr	r1, [r2]
 3473              	.LVL299:
 3474 001e 1831     		adds	r1, r1, #24
 3475 0020 FFF7FEFF 		bl	vListInsertEnd
 3476              	.LVL300:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3477              		.loc 1 2966 0
 3478 0024 0DB1     		cbz	r5, .L308
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3479              		.loc 1 2968 0
 3480 0026 4FF0FF34 		mov	r4, #-1
 3481              	.LVL301:
 3482              	.L308:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3483              		.loc 1 2972 0
 3484 002a 2946     		mov	r1, r5
 3485 002c 2046     		mov	r0, r4
 3486 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3487              	.LVL302:
 3488 0032 38BD     		pop	{r3, r4, r5, pc}
 3489              	.LVL303:
 3490              	.L312:
 3491              		.align	2
 3492              	.L311:
 3493 0034 00000000 		.word	.LANCHOR10
 3494              		.cfi_endproc
 3495              	.LFE32:
 3497              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3498              		.align	2
 3499              		.global	xTaskRemoveFromEventList
 3500              		.thumb
 3501              		.thumb_func
 3503              	xTaskRemoveFromEventList:
 3504              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3505              		.loc 1 2979 0
 3506              		.cfi_startproc
 3507              		@ args = 0, pretend = 0, frame = 0
 3508              		@ frame_needed = 0, uses_anonymous_args = 0
 3509              	.LVL304:
 3510 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 160


 3511              	.LCFI35:
 3512              		.cfi_def_cfa_offset 16
 3513              		.cfi_offset 3, -16
 3514              		.cfi_offset 4, -12
 3515              		.cfi_offset 5, -8
 3516              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3517              		.loc 1 2996 0
 3518 0002 C368     		ldr	r3, [r0, #12]
 3519 0004 DC68     		ldr	r4, [r3, #12]
 3520              	.LVL305:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3521              		.loc 1 2997 0
 3522 0006 44B9     		cbnz	r4, .L314
 3523              	.LBB188:
 3524              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3525              		.loc 2 195 0
 3526              		.syntax unified
 3527              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3528 0008 4FF05003 			mov r3, #80												
 3529 000c 83F31188 		msr basepri, r3											
 3530 0010 BFF36F8F 		isb														
 3531 0014 BFF34F8F 		dsb														
 3532              	
 3533              	@ 0 "" 2
 3534              	.LVL306:
 3535              		.thumb
 3536              		.syntax unified
 3537              	.L315:
 3538 0018 FEE7     		b	.L315
 3539              	.L314:
 3540              	.LBE189:
 3541              	.LBE188:
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3542              		.loc 1 2998 0
 3543 001a 04F11805 		add	r5, r4, #24
 3544 001e 2846     		mov	r0, r5
 3545              	.LVL307:
 3546 0020 FFF7FEFF 		bl	uxListRemove
 3547              	.LVL308:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3548              		.loc 1 3000 0
 3549 0024 134B     		ldr	r3, .L322
 3550 0026 1B68     		ldr	r3, [r3]
 3551 0028 9BB9     		cbnz	r3, .L316
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3552              		.loc 1 3002 0
 3553 002a 251D     		adds	r5, r4, #4
 3554 002c 2846     		mov	r0, r5
 3555 002e FFF7FEFF 		bl	uxListRemove
 3556              	.LVL309:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3557              		.loc 1 3003 0
 3558 0032 E36A     		ldr	r3, [r4, #44]
 3559 0034 104A     		ldr	r2, .L322+4
 3560 0036 1268     		ldr	r2, [r2]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 161


 3561 0038 9342     		cmp	r3, r2
 3562 003a 01D9     		bls	.L317
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3563              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3564 003c 0E4A     		ldr	r2, .L322+4
 3565 003e 1360     		str	r3, [r2]
 3566              	.L317:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3567              		.loc 1 3003 0 discriminator 3
 3568 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3569 0044 9A00     		lsls	r2, r3, #2
 3570 0046 2946     		mov	r1, r5
 3571 0048 0C48     		ldr	r0, .L322+8
 3572 004a 1044     		add	r0, r0, r2
 3573 004c FFF7FEFF 		bl	vListInsertEnd
 3574              	.LVL310:
 3575 0050 03E0     		b	.L318
 3576              	.L316:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3577              		.loc 1 3009 0 is_stmt 1
 3578 0052 2946     		mov	r1, r5
 3579 0054 0A48     		ldr	r0, .L322+12
 3580 0056 FFF7FEFF 		bl	vListInsertEnd
 3581              	.LVL311:
 3582              	.L318:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3583              		.loc 1 3012 0
 3584 005a E26A     		ldr	r2, [r4, #44]
 3585 005c 094B     		ldr	r3, .L322+16
 3586 005e 1B68     		ldr	r3, [r3]
 3587 0060 DB6A     		ldr	r3, [r3, #44]
 3588 0062 9A42     		cmp	r2, r3
 3589 0064 03D9     		bls	.L320
 3590              	.LVL312:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3591              		.loc 1 3021 0
 3592 0066 0120     		movs	r0, #1
 3593 0068 074B     		ldr	r3, .L322+20
 3594 006a 1860     		str	r0, [r3]
 3595 006c 38BD     		pop	{r3, r4, r5, pc}
 3596              	.LVL313:
 3597              	.L320:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3598              		.loc 1 3025 0
 3599 006e 0020     		movs	r0, #0
 3600              	.LVL314:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3601              		.loc 1 3043 0
 3602 0070 38BD     		pop	{r3, r4, r5, pc}
 3603              	.LVL315:
 3604              	.L323:
 3605 0072 00BF     		.align	2
 3606              	.L322:
 3607 0074 00000000 		.word	.LANCHOR16
 3608 0078 00000000 		.word	.LANCHOR13
 3609 007c 00000000 		.word	.LANCHOR4
 3610 0080 00000000 		.word	.LANCHOR1
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 162


 3611 0084 00000000 		.word	.LANCHOR10
 3612 0088 00000000 		.word	.LANCHOR19
 3613              		.cfi_endproc
 3614              	.LFE33:
 3616              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3617              		.align	2
 3618              		.global	vTaskRemoveFromUnorderedEventList
 3619              		.thumb
 3620              		.thumb_func
 3622              	vTaskRemoveFromUnorderedEventList:
 3623              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3624              		.loc 1 3047 0
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 0, uses_anonymous_args = 0
 3628              	.LVL316:
 3629 0000 38B5     		push	{r3, r4, r5, lr}
 3630              	.LCFI36:
 3631              		.cfi_def_cfa_offset 16
 3632              		.cfi_offset 3, -16
 3633              		.cfi_offset 4, -12
 3634              		.cfi_offset 5, -8
 3635              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3636              		.loc 1 3052 0
 3637 0002 1C4B     		ldr	r3, .L332
 3638 0004 1B68     		ldr	r3, [r3]
 3639 0006 43B9     		cbnz	r3, .L325
 3640              	.LBB190:
 3641              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3642              		.loc 2 195 0
 3643              		.syntax unified
 3644              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3645 0008 4FF05003 			mov r3, #80												
 3646 000c 83F31188 		msr basepri, r3											
 3647 0010 BFF36F8F 		isb														
 3648 0014 BFF34F8F 		dsb														
 3649              	
 3650              	@ 0 "" 2
 3651              	.LVL317:
 3652              		.thumb
 3653              		.syntax unified
 3654              	.L326:
 3655 0018 FEE7     		b	.L326
 3656              	.L325:
 3657              	.LBE191:
 3658              	.LBE190:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3659              		.loc 1 3055 0
 3660 001a 41F00043 		orr	r3, r1, #-2147483648
 3661 001e 0360     		str	r3, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3662              		.loc 1 3059 0
 3663 0020 C468     		ldr	r4, [r0, #12]
 3664              	.LVL318:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 163


3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3665              		.loc 1 3060 0
 3666 0022 44B9     		cbnz	r4, .L327
 3667              	.LBB192:
 3668              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 195 0
 3670              		.syntax unified
 3671              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 0024 4FF05003 			mov r3, #80												
 3673 0028 83F31188 		msr basepri, r3											
 3674 002c BFF36F8F 		isb														
 3675 0030 BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              	.LVL319:
 3679              		.thumb
 3680              		.syntax unified
 3681              	.L328:
 3682 0034 FEE7     		b	.L328
 3683              	.L327:
 3684              	.LBE193:
 3685              	.LBE192:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3686              		.loc 1 3061 0
 3687 0036 FFF7FEFF 		bl	uxListRemove
 3688              	.LVL320:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3689              		.loc 1 3066 0
 3690 003a 251D     		adds	r5, r4, #4
 3691 003c 2846     		mov	r0, r5
 3692 003e FFF7FEFF 		bl	uxListRemove
 3693              	.LVL321:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3694              		.loc 1 3067 0
 3695 0042 E36A     		ldr	r3, [r4, #44]
 3696 0044 0C4A     		ldr	r2, .L332+4
 3697 0046 1268     		ldr	r2, [r2]
 3698 0048 9342     		cmp	r3, r2
 3699 004a 01D9     		bls	.L329
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3700              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3701 004c 0A4A     		ldr	r2, .L332+4
 3702 004e 1360     		str	r3, [r2]
 3703              	.L329:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3704              		.loc 1 3067 0 discriminator 3
 3705 0050 03EB8303 		add	r3, r3, r3, lsl #2
 3706 0054 9A00     		lsls	r2, r3, #2
 3707 0056 2946     		mov	r1, r5
 3708 0058 0848     		ldr	r0, .L332+8
 3709 005a 1044     		add	r0, r0, r2
 3710 005c FFF7FEFF 		bl	vListInsertEnd
 3711              	.LVL322:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3712              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3713 0060 E26A     		ldr	r2, [r4, #44]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 164


 3714 0062 074B     		ldr	r3, .L332+12
 3715 0064 1B68     		ldr	r3, [r3]
 3716 0066 DB6A     		ldr	r3, [r3, #44]
 3717 0068 9A42     		cmp	r2, r3
 3718 006a 02D9     		bls	.L324
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3719              		.loc 1 3075 0
 3720 006c 0122     		movs	r2, #1
 3721 006e 054B     		ldr	r3, .L332+16
 3722 0070 1A60     		str	r2, [r3]
 3723              	.L324:
 3724 0072 38BD     		pop	{r3, r4, r5, pc}
 3725              	.LVL323:
 3726              	.L333:
 3727              		.align	2
 3728              	.L332:
 3729 0074 00000000 		.word	.LANCHOR16
 3730 0078 00000000 		.word	.LANCHOR13
 3731 007c 00000000 		.word	.LANCHOR4
 3732 0080 00000000 		.word	.LANCHOR10
 3733 0084 00000000 		.word	.LANCHOR19
 3734              		.cfi_endproc
 3735              	.LFE34:
 3737              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3738              		.align	2
 3739              		.global	vTaskSetTimeOutState
 3740              		.thumb
 3741              		.thumb_func
 3743              	vTaskSetTimeOutState:
 3744              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3745              		.loc 1 3081 0
 3746              		.cfi_startproc
 3747              		@ args = 0, pretend = 0, frame = 0
 3748              		@ frame_needed = 0, uses_anonymous_args = 0
 3749              	.LVL324:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3750              		.loc 1 3082 0
 3751 0000 40B9     		cbnz	r0, .L335
 3752              	.LBB194:
 3753              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3754              		.loc 2 195 0
 3755              		.syntax unified
 3756              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3757 0002 4FF05003 			mov r3, #80												
 3758 0006 83F31188 		msr basepri, r3											
 3759 000a BFF36F8F 		isb														
 3760 000e BFF34F8F 		dsb														
 3761              	
 3762              	@ 0 "" 2
 3763              	.LVL325:
 3764              		.thumb
 3765              		.syntax unified
 3766              	.L336:
 3767 0012 FEE7     		b	.L336
 3768              	.L335:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 165


 3769              	.LBE195:
 3770              	.LBE194:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3771              		.loc 1 3081 0
 3772 0014 10B5     		push	{r4, lr}
 3773              	.LCFI37:
 3774              		.cfi_def_cfa_offset 8
 3775              		.cfi_offset 4, -8
 3776              		.cfi_offset 14, -4
 3777 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3778              		.loc 1 3083 0
 3779 0018 FFF7FEFF 		bl	vPortEnterCritical
 3780              	.LVL326:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3781              		.loc 1 3085 0
 3782 001c 044B     		ldr	r3, .L338
 3783 001e 1B68     		ldr	r3, [r3]
 3784 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3785              		.loc 1 3086 0
 3786 0022 044B     		ldr	r3, .L338+4
 3787 0024 1B68     		ldr	r3, [r3]
 3788 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3789              		.loc 1 3088 0
 3790 0028 FFF7FEFF 		bl	vPortExitCritical
 3791              	.LVL327:
 3792 002c 10BD     		pop	{r4, pc}
 3793              	.LVL328:
 3794              	.L339:
 3795 002e 00BF     		.align	2
 3796              	.L338:
 3797 0030 00000000 		.word	.LANCHOR17
 3798 0034 00000000 		.word	.LANCHOR15
 3799              		.cfi_endproc
 3800              	.LFE35:
 3802              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3803              		.align	2
 3804              		.global	vTaskInternalSetTimeOutState
 3805              		.thumb
 3806              		.thumb_func
 3808              	vTaskInternalSetTimeOutState:
 3809              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3810              		.loc 1 3093 0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
 3815              	.LVL329:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3816              		.loc 1 3095 0
 3817 0000 034B     		ldr	r3, .L341
 3818 0002 1B68     		ldr	r3, [r3]
 3819 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 166


 3820              		.loc 1 3096 0
 3821 0006 034B     		ldr	r3, .L341+4
 3822 0008 1B68     		ldr	r3, [r3]
 3823 000a 4360     		str	r3, [r0, #4]
 3824 000c 7047     		bx	lr
 3825              	.L342:
 3826 000e 00BF     		.align	2
 3827              	.L341:
 3828 0010 00000000 		.word	.LANCHOR17
 3829 0014 00000000 		.word	.LANCHOR15
 3830              		.cfi_endproc
 3831              	.LFE36:
 3833              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3834              		.align	2
 3835              		.global	xTaskCheckForTimeOut
 3836              		.thumb
 3837              		.thumb_func
 3839              	xTaskCheckForTimeOut:
 3840              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3841              		.loc 1 3101 0
 3842              		.cfi_startproc
 3843              		@ args = 0, pretend = 0, frame = 0
 3844              		@ frame_needed = 0, uses_anonymous_args = 0
 3845              	.LVL330:
 3846 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3847              	.LCFI38:
 3848              		.cfi_def_cfa_offset 24
 3849              		.cfi_offset 3, -24
 3850              		.cfi_offset 4, -20
 3851              		.cfi_offset 5, -16
 3852              		.cfi_offset 6, -12
 3853              		.cfi_offset 7, -8
 3854              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3855              		.loc 1 3104 0
 3856 0002 40B9     		cbnz	r0, .L344
 3857              	.LBB196:
 3858              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3859              		.loc 2 195 0
 3860              		.syntax unified
 3861              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3862 0004 4FF05003 			mov r3, #80												
 3863 0008 83F31188 		msr basepri, r3											
 3864 000c BFF36F8F 		isb														
 3865 0010 BFF34F8F 		dsb														
 3866              	
 3867              	@ 0 "" 2
 3868              	.LVL331:
 3869              		.thumb
 3870              		.syntax unified
 3871              	.L345:
 3872 0014 FEE7     		b	.L345
 3873              	.L344:
 3874 0016 0546     		mov	r5, r0
 3875              	.LBE197:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 167


 3876              	.LBE196:
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3877              		.loc 1 3105 0
 3878 0018 41B9     		cbnz	r1, .L346
 3879              	.LBB198:
 3880              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3881              		.loc 2 195 0
 3882              		.syntax unified
 3883              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3884 001a 4FF05003 			mov r3, #80												
 3885 001e 83F31188 		msr basepri, r3											
 3886 0022 BFF36F8F 		isb														
 3887 0026 BFF34F8F 		dsb														
 3888              	
 3889              	@ 0 "" 2
 3890              	.LVL332:
 3891              		.thumb
 3892              		.syntax unified
 3893              	.L347:
 3894 002a FEE7     		b	.L347
 3895              	.L346:
 3896 002c 0C46     		mov	r4, r1
 3897              	.LBE199:
 3898              	.LBE198:
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3899              		.loc 1 3107 0
 3900 002e FFF7FEFF 		bl	vPortEnterCritical
 3901              	.LVL333:
 3902              	.LBB200:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3903              		.loc 1 3110 0
 3904 0032 114B     		ldr	r3, .L354
 3905 0034 1868     		ldr	r0, [r3]
 3906              	.LVL334:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3907              		.loc 1 3111 0
 3908 0036 6968     		ldr	r1, [r5, #4]
 3909 0038 421A     		subs	r2, r0, r1
 3910              	.LVL335:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3911              		.loc 1 3125 0
 3912 003a 2368     		ldr	r3, [r4]
 3913 003c B3F1FF3F 		cmp	r3, #-1
 3914 0040 13D0     		beq	.L351
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3915              		.loc 1 3135 0
 3916 0042 2F68     		ldr	r7, [r5]
 3917 0044 0D4E     		ldr	r6, .L354+4
 3918 0046 3668     		ldr	r6, [r6]
 3919 0048 B742     		cmp	r7, r6
 3920 004a 01D0     		beq	.L349
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3921              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3922 004c 8842     		cmp	r0, r1
 3923 004e 0ED2     		bcs	.L352
 3924              	.L349:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 168


3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3925              		.loc 1 3144 0 is_stmt 1
 3926 0050 9A42     		cmp	r2, r3
 3927 0052 06D2     		bcs	.L350
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3928              		.loc 1 3147 0
 3929 0054 9B1A     		subs	r3, r3, r2
 3930 0056 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3931              		.loc 1 3148 0
 3932 0058 2846     		mov	r0, r5
 3933              	.LVL336:
 3934 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3935              	.LVL337:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3936              		.loc 1 3149 0
 3937 005e 0024     		movs	r4, #0
 3938              	.LVL338:
 3939 0060 06E0     		b	.L348
 3940              	.LVL339:
 3941              	.L350:
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3942              		.loc 1 3153 0
 3943 0062 0023     		movs	r3, #0
 3944 0064 2360     		str	r3, [r4]
 3945              	.LVL340:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3946              		.loc 1 3154 0
 3947 0066 0124     		movs	r4, #1
 3948              	.LVL341:
 3949 0068 02E0     		b	.L348
 3950              	.LVL342:
 3951              	.L351:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3952              		.loc 1 3130 0
 3953 006a 0024     		movs	r4, #0
 3954              	.LVL343:
 3955 006c 00E0     		b	.L348
 3956              	.LVL344:
 3957              	.L352:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3958              		.loc 1 3142 0
 3959 006e 0124     		movs	r4, #1
 3960              	.LVL345:
 3961              	.L348:
 3962              	.LBE200:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3963              		.loc 1 3157 0
 3964 0070 FFF7FEFF 		bl	vPortExitCritical
 3965              	.LVL346:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3966              		.loc 1 3160 0
 3967 0074 2046     		mov	r0, r4
 3968 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3969              	.LVL347:
 3970              	.L355:
 3971              		.align	2
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 169


 3972              	.L354:
 3973 0078 00000000 		.word	.LANCHOR15
 3974 007c 00000000 		.word	.LANCHOR17
 3975              		.cfi_endproc
 3976              	.LFE37:
 3978              		.section	.text.vTaskMissedYield,"ax",%progbits
 3979              		.align	2
 3980              		.global	vTaskMissedYield
 3981              		.thumb
 3982              		.thumb_func
 3984              	vTaskMissedYield:
 3985              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3986              		.loc 1 3164 0
 3987              		.cfi_startproc
 3988              		@ args = 0, pretend = 0, frame = 0
 3989              		@ frame_needed = 0, uses_anonymous_args = 0
 3990              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3991              		.loc 1 3165 0
 3992 0000 0122     		movs	r2, #1
 3993 0002 014B     		ldr	r3, .L357
 3994 0004 1A60     		str	r2, [r3]
 3995 0006 7047     		bx	lr
 3996              	.L358:
 3997              		.align	2
 3998              	.L357:
 3999 0008 00000000 		.word	.LANCHOR19
 4000              		.cfi_endproc
 4001              	.LFE38:
 4003              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4004              		.align	2
 4005              		.global	uxTaskGetTaskNumber
 4006              		.thumb
 4007              		.thumb_func
 4009              	uxTaskGetTaskNumber:
 4010              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4011              		.loc 1 3172 0
 4012              		.cfi_startproc
 4013              		@ args = 0, pretend = 0, frame = 0
 4014              		@ frame_needed = 0, uses_anonymous_args = 0
 4015              		@ link register save eliminated.
 4016              	.LVL348:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4017              		.loc 1 3176 0
 4018 0000 08B1     		cbz	r0, .L361
 4019              	.LVL349:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4020              		.loc 1 3179 0
 4021 0002 806C     		ldr	r0, [r0, #72]
 4022              	.LVL350:
 4023 0004 7047     		bx	lr
 4024              	.LVL351:
 4025              	.L361:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4026              		.loc 1 3183 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 170


 4027 0006 0020     		movs	r0, #0
 4028              	.LVL352:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4029              		.loc 1 3187 0
 4030 0008 7047     		bx	lr
 4031              		.cfi_endproc
 4032              	.LFE39:
 4034 000a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4035              		.align	2
 4036              		.global	vTaskSetTaskNumber
 4037              		.thumb
 4038              		.thumb_func
 4040              	vTaskSetTaskNumber:
 4041              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4042              		.loc 1 3195 0
 4043              		.cfi_startproc
 4044              		@ args = 0, pretend = 0, frame = 0
 4045              		@ frame_needed = 0, uses_anonymous_args = 0
 4046              		@ link register save eliminated.
 4047              	.LVL353:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4048              		.loc 1 3198 0
 4049 0000 00B1     		cbz	r0, .L362
 4050              	.LVL354:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4051              		.loc 1 3201 0
 4052 0002 8164     		str	r1, [r0, #72]
 4053              	.LVL355:
 4054              	.L362:
 4055 0004 7047     		bx	lr
 4056              		.cfi_endproc
 4057              	.LFE40:
 4059 0006 00BF     		.section	.text.vTaskGetInfo,"ax",%progbits
 4060              		.align	2
 4061              		.global	vTaskGetInfo
 4062              		.thumb
 4063              		.thumb_func
 4065              	vTaskGetInfo:
 4066              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4067              		.loc 1 3494 0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 0
 4070              		@ frame_needed = 0, uses_anonymous_args = 0
 4071              	.LVL356:
 4072 0000 70B5     		push	{r4, r5, r6, lr}
 4073              	.LCFI39:
 4074              		.cfi_def_cfa_offset 16
 4075              		.cfi_offset 4, -16
 4076              		.cfi_offset 5, -12
 4077              		.cfi_offset 6, -8
 4078              		.cfi_offset 14, -4
 4079 0002 0C46     		mov	r4, r1
 4080 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4081              		.loc 1 3498 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 171


 4082 0006 0546     		mov	r5, r0
 4083 0008 08B9     		cbnz	r0, .L365
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4084              		.loc 1 3498 0 is_stmt 0 discriminator 1
 4085 000a 194A     		ldr	r2, .L373
 4086              	.LVL357:
 4087 000c 1568     		ldr	r5, [r2]
 4088              	.LVL358:
 4089              	.L365:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4090              		.loc 1 3500 0 is_stmt 1 discriminator 4
 4091 000e 2560     		str	r5, [r4]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4092              		.loc 1 3501 0 discriminator 4
 4093 0010 05F13402 		add	r2, r5, #52
 4094 0014 6260     		str	r2, [r4, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4095              		.loc 1 3502 0 discriminator 4
 4096 0016 EA6A     		ldr	r2, [r5, #44]
 4097 0018 2261     		str	r2, [r4, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4098              		.loc 1 3503 0 discriminator 4
 4099 001a 2A6B     		ldr	r2, [r5, #48]
 4100 001c E261     		str	r2, [r4, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4101              		.loc 1 3504 0 discriminator 4
 4102 001e 6A6C     		ldr	r2, [r5, #68]
 4103 0020 A260     		str	r2, [r4, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4104              		.loc 1 3508 0 discriminator 4
 4105 0022 EA6C     		ldr	r2, [r5, #76]
 4106 0024 6261     		str	r2, [r4, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4107              		.loc 1 3522 0 discriminator 4
 4108 0026 0022     		movs	r2, #0
 4109 0028 A261     		str	r2, [r4, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4110              		.loc 1 3529 0 discriminator 4
 4111 002a 052B     		cmp	r3, #5
 4112 002c 12D0     		beq	.L366
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4113              		.loc 1 3531 0
 4114 002e 104A     		ldr	r2, .L373
 4115 0030 1268     		ldr	r2, [r2]
 4116 0032 9542     		cmp	r5, r2
 4117 0034 02D1     		bne	.L367
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4118              		.loc 1 3533 0
 4119 0036 0023     		movs	r3, #0
 4120              	.LVL359:
 4121 0038 2373     		strb	r3, [r4, #12]
 4122 003a 0FE0     		b	.L368
 4123              	.LVL360:
 4124              	.L367:
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4125              		.loc 1 3537 0
 4126 003c 2373     		strb	r3, [r4, #12]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 172


3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4127              		.loc 1 3544 0
 4128 003e 032B     		cmp	r3, #3
 4129 0040 0CD1     		bne	.L368
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4130              		.loc 1 3546 0
 4131 0042 FFF7FEFF 		bl	vTaskSuspendAll
 4132              	.LVL361:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4133              		.loc 1 3548 0
 4134 0046 AB6A     		ldr	r3, [r5, #40]
 4135 0048 0BB1     		cbz	r3, .L369
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4136              		.loc 1 3550 0
 4137 004a 0223     		movs	r3, #2
 4138 004c 2373     		strb	r3, [r4, #12]
 4139              	.L369:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4140              		.loc 1 3553 0
 4141 004e FFF7FEFF 		bl	xTaskResumeAll
 4142              	.LVL362:
 4143 0052 03E0     		b	.L368
 4144              	.LVL363:
 4145              	.L366:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4146              		.loc 1 3561 0
 4147 0054 2846     		mov	r0, r5
 4148 0056 FFF7FEFF 		bl	eTaskGetState
 4149              	.LVL364:
 4150 005a 2073     		strb	r0, [r4, #12]
 4151              	.L368:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4152              		.loc 1 3566 0
 4153 005c 26B1     		cbz	r6, .L370
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4154              		.loc 1 3574 0
 4155 005e 286B     		ldr	r0, [r5, #48]
 4156 0060 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4157              	.LVL365:
 4158 0064 2084     		strh	r0, [r4, #32]	@ movhi
 4159 0066 70BD     		pop	{r4, r5, r6, pc}
 4160              	.LVL366:
 4161              	.L370:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4162              		.loc 1 3580 0
 4163 0068 0023     		movs	r3, #0
 4164 006a 2384     		strh	r3, [r4, #32]	@ movhi
 4165 006c 70BD     		pop	{r4, r5, r6, pc}
 4166              	.LVL367:
 4167              	.L374:
 4168 006e 00BF     		.align	2
 4169              	.L373:
 4170 0070 00000000 		.word	.LANCHOR10
 4171              		.cfi_endproc
 4172              	.LFE44:
 4174              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4175              		.align	2
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 173


 4176              		.thumb
 4177              		.thumb_func
 4179              	prvListTasksWithinSingleList:
 4180              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4181              		.loc 1 3590 0
 4182              		.cfi_startproc
 4183              		@ args = 0, pretend = 0, frame = 0
 4184              		@ frame_needed = 0, uses_anonymous_args = 0
 4185              	.LVL368:
 4186 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4187              	.LCFI40:
 4188              		.cfi_def_cfa_offset 32
 4189              		.cfi_offset 4, -32
 4190              		.cfi_offset 5, -28
 4191              		.cfi_offset 6, -24
 4192              		.cfi_offset 7, -20
 4193              		.cfi_offset 8, -16
 4194              		.cfi_offset 9, -12
 4195              		.cfi_offset 10, -8
 4196              		.cfi_offset 14, -4
 4197              	.LVL369:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4198              		.loc 1 3594 0
 4199 0004 0B68     		ldr	r3, [r1]
 4200 0006 2BB3     		cbz	r3, .L380
 4201              	.LVL370:
 4202              	.LBB201:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4203              		.loc 1 3596 0
 4204 0008 4B68     		ldr	r3, [r1, #4]
 4205 000a 5B68     		ldr	r3, [r3, #4]
 4206 000c 4B60     		str	r3, [r1, #4]
 4207 000e 01F10809 		add	r9, r1, #8
 4208 0012 4B45     		cmp	r3, r9
 4209 0014 01D1     		bne	.L377
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4210              		.loc 1 3596 0 is_stmt 0 discriminator 1
 4211 0016 5B68     		ldr	r3, [r3, #4]
 4212 0018 4B60     		str	r3, [r1, #4]
 4213              	.L377:
 4214 001a 9046     		mov	r8, r2
 4215 001c 0D46     		mov	r5, r1
 4216 001e 0746     		mov	r7, r0
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4217              		.loc 1 3596 0 discriminator 3
 4218 0020 4B68     		ldr	r3, [r1, #4]
 4219 0022 D3F80CA0 		ldr	r10, [r3, #12]
 4220              	.LVL371:
 4221              	.LBE201:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4222              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4223 0026 0024     		movs	r4, #0
 4224              	.LVL372:
 4225              	.L379:
 4226              	.LBB202:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 174


 4227              		.loc 1 3604 0
 4228 0028 6B68     		ldr	r3, [r5, #4]
 4229 002a 5B68     		ldr	r3, [r3, #4]
 4230 002c 6B60     		str	r3, [r5, #4]
 4231 002e 9945     		cmp	r9, r3
 4232 0030 01D1     		bne	.L378
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4233              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4234 0032 5B68     		ldr	r3, [r3, #4]
 4235 0034 6B60     		str	r3, [r5, #4]
 4236              	.L378:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4237              		.loc 1 3604 0 discriminator 3
 4238 0036 6B68     		ldr	r3, [r5, #4]
 4239 0038 DE68     		ldr	r6, [r3, #12]
 4240              	.LVL373:
 4241              	.LBE202:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4242              		.loc 1 3605 0 is_stmt 1 discriminator 3
 4243 003a 04EBC403 		add	r3, r4, r4, lsl #3
 4244 003e 9900     		lsls	r1, r3, #2
 4245 0040 4346     		mov	r3, r8
 4246 0042 0122     		movs	r2, #1
 4247 0044 3944     		add	r1, r1, r7
 4248 0046 3046     		mov	r0, r6
 4249 0048 FFF7FEFF 		bl	vTaskGetInfo
 4250              	.LVL374:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4251              		.loc 1 3606 0 discriminator 3
 4252 004c 0134     		adds	r4, r4, #1
 4253              	.LVL375:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4254              		.loc 1 3607 0 discriminator 3
 4255 004e B245     		cmp	r10, r6
 4256 0050 EAD1     		bne	.L379
 4257 0052 00E0     		b	.L376
 4258              	.LVL376:
 4259              	.L380:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4260              		.loc 1 3592 0
 4261 0054 0024     		movs	r4, #0
 4262              	.LVL377:
 4263              	.L376:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4264              		.loc 1 3615 0
 4265 0056 2046     		mov	r0, r4
 4266 0058 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4267              		.cfi_endproc
 4268              	.LFE45:
 4270              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4271              		.align	2
 4272              		.global	uxTaskGetSystemState
 4273              		.thumb
 4274              		.thumb_func
 4276              	uxTaskGetSystemState:
 4277              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 175


 4278              		.loc 1 2404 0
 4279              		.cfi_startproc
 4280              		@ args = 0, pretend = 0, frame = 0
 4281              		@ frame_needed = 0, uses_anonymous_args = 0
 4282              	.LVL378:
 4283 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4284              	.LCFI41:
 4285              		.cfi_def_cfa_offset 24
 4286              		.cfi_offset 3, -24
 4287              		.cfi_offset 4, -20
 4288              		.cfi_offset 5, -16
 4289              		.cfi_offset 6, -12
 4290              		.cfi_offset 7, -8
 4291              		.cfi_offset 14, -4
 4292 0002 0746     		mov	r7, r0
 4293 0004 0C46     		mov	r4, r1
 4294 0006 1646     		mov	r6, r2
 4295              	.LVL379:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4296              		.loc 1 2407 0
 4297 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4298              	.LVL380:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4299              		.loc 1 2410 0
 4300 000c 224B     		ldr	r3, .L387
 4301 000e 1B68     		ldr	r3, [r3]
 4302 0010 A342     		cmp	r3, r4
 4303 0012 3BD8     		bhi	.L385
 4304 0014 3824     		movs	r4, #56
 4305              	.LVL381:
 4306 0016 0025     		movs	r5, #0
 4307              	.LVL382:
 4308              	.L384:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4309              		.loc 1 2416 0 discriminator 1
 4310 0018 013C     		subs	r4, r4, #1
 4311              	.LVL383:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4312              		.loc 1 2417 0 discriminator 1
 4313 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4314 001e 9800     		lsls	r0, r3, #2
 4315 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4316 0024 9300     		lsls	r3, r2, #2
 4317 0026 0122     		movs	r2, #1
 4318 0028 1C49     		ldr	r1, .L387+4
 4319 002a 1944     		add	r1, r1, r3
 4320 002c 3844     		add	r0, r0, r7
 4321 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4322              	.LVL384:
 4323 0032 0544     		add	r5, r5, r0
 4324              	.LVL385:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4325              		.loc 1 2419 0 discriminator 1
 4326 0034 002C     		cmp	r4, #0
 4327 0036 EFD1     		bne	.L384
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4328              		.loc 1 2423 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 176


 4329 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4330 003c 9800     		lsls	r0, r3, #2
 4331 003e 184B     		ldr	r3, .L387+8
 4332 0040 1968     		ldr	r1, [r3]
 4333 0042 0222     		movs	r2, #2
 4334 0044 3844     		add	r0, r0, r7
 4335 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4336              	.LVL386:
 4337 004a 2C18     		adds	r4, r5, r0
 4338              	.LVL387:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4339              		.loc 1 2424 0
 4340 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4341 0050 9800     		lsls	r0, r3, #2
 4342 0052 144B     		ldr	r3, .L387+12
 4343 0054 1968     		ldr	r1, [r3]
 4344 0056 0222     		movs	r2, #2
 4345 0058 3844     		add	r0, r0, r7
 4346 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4347              	.LVL388:
 4348 005e 0444     		add	r4, r4, r0
 4349              	.LVL389:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4350              		.loc 1 2430 0
 4351 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4352 0064 9800     		lsls	r0, r3, #2
 4353 0066 0422     		movs	r2, #4
 4354 0068 0F49     		ldr	r1, .L387+16
 4355 006a 3844     		add	r0, r0, r7
 4356 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4357              	.LVL390:
 4358 0070 0444     		add	r4, r4, r0
 4359              	.LVL391:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4360              		.loc 1 2438 0
 4361 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4362 0076 9800     		lsls	r0, r3, #2
 4363 0078 0322     		movs	r2, #3
 4364 007a 0C49     		ldr	r1, .L387+20
 4365 007c 3844     		add	r0, r0, r7
 4366 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4367              	.LVL392:
 4368 0082 0444     		add	r4, r4, r0
 4369              	.LVL393:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4370              		.loc 1 2455 0
 4371 0084 1EB1     		cbz	r6, .L383
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4372              		.loc 1 2457 0
 4373 0086 0023     		movs	r3, #0
 4374 0088 3360     		str	r3, [r6]
 4375 008a 00E0     		b	.L383
 4376              	.LVL394:
 4377              	.L385:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4378              		.loc 1 2405 0
 4379 008c 0024     		movs	r4, #0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 177


 4380              	.LVL395:
 4381              	.L383:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4382              		.loc 1 2467 0
 4383 008e FFF7FEFF 		bl	xTaskResumeAll
 4384              	.LVL396:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4385              		.loc 1 2470 0
 4386 0092 2046     		mov	r0, r4
 4387 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4388              	.LVL397:
 4389              	.L388:
 4390 0096 00BF     		.align	2
 4391              	.L387:
 4392 0098 00000000 		.word	.LANCHOR9
 4393 009c 00000000 		.word	.LANCHOR4
 4394 00a0 00000000 		.word	.LANCHOR2
 4395 00a4 00000000 		.word	.LANCHOR8
 4396 00a8 00000000 		.word	.LANCHOR7
 4397 00ac 00000000 		.word	.LANCHOR0
 4398              		.cfi_endproc
 4399              	.LFE27:
 4401              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4402              		.align	2
 4403              		.global	uxTaskGetStackHighWaterMark
 4404              		.thumb
 4405              		.thumb_func
 4407              	uxTaskGetStackHighWaterMark:
 4408              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4409              		.loc 1 3643 0
 4410              		.cfi_startproc
 4411              		@ args = 0, pretend = 0, frame = 0
 4412              		@ frame_needed = 0, uses_anonymous_args = 0
 4413              	.LVL398:
 4414 0000 08B5     		push	{r3, lr}
 4415              	.LCFI42:
 4416              		.cfi_def_cfa_offset 8
 4417              		.cfi_offset 3, -8
 4418              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4419              		.loc 1 3648 0
 4420 0002 0346     		mov	r3, r0
 4421 0004 08B9     		cbnz	r0, .L390
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4422              		.loc 1 3648 0 is_stmt 0 discriminator 1
 4423 0006 034B     		ldr	r3, .L392
 4424 0008 1B68     		ldr	r3, [r3]
 4425              	.LVL399:
 4426              	.L390:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4427              		.loc 1 3660 0 is_stmt 1 discriminator 4
 4428 000a 186B     		ldr	r0, [r3, #48]
 4429 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4430              	.LVL400:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4431              		.loc 1 3663 0 discriminator 4
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 178


 4432 0010 08BD     		pop	{r3, pc}
 4433              	.L393:
 4434 0012 00BF     		.align	2
 4435              	.L392:
 4436 0014 00000000 		.word	.LANCHOR10
 4437              		.cfi_endproc
 4438              	.LFE47:
 4440              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4441              		.align	2
 4442              		.global	xTaskGetCurrentTaskHandle
 4443              		.thumb
 4444              		.thumb_func
 4446              	xTaskGetCurrentTaskHandle:
 4447              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4448              		.loc 1 3751 0
 4449              		.cfi_startproc
 4450              		@ args = 0, pretend = 0, frame = 0
 4451              		@ frame_needed = 0, uses_anonymous_args = 0
 4452              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4453              		.loc 1 3757 0
 4454 0000 014B     		ldr	r3, .L395
 4455 0002 1868     		ldr	r0, [r3]
 4456              	.LVL401:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4457              		.loc 1 3760 0
 4458 0004 7047     		bx	lr
 4459              	.L396:
 4460 0006 00BF     		.align	2
 4461              	.L395:
 4462 0008 00000000 		.word	.LANCHOR10
 4463              		.cfi_endproc
 4464              	.LFE50:
 4466              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4467              		.align	2
 4468              		.global	xTaskGetSchedulerState
 4469              		.thumb
 4470              		.thumb_func
 4472              	xTaskGetSchedulerState:
 4473              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4474              		.loc 1 3768 0
 4475              		.cfi_startproc
 4476              		@ args = 0, pretend = 0, frame = 0
 4477              		@ frame_needed = 0, uses_anonymous_args = 0
 4478              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4479              		.loc 1 3771 0
 4480 0000 054B     		ldr	r3, .L401
 4481 0002 1B68     		ldr	r3, [r3]
 4482 0004 23B1     		cbz	r3, .L399
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4483              		.loc 1 3777 0
 4484 0006 054B     		ldr	r3, .L401+4
 4485 0008 1B68     		ldr	r3, [r3]
 4486 000a 1BB9     		cbnz	r3, .L400
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 179


3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4487              		.loc 1 3779 0
 4488 000c 0220     		movs	r0, #2
 4489 000e 7047     		bx	lr
 4490              	.L399:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4491              		.loc 1 3773 0
 4492 0010 0120     		movs	r0, #1
 4493 0012 7047     		bx	lr
 4494              	.L400:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4495              		.loc 1 3783 0
 4496 0014 0020     		movs	r0, #0
 4497              	.LVL402:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4498              		.loc 1 3788 0
 4499 0016 7047     		bx	lr
 4500              	.L402:
 4501              		.align	2
 4502              	.L401:
 4503 0018 00000000 		.word	.LANCHOR11
 4504 001c 00000000 		.word	.LANCHOR16
 4505              		.cfi_endproc
 4506              	.LFE51:
 4508              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4509              		.align	2
 4510              		.global	xTaskPriorityInherit
 4511              		.thumb
 4512              		.thumb_func
 4514              	xTaskPriorityInherit:
 4515              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4516              		.loc 1 3796 0
 4517              		.cfi_startproc
 4518              		@ args = 0, pretend = 0, frame = 0
 4519              		@ frame_needed = 0, uses_anonymous_args = 0
 4520              	.LVL403:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4521              		.loc 1 3803 0
 4522 0000 0028     		cmp	r0, #0
 4523 0002 43D0     		beq	.L410
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4524              		.loc 1 3796 0
 4525 0004 38B5     		push	{r3, r4, r5, lr}
 4526              	.LCFI43:
 4527              		.cfi_def_cfa_offset 16
 4528              		.cfi_offset 3, -16
 4529              		.cfi_offset 4, -12
 4530              		.cfi_offset 5, -8
 4531              		.cfi_offset 14, -4
 4532 0006 0346     		mov	r3, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4533              		.loc 1 3808 0
 4534 0008 C26A     		ldr	r2, [r0, #44]
 4535 000a 2249     		ldr	r1, .L414
 4536 000c 0968     		ldr	r1, [r1]
 4537 000e C96A     		ldr	r1, [r1, #44]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 180


 4538 0010 8A42     		cmp	r2, r1
 4539 0012 33D2     		bcs	.L405
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4540              		.loc 1 3813 0
 4541 0014 8169     		ldr	r1, [r0, #24]
 4542 0016 0029     		cmp	r1, #0
 4543 0018 05DB     		blt	.L406
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4544              		.loc 1 3815 0
 4545 001a 1E49     		ldr	r1, .L414
 4546 001c 0968     		ldr	r1, [r1]
 4547 001e C96A     		ldr	r1, [r1, #44]
 4548 0020 C1F13801 		rsb	r1, r1, #56
 4549 0024 8161     		str	r1, [r0, #24]
 4550              	.L406:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4551              		.loc 1 3824 0
 4552 0026 5869     		ldr	r0, [r3, #20]
 4553              	.LVL404:
 4554 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4555 002c 9100     		lsls	r1, r2, #2
 4556 002e 1A4A     		ldr	r2, .L414+4
 4557 0030 1144     		add	r1, r1, r2
 4558 0032 8842     		cmp	r0, r1
 4559 0034 01D1     		bne	.L411
 4560 0036 0122     		movs	r2, #1
 4561 0038 00E0     		b	.L407
 4562              	.L411:
 4563 003a 0022     		movs	r2, #0
 4564              	.L407:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4565              		.loc 1 3824 0 is_stmt 0 discriminator 4
 4566 003c C2B1     		cbz	r2, .L408
 4567 003e 1D46     		mov	r5, r3
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4568              		.loc 1 3826 0 is_stmt 1
 4569 0040 1C1D     		adds	r4, r3, #4
 4570 0042 2046     		mov	r0, r4
 4571 0044 FFF7FEFF 		bl	uxListRemove
 4572              	.LVL405:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4573              		.loc 1 3836 0
 4574 0048 124B     		ldr	r3, .L414
 4575 004a 1B68     		ldr	r3, [r3]
 4576 004c DB6A     		ldr	r3, [r3, #44]
 4577 004e EB62     		str	r3, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4578              		.loc 1 3837 0
 4579 0050 124A     		ldr	r2, .L414+8
 4580 0052 1268     		ldr	r2, [r2]
 4581 0054 9342     		cmp	r3, r2
 4582 0056 01D9     		bls	.L409
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4583              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4584 0058 104A     		ldr	r2, .L414+8
 4585 005a 1360     		str	r3, [r2]
 4586              	.L409:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 181


3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4587              		.loc 1 3837 0 discriminator 3
 4588 005c 03EB8303 		add	r3, r3, r3, lsl #2
 4589 0060 9A00     		lsls	r2, r3, #2
 4590 0062 2146     		mov	r1, r4
 4591 0064 0C48     		ldr	r0, .L414+4
 4592 0066 1044     		add	r0, r0, r2
 4593 0068 FFF7FEFF 		bl	vListInsertEnd
 4594              	.LVL406:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4595              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4596 006c 0120     		movs	r0, #1
 4597 006e 38BD     		pop	{r3, r4, r5, pc}
 4598              	.LVL407:
 4599              	.L408:
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4600              		.loc 1 3842 0
 4601 0070 084A     		ldr	r2, .L414
 4602 0072 1268     		ldr	r2, [r2]
 4603 0074 D26A     		ldr	r2, [r2, #44]
 4604 0076 DA62     		str	r2, [r3, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4605              		.loc 1 3848 0
 4606 0078 0120     		movs	r0, #1
 4607 007a 38BD     		pop	{r3, r4, r5, pc}
 4608              	.LVL408:
 4609              	.L405:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4610              		.loc 1 3852 0
 4611 007c C26C     		ldr	r2, [r0, #76]
 4612 007e 054B     		ldr	r3, .L414
 4613 0080 1B68     		ldr	r3, [r3]
 4614 0082 DB6A     		ldr	r3, [r3, #44]
 4615 0084 9A42     		cmp	r2, r3
 4616 0086 03D3     		bcc	.L412
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4617              		.loc 1 3798 0
 4618 0088 0020     		movs	r0, #0
 4619              	.LVL409:
 4620 008a 38BD     		pop	{r3, r4, r5, pc}
 4621              	.LVL410:
 4622              	.L410:
 4623              	.LCFI44:
 4624              		.cfi_def_cfa_offset 0
 4625              		.cfi_restore 3
 4626              		.cfi_restore 4
 4627              		.cfi_restore 5
 4628              		.cfi_restore 14
 4629 008c 0020     		movs	r0, #0
 4630              	.LVL411:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4631              		.loc 1 3875 0
 4632 008e 7047     		bx	lr
 4633              	.LVL412:
 4634              	.L412:
 4635              	.LCFI45:
 4636              		.cfi_def_cfa_offset 16
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 182


 4637              		.cfi_offset 3, -16
 4638              		.cfi_offset 4, -12
 4639              		.cfi_offset 5, -8
 4640              		.cfi_offset 14, -4
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4641              		.loc 1 3861 0
 4642 0090 0120     		movs	r0, #1
 4643              	.LVL413:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4644              		.loc 1 3875 0
 4645 0092 38BD     		pop	{r3, r4, r5, pc}
 4646              	.L415:
 4647              		.align	2
 4648              	.L414:
 4649 0094 00000000 		.word	.LANCHOR10
 4650 0098 00000000 		.word	.LANCHOR4
 4651 009c 00000000 		.word	.LANCHOR13
 4652              		.cfi_endproc
 4653              	.LFE52:
 4655              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4656              		.align	2
 4657              		.global	xTaskPriorityDisinherit
 4658              		.thumb
 4659              		.thumb_func
 4661              	xTaskPriorityDisinherit:
 4662              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4663              		.loc 1 3883 0
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 0
 4666              		@ frame_needed = 0, uses_anonymous_args = 0
 4667              	.LVL414:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4668              		.loc 1 3887 0
 4669 0000 0028     		cmp	r0, #0
 4670 0002 3AD0     		beq	.L423
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4671              		.loc 1 3883 0
 4672 0004 38B5     		push	{r3, r4, r5, lr}
 4673              	.LCFI46:
 4674              		.cfi_def_cfa_offset 16
 4675              		.cfi_offset 3, -16
 4676              		.cfi_offset 4, -12
 4677              		.cfi_offset 5, -8
 4678              		.cfi_offset 14, -4
 4679 0006 0346     		mov	r3, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4680              		.loc 1 3893 0
 4681 0008 1F4A     		ldr	r2, .L427
 4682 000a 1268     		ldr	r2, [r2]
 4683 000c 9042     		cmp	r0, r2
 4684 000e 08D0     		beq	.L418
 4685              	.LBB203:
 4686              	.LBB204:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4687              		.loc 2 195 0
 4688              		.syntax unified
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 183


 4689              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4690 0010 4FF05003 			mov r3, #80												
 4691 0014 83F31188 		msr basepri, r3											
 4692 0018 BFF36F8F 		isb														
 4693 001c BFF34F8F 		dsb														
 4694              	
 4695              	@ 0 "" 2
 4696              	.LVL415:
 4697              		.thumb
 4698              		.syntax unified
 4699              	.L419:
 4700 0020 FEE7     		b	.L419
 4701              	.L418:
 4702              	.LBE204:
 4703              	.LBE203:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4704              		.loc 1 3894 0
 4705 0022 026D     		ldr	r2, [r0, #80]
 4706 0024 42B9     		cbnz	r2, .L420
 4707              	.LBB205:
 4708              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4709              		.loc 2 195 0
 4710              		.syntax unified
 4711              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4712 0026 4FF05003 			mov r3, #80												
 4713 002a 83F31188 		msr basepri, r3											
 4714 002e BFF36F8F 		isb														
 4715 0032 BFF34F8F 		dsb														
 4716              	
 4717              	@ 0 "" 2
 4718              	.LVL416:
 4719              		.thumb
 4720              		.syntax unified
 4721              	.L421:
 4722 0036 FEE7     		b	.L421
 4723              	.L420:
 4724              	.LBE206:
 4725              	.LBE205:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4726              		.loc 1 3895 0
 4727 0038 013A     		subs	r2, r2, #1
 4728 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4729              		.loc 1 3899 0
 4730 003c C06A     		ldr	r0, [r0, #44]
 4731              	.LVL417:
 4732 003e D96C     		ldr	r1, [r3, #76]
 4733 0040 8842     		cmp	r0, r1
 4734 0042 1CD0     		beq	.L424
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4735              		.loc 1 3902 0
 4736 0044 EAB9     		cbnz	r2, .L425
 4737 0046 1C46     		mov	r4, r3
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4738              		.loc 1 3909 0
 4739 0048 1D1D     		adds	r5, r3, #4
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 184


 4740 004a 2846     		mov	r0, r5
 4741 004c FFF7FEFF 		bl	uxListRemove
 4742              	.LVL418:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4743              		.loc 1 3921 0
 4744 0050 E36C     		ldr	r3, [r4, #76]
 4745 0052 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4746              		.loc 1 3926 0
 4747 0054 C3F13802 		rsb	r2, r3, #56
 4748 0058 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4749              		.loc 1 3927 0
 4750 005a 0C4A     		ldr	r2, .L427+4
 4751 005c 1268     		ldr	r2, [r2]
 4752 005e 9342     		cmp	r3, r2
 4753 0060 01D9     		bls	.L422
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4754              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4755 0062 0A4A     		ldr	r2, .L427+4
 4756 0064 1360     		str	r3, [r2]
 4757              	.L422:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4758              		.loc 1 3927 0 discriminator 3
 4759 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4760 006a 9A00     		lsls	r2, r3, #2
 4761 006c 2946     		mov	r1, r5
 4762 006e 0848     		ldr	r0, .L427+8
 4763 0070 1044     		add	r0, r0, r2
 4764 0072 FFF7FEFF 		bl	vListInsertEnd
 4765              	.LVL419:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4766              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4767 0076 0120     		movs	r0, #1
 4768 0078 38BD     		pop	{r3, r4, r5, pc}
 4769              	.LVL420:
 4770              	.L423:
 4771              	.LCFI47:
 4772              		.cfi_def_cfa_offset 0
 4773              		.cfi_restore 3
 4774              		.cfi_restore 4
 4775              		.cfi_restore 5
 4776              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4777              		.loc 1 3885 0
 4778 007a 0020     		movs	r0, #0
 4779              	.LVL421:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4780              		.loc 1 3955 0
 4781 007c 7047     		bx	lr
 4782              	.LVL422:
 4783              	.L424:
 4784              	.LCFI48:
 4785              		.cfi_def_cfa_offset 16
 4786              		.cfi_offset 3, -16
 4787              		.cfi_offset 4, -12
 4788              		.cfi_offset 5, -8
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 185


 4789              		.cfi_offset 14, -4
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4790              		.loc 1 3885 0
 4791 007e 0020     		movs	r0, #0
 4792 0080 38BD     		pop	{r3, r4, r5, pc}
 4793              	.LVL423:
 4794              	.L425:
 4795 0082 0020     		movs	r0, #0
 4796              	.LVL424:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4797              		.loc 1 3955 0
 4798 0084 38BD     		pop	{r3, r4, r5, pc}
 4799              	.LVL425:
 4800              	.L428:
 4801 0086 00BF     		.align	2
 4802              	.L427:
 4803 0088 00000000 		.word	.LANCHOR10
 4804 008c 00000000 		.word	.LANCHOR13
 4805 0090 00000000 		.word	.LANCHOR4
 4806              		.cfi_endproc
 4807              	.LFE53:
 4809              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4810              		.align	2
 4811              		.global	vTaskPriorityDisinheritAfterTimeout
 4812              		.thumb
 4813              		.thumb_func
 4815              	vTaskPriorityDisinheritAfterTimeout:
 4816              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4817              		.loc 1 3963 0
 4818              		.cfi_startproc
 4819              		@ args = 0, pretend = 0, frame = 0
 4820              		@ frame_needed = 0, uses_anonymous_args = 0
 4821              	.LVL426:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4822              		.loc 1 3968 0
 4823 0000 0028     		cmp	r0, #0
 4824 0002 4AD0     		beq	.L441
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4825              		.loc 1 3963 0
 4826 0004 38B5     		push	{r3, r4, r5, lr}
 4827              	.LCFI49:
 4828              		.cfi_def_cfa_offset 16
 4829              		.cfi_offset 3, -16
 4830              		.cfi_offset 4, -12
 4831              		.cfi_offset 5, -8
 4832              		.cfi_offset 14, -4
 4833 0006 0346     		mov	r3, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4834              		.loc 1 3972 0
 4835 0008 006D     		ldr	r0, [r0, #80]
 4836              	.LVL427:
 4837 000a 40B9     		cbnz	r0, .L431
 4838              	.LBB207:
 4839              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4840              		.loc 2 195 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 186


 4841              		.syntax unified
 4842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4843 000c 4FF05003 			mov r3, #80												
 4844 0010 83F31188 		msr basepri, r3											
 4845 0014 BFF36F8F 		isb														
 4846 0018 BFF34F8F 		dsb														
 4847              	
 4848              	@ 0 "" 2
 4849              	.LVL428:
 4850              		.thumb
 4851              		.syntax unified
 4852              	.L432:
 4853 001c FEE7     		b	.L432
 4854              	.LVL429:
 4855              	.L431:
 4856              	.LBE208:
 4857              	.LBE207:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4858              		.loc 1 3978 0
 4859 001e DA6C     		ldr	r2, [r3, #76]
 4860 0020 8A42     		cmp	r2, r1
 4861 0022 00D2     		bcs	.L433
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4862              		.loc 1 3980 0
 4863 0024 0A46     		mov	r2, r1
 4864              	.L433:
 4865              	.LVL430:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4866              		.loc 1 3988 0
 4867 0026 D96A     		ldr	r1, [r3, #44]
 4868              	.LVL431:
 4869 0028 8A42     		cmp	r2, r1
 4870 002a 35D0     		beq	.L429
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4871              		.loc 1 3994 0
 4872 002c 0128     		cmp	r0, #1
 4873 002e 33D1     		bne	.L429
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4874              		.loc 1 3999 0
 4875 0030 1A48     		ldr	r0, .L442
 4876 0032 0068     		ldr	r0, [r0]
 4877 0034 8342     		cmp	r3, r0
 4878 0036 08D1     		bne	.L434
 4879              	.LBB209:
 4880              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4881              		.loc 2 195 0
 4882              		.syntax unified
 4883              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4884 0038 4FF05003 			mov r3, #80												
 4885 003c 83F31188 		msr basepri, r3											
 4886 0040 BFF36F8F 		isb														
 4887 0044 BFF34F8F 		dsb														
 4888              	
 4889              	@ 0 "" 2
 4890              	.LVL432:
 4891              		.thumb
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 187


 4892              		.syntax unified
 4893              	.L435:
 4894 0048 FEE7     		b	.L435
 4895              	.LVL433:
 4896              	.L434:
 4897              	.LBE210:
 4898              	.LBE209:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4899              		.loc 1 4006 0
 4900 004a DA62     		str	r2, [r3, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4901              		.loc 1 4010 0
 4902 004c 9869     		ldr	r0, [r3, #24]
 4903 004e 0028     		cmp	r0, #0
 4904 0050 02DB     		blt	.L436
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4905              		.loc 1 4012 0
 4906 0052 C2F13802 		rsb	r2, r2, #56
 4907              	.LVL434:
 4908 0056 9A61     		str	r2, [r3, #24]
 4909              	.L436:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4910              		.loc 1 4025 0
 4911 0058 5869     		ldr	r0, [r3, #20]
 4912 005a 01EB8101 		add	r1, r1, r1, lsl #2
 4913              	.LVL435:
 4914 005e 8A00     		lsls	r2, r1, #2
 4915 0060 0F49     		ldr	r1, .L442+4
 4916 0062 0A44     		add	r2, r2, r1
 4917 0064 9042     		cmp	r0, r2
 4918 0066 01D1     		bne	.L439
 4919 0068 0122     		movs	r2, #1
 4920 006a 00E0     		b	.L437
 4921              	.L439:
 4922 006c 0022     		movs	r2, #0
 4923              	.L437:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4924              		.loc 1 4025 0 is_stmt 0 discriminator 4
 4925 006e 9AB1     		cbz	r2, .L429
 4926 0070 1C46     		mov	r4, r3
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4927              		.loc 1 4027 0 is_stmt 1
 4928 0072 1D1D     		adds	r5, r3, #4
 4929 0074 2846     		mov	r0, r5
 4930 0076 FFF7FEFF 		bl	uxListRemove
 4931              	.LVL436:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4932              		.loc 1 4036 0
 4933 007a E36A     		ldr	r3, [r4, #44]
 4934 007c 094A     		ldr	r2, .L442+8
 4935 007e 1268     		ldr	r2, [r2]
 4936 0080 9342     		cmp	r3, r2
 4937 0082 01D9     		bls	.L438
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4938              		.loc 1 4036 0 is_stmt 0 discriminator 1
 4939 0084 074A     		ldr	r2, .L442+8
 4940 0086 1360     		str	r3, [r2]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 188


 4941              	.L438:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4942              		.loc 1 4036 0 discriminator 3
 4943 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4944 008c 9A00     		lsls	r2, r3, #2
 4945 008e 2946     		mov	r1, r5
 4946 0090 0348     		ldr	r0, .L442+4
 4947 0092 1044     		add	r0, r0, r2
 4948 0094 FFF7FEFF 		bl	vListInsertEnd
 4949              	.LVL437:
 4950              	.L429:
 4951 0098 38BD     		pop	{r3, r4, r5, pc}
 4952              	.LVL438:
 4953              	.L441:
 4954              	.LCFI50:
 4955              		.cfi_def_cfa_offset 0
 4956              		.cfi_restore 3
 4957              		.cfi_restore 4
 4958              		.cfi_restore 5
 4959              		.cfi_restore 14
 4960 009a 7047     		bx	lr
 4961              	.L443:
 4962              		.align	2
 4963              	.L442:
 4964 009c 00000000 		.word	.LANCHOR10
 4965 00a0 00000000 		.word	.LANCHOR4
 4966 00a4 00000000 		.word	.LANCHOR13
 4967              		.cfi_endproc
 4968              	.LFE54:
 4970              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4971              		.align	2
 4972              		.global	uxTaskResetEventItemValue
 4973              		.thumb
 4974              		.thumb_func
 4976              	uxTaskResetEventItemValue:
 4977              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4978              		.loc 1 4377 0 is_stmt 1
 4979              		.cfi_startproc
 4980              		@ args = 0, pretend = 0, frame = 0
 4981              		@ frame_needed = 0, uses_anonymous_args = 0
 4982              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4983              		.loc 1 4380 0
 4984 0000 044B     		ldr	r3, .L445
 4985 0002 1A68     		ldr	r2, [r3]
 4986 0004 9069     		ldr	r0, [r2, #24]
 4987              	.LVL439:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4988              		.loc 1 4384 0
 4989 0006 1A68     		ldr	r2, [r3]
 4990 0008 1B68     		ldr	r3, [r3]
 4991 000a DB6A     		ldr	r3, [r3, #44]
 4992 000c C3F13803 		rsb	r3, r3, #56
 4993 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4994              		.loc 1 4387 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 189


 4995 0012 7047     		bx	lr
 4996              	.L446:
 4997              		.align	2
 4998              	.L445:
 4999 0014 00000000 		.word	.LANCHOR10
 5000              		.cfi_endproc
 5001              	.LFE55:
 5003              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5004              		.align	2
 5005              		.global	pvTaskIncrementMutexHeldCount
 5006              		.thumb
 5007              		.thumb_func
 5009              	pvTaskIncrementMutexHeldCount:
 5010              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5011              		.loc 1 4393 0
 5012              		.cfi_startproc
 5013              		@ args = 0, pretend = 0, frame = 0
 5014              		@ frame_needed = 0, uses_anonymous_args = 0
 5015              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5016              		.loc 1 4396 0
 5017 0000 054B     		ldr	r3, .L449
 5018 0002 1B68     		ldr	r3, [r3]
 5019 0004 23B1     		cbz	r3, .L448
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5020              		.loc 1 4398 0
 5021 0006 044B     		ldr	r3, .L449
 5022 0008 1A68     		ldr	r2, [r3]
 5023 000a 136D     		ldr	r3, [r2, #80]
 5024 000c 0133     		adds	r3, r3, #1
 5025 000e 1365     		str	r3, [r2, #80]
 5026              	.L448:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5027              		.loc 1 4401 0
 5028 0010 014B     		ldr	r3, .L449
 5029 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5030              		.loc 1 4402 0
 5031 0014 7047     		bx	lr
 5032              	.L450:
 5033 0016 00BF     		.align	2
 5034              	.L449:
 5035 0018 00000000 		.word	.LANCHOR10
 5036              		.cfi_endproc
 5037              	.LFE56:
 5039              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5040              		.align	2
 5041              		.global	ulTaskNotifyTake
 5042              		.thumb
 5043              		.thumb_func
 5045              	ulTaskNotifyTake:
 5046              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5047              		.loc 1 4410 0
 5048              		.cfi_startproc
 5049              		@ args = 0, pretend = 0, frame = 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 190


 5050              		@ frame_needed = 0, uses_anonymous_args = 0
 5051              	.LVL440:
 5052 0000 38B5     		push	{r3, r4, r5, lr}
 5053              	.LCFI51:
 5054              		.cfi_def_cfa_offset 16
 5055              		.cfi_offset 3, -16
 5056              		.cfi_offset 4, -12
 5057              		.cfi_offset 5, -8
 5058              		.cfi_offset 14, -4
 5059 0002 0546     		mov	r5, r0
 5060 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5061              		.loc 1 4413 0
 5062 0006 FFF7FEFF 		bl	vPortEnterCritical
 5063              	.LVL441:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5064              		.loc 1 4416 0
 5065 000a 184B     		ldr	r3, .L456
 5066 000c 1B68     		ldr	r3, [r3]
 5067 000e 5B6D     		ldr	r3, [r3, #84]
 5068 0010 8BB9     		cbnz	r3, .L452
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5069              		.loc 1 4419 0
 5070 0012 164B     		ldr	r3, .L456
 5071 0014 1B68     		ldr	r3, [r3]
 5072 0016 0122     		movs	r2, #1
 5073 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5074              		.loc 1 4421 0
 5075 001c 5CB1     		cbz	r4, .L452
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5076              		.loc 1 4423 0
 5077 001e 1146     		mov	r1, r2
 5078 0020 2046     		mov	r0, r4
 5079 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5080              	.LVL442:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5081              		.loc 1 4430 0
 5082 0026 4FF08052 		mov	r2, #268435456
 5083 002a 114B     		ldr	r3, .L456+4
 5084 002c 1A60     		str	r2, [r3]
 5085              		.syntax unified
 5086              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5087 002e BFF34F8F 		dsb
 5088              	@ 0 "" 2
 5089              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5090 0032 BFF36F8F 		isb
 5091              	@ 0 "" 2
 5092              		.thumb
 5093              		.syntax unified
 5094              	.L452:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5095              		.loc 1 4442 0
 5096 0036 FFF7FEFF 		bl	vPortExitCritical
 5097              	.LVL443:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5098              		.loc 1 4444 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 191


 5099 003a FFF7FEFF 		bl	vPortEnterCritical
 5100              	.LVL444:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5101              		.loc 1 4447 0
 5102 003e 0B4B     		ldr	r3, .L456
 5103 0040 1B68     		ldr	r3, [r3]
 5104 0042 5C6D     		ldr	r4, [r3, #84]
 5105              	.LVL445:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5106              		.loc 1 4449 0
 5107 0044 4CB1     		cbz	r4, .L453
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5108              		.loc 1 4451 0
 5109 0046 25B1     		cbz	r5, .L454
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5110              		.loc 1 4453 0
 5111 0048 084B     		ldr	r3, .L456
 5112 004a 1B68     		ldr	r3, [r3]
 5113 004c 0022     		movs	r2, #0
 5114 004e 5A65     		str	r2, [r3, #84]
 5115 0050 03E0     		b	.L453
 5116              	.L454:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5117              		.loc 1 4457 0
 5118 0052 064B     		ldr	r3, .L456
 5119 0054 1B68     		ldr	r3, [r3]
 5120 0056 621E     		subs	r2, r4, #1
 5121 0058 5A65     		str	r2, [r3, #84]
 5122              	.L453:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5123              		.loc 1 4465 0
 5124 005a 044B     		ldr	r3, .L456
 5125 005c 1B68     		ldr	r3, [r3]
 5126 005e 0022     		movs	r2, #0
 5127 0060 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5128              		.loc 1 4467 0
 5129 0064 FFF7FEFF 		bl	vPortExitCritical
 5130              	.LVL446:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5131              		.loc 1 4470 0
 5132 0068 2046     		mov	r0, r4
 5133 006a 38BD     		pop	{r3, r4, r5, pc}
 5134              	.LVL447:
 5135              	.L457:
 5136              		.align	2
 5137              	.L456:
 5138 006c 00000000 		.word	.LANCHOR10
 5139 0070 04ED00E0 		.word	-536810236
 5140              		.cfi_endproc
 5141              	.LFE57:
 5143              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5144              		.align	2
 5145              		.global	xTaskNotifyWait
 5146              		.thumb
 5147              		.thumb_func
 5149              	xTaskNotifyWait:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 192


 5150              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5151              		.loc 1 4478 0
 5152              		.cfi_startproc
 5153              		@ args = 0, pretend = 0, frame = 0
 5154              		@ frame_needed = 0, uses_anonymous_args = 0
 5155              	.LVL448:
 5156 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5157              	.LCFI52:
 5158              		.cfi_def_cfa_offset 24
 5159              		.cfi_offset 3, -24
 5160              		.cfi_offset 4, -20
 5161              		.cfi_offset 5, -16
 5162              		.cfi_offset 6, -12
 5163              		.cfi_offset 7, -8
 5164              		.cfi_offset 14, -4
 5165 0002 0746     		mov	r7, r0
 5166 0004 0D46     		mov	r5, r1
 5167 0006 1446     		mov	r4, r2
 5168 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5169              		.loc 1 4481 0
 5170 000a FFF7FEFF 		bl	vPortEnterCritical
 5171              	.LVL449:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5172              		.loc 1 4484 0
 5173 000e 204B     		ldr	r3, .L464
 5174 0010 1B68     		ldr	r3, [r3]
 5175 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5176 0016 DBB2     		uxtb	r3, r3
 5177 0018 022B     		cmp	r3, #2
 5178 001a 16D0     		beq	.L459
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5179              		.loc 1 4489 0
 5180 001c 1C4B     		ldr	r3, .L464
 5181 001e 1A68     		ldr	r2, [r3]
 5182 0020 506D     		ldr	r0, [r2, #84]
 5183 0022 20EA0700 		bic	r0, r0, r7
 5184 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5185              		.loc 1 4492 0
 5186 0028 1B68     		ldr	r3, [r3]
 5187 002a 0122     		movs	r2, #1
 5188 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5189              		.loc 1 4494 0
 5190 0030 5EB1     		cbz	r6, .L459
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5191              		.loc 1 4496 0
 5192 0032 1146     		mov	r1, r2
 5193 0034 3046     		mov	r0, r6
 5194 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5195              	.LVL450:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5196              		.loc 1 4503 0
 5197 003a 4FF08052 		mov	r2, #268435456
 5198 003e 154B     		ldr	r3, .L464+4
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 193


 5199 0040 1A60     		str	r2, [r3]
 5200              		.syntax unified
 5201              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5202 0042 BFF34F8F 		dsb
 5203              	@ 0 "" 2
 5204              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5205 0046 BFF36F8F 		isb
 5206              	@ 0 "" 2
 5207              		.thumb
 5208              		.syntax unified
 5209              	.L459:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5210              		.loc 1 4515 0
 5211 004a FFF7FEFF 		bl	vPortExitCritical
 5212              	.LVL451:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5213              		.loc 1 4517 0
 5214 004e FFF7FEFF 		bl	vPortEnterCritical
 5215              	.LVL452:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5216              		.loc 1 4521 0
 5217 0052 1CB1     		cbz	r4, .L460
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5218              		.loc 1 4525 0
 5219 0054 0E4B     		ldr	r3, .L464
 5220 0056 1B68     		ldr	r3, [r3]
 5221 0058 5B6D     		ldr	r3, [r3, #84]
 5222 005a 2360     		str	r3, [r4]
 5223              	.L460:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5224              		.loc 1 4532 0
 5225 005c 0C4B     		ldr	r3, .L464
 5226 005e 1B68     		ldr	r3, [r3]
 5227 0060 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5228 0064 DBB2     		uxtb	r3, r3
 5229 0066 022B     		cmp	r3, #2
 5230 0068 07D1     		bne	.L462
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5231              		.loc 1 4541 0
 5232 006a 094B     		ldr	r3, .L464
 5233 006c 1A68     		ldr	r2, [r3]
 5234 006e 536D     		ldr	r3, [r2, #84]
 5235 0070 23EA0505 		bic	r5, r3, r5
 5236              	.LVL453:
 5237 0074 5565     		str	r5, [r2, #84]
 5238              	.LVL454:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5239              		.loc 1 4542 0
 5240 0076 0124     		movs	r4, #1
 5241              	.LVL455:
 5242 0078 00E0     		b	.L461
 5243              	.LVL456:
 5244              	.L462:
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5245              		.loc 1 4535 0
 5246 007a 0024     		movs	r4, #0
 5247              	.LVL457:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 194


 5248              	.L461:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5249              		.loc 1 4545 0
 5250 007c 044B     		ldr	r3, .L464
 5251 007e 1B68     		ldr	r3, [r3]
 5252 0080 0022     		movs	r2, #0
 5253 0082 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5254              		.loc 1 4547 0
 5255 0086 FFF7FEFF 		bl	vPortExitCritical
 5256              	.LVL458:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5257              		.loc 1 4550 0
 5258 008a 2046     		mov	r0, r4
 5259 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5260              	.LVL459:
 5261              	.L465:
 5262 008e 00BF     		.align	2
 5263              	.L464:
 5264 0090 00000000 		.word	.LANCHOR10
 5265 0094 04ED00E0 		.word	-536810236
 5266              		.cfi_endproc
 5267              	.LFE58:
 5269              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5270              		.align	2
 5271              		.global	xTaskGenericNotify
 5272              		.thumb
 5273              		.thumb_func
 5275              	xTaskGenericNotify:
 5276              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5277              		.loc 1 4558 0
 5278              		.cfi_startproc
 5279              		@ args = 0, pretend = 0, frame = 0
 5280              		@ frame_needed = 0, uses_anonymous_args = 0
 5281              	.LVL460:
 5282 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5283              	.LCFI53:
 5284              		.cfi_def_cfa_offset 24
 5285              		.cfi_offset 3, -24
 5286              		.cfi_offset 4, -20
 5287              		.cfi_offset 5, -16
 5288              		.cfi_offset 6, -12
 5289              		.cfi_offset 7, -8
 5290              		.cfi_offset 14, -4
 5291              	.LVL461:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5292              		.loc 1 4563 0
 5293 0002 40B9     		cbnz	r0, .L467
 5294              	.LBB211:
 5295              	.LBB212:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5296              		.loc 2 195 0
 5297              		.syntax unified
 5298              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5299 0004 4FF05003 			mov r3, #80												
 5300 0008 83F31188 		msr basepri, r3											
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 195


 5301 000c BFF36F8F 		isb														
 5302 0010 BFF34F8F 		dsb														
 5303              	
 5304              	@ 0 "" 2
 5305              	.LVL462:
 5306              		.thumb
 5307              		.syntax unified
 5308              	.L468:
 5309 0014 FEE7     		b	.L468
 5310              	.LVL463:
 5311              	.L467:
 5312 0016 0446     		mov	r4, r0
 5313 0018 1F46     		mov	r7, r3
 5314 001a 1546     		mov	r5, r2
 5315 001c 0E46     		mov	r6, r1
 5316              	.LVL464:
 5317              	.LBE212:
 5318              	.LBE211:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5319              		.loc 1 4566 0
 5320 001e FFF7FEFF 		bl	vPortEnterCritical
 5321              	.LVL465:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5322              		.loc 1 4568 0
 5323 0022 0FB1     		cbz	r7, .L469
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5324              		.loc 1 4570 0
 5325 0024 636D     		ldr	r3, [r4, #84]
 5326 0026 3B60     		str	r3, [r7]
 5327              	.L469:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5328              		.loc 1 4573 0
 5329 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5330 002c DBB2     		uxtb	r3, r3
 5331              	.LVL466:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5332              		.loc 1 4575 0
 5333 002e 0222     		movs	r2, #2
 5334 0030 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5335              		.loc 1 4577 0
 5336 0034 6A1E     		subs	r2, r5, #1
 5337 0036 032A     		cmp	r2, #3
 5338 0038 15D8     		bhi	.L480
 5339 003a DFE802F0 		tbb	[pc, r2]
 5340              	.L472:
 5341 003e 02       		.byte	(.L471-.L472)/2
 5342 003f 07       		.byte	(.L473-.L472)/2
 5343 0040 0C       		.byte	(.L474-.L472)/2
 5344 0041 0F       		.byte	(.L475-.L472)/2
 5345              		.p2align 1
 5346              	.L471:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5347              		.loc 1 4580 0
 5348 0042 626D     		ldr	r2, [r4, #84]
 5349 0044 1643     		orrs	r6, r6, r2
 5350              	.LVL467:
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 196


 5351 0046 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5352              		.loc 1 4560 0
 5353 0048 0125     		movs	r5, #1
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5354              		.loc 1 4581 0
 5355 004a 0FE0     		b	.L470
 5356              	.LVL468:
 5357              	.L473:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5358              		.loc 1 4584 0
 5359 004c 626D     		ldr	r2, [r4, #84]
 5360 004e 0132     		adds	r2, r2, #1
 5361 0050 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5362              		.loc 1 4560 0
 5363 0052 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5364              		.loc 1 4585 0
 5365 0054 0AE0     		b	.L470
 5366              	.L474:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5367              		.loc 1 4588 0
 5368 0056 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5369              		.loc 1 4560 0
 5370 0058 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5371              		.loc 1 4589 0
 5372 005a 07E0     		b	.L470
 5373              	.L475:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5374              		.loc 1 4592 0
 5375 005c 022B     		cmp	r3, #2
 5376 005e 04D0     		beq	.L481
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5377              		.loc 1 4594 0
 5378 0060 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5379              		.loc 1 4560 0
 5380 0062 0125     		movs	r5, #1
 5381 0064 02E0     		b	.L470
 5382              	.L480:
 5383 0066 0125     		movs	r5, #1
 5384 0068 00E0     		b	.L470
 5385              	.L481:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5386              		.loc 1 4599 0
 5387 006a 0025     		movs	r5, #0
 5388              	.LVL469:
 5389              	.L470:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5390              		.loc 1 4613 0
 5391 006c 012B     		cmp	r3, #1
 5392 006e 2BD1     		bne	.L476
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5393              		.loc 1 4615 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 197


 5394 0070 261D     		adds	r6, r4, #4
 5395 0072 3046     		mov	r0, r6
 5396 0074 FFF7FEFF 		bl	uxListRemove
 5397              	.LVL470:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5398              		.loc 1 4616 0
 5399 0078 E36A     		ldr	r3, [r4, #44]
 5400 007a 154A     		ldr	r2, .L483
 5401 007c 1268     		ldr	r2, [r2]
 5402 007e 9342     		cmp	r3, r2
 5403 0080 01D9     		bls	.L477
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5404              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5405 0082 134A     		ldr	r2, .L483
 5406 0084 1360     		str	r3, [r2]
 5407              	.L477:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5408              		.loc 1 4616 0 discriminator 3
 5409 0086 03EB8303 		add	r3, r3, r3, lsl #2
 5410 008a 9A00     		lsls	r2, r3, #2
 5411 008c 3146     		mov	r1, r6
 5412 008e 1148     		ldr	r0, .L483+4
 5413 0090 1044     		add	r0, r0, r2
 5414 0092 FFF7FEFF 		bl	vListInsertEnd
 5415              	.LVL471:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5416              		.loc 1 4619 0 is_stmt 1 discriminator 3
 5417 0096 A36A     		ldr	r3, [r4, #40]
 5418 0098 43B1     		cbz	r3, .L478
 5419              	.LBB213:
 5420              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5421              		.loc 2 195 0
 5422              		.syntax unified
 5423              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5424 009a 4FF05003 			mov r3, #80												
 5425 009e 83F31188 		msr basepri, r3											
 5426 00a2 BFF36F8F 		isb														
 5427 00a6 BFF34F8F 		dsb														
 5428              	
 5429              	@ 0 "" 2
 5430              	.LVL472:
 5431              		.thumb
 5432              		.syntax unified
 5433              	.L479:
 5434 00aa FEE7     		b	.L479
 5435              	.L478:
 5436              	.LBE214:
 5437              	.LBE213:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5438              		.loc 1 4637 0
 5439 00ac E26A     		ldr	r2, [r4, #44]
 5440 00ae 0A4B     		ldr	r3, .L483+8
 5441 00b0 1B68     		ldr	r3, [r3]
 5442 00b2 DB6A     		ldr	r3, [r3, #44]
 5443 00b4 9A42     		cmp	r2, r3
 5444 00b6 07D9     		bls	.L476
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 198


4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5445              		.loc 1 4641 0
 5446 00b8 4FF08052 		mov	r2, #268435456
 5447 00bc 074B     		ldr	r3, .L483+12
 5448 00be 1A60     		str	r2, [r3]
 5449              		.syntax unified
 5450              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5451 00c0 BFF34F8F 		dsb
 5452              	@ 0 "" 2
 5453              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5454 00c4 BFF36F8F 		isb
 5455              	@ 0 "" 2
 5456              		.thumb
 5457              		.syntax unified
 5458              	.L476:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5459              		.loc 1 4653 0
 5460 00c8 FFF7FEFF 		bl	vPortExitCritical
 5461              	.LVL473:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5462              		.loc 1 4656 0
 5463 00cc 2846     		mov	r0, r5
 5464 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5465              	.LVL474:
 5466              	.L484:
 5467              		.align	2
 5468              	.L483:
 5469 00d0 00000000 		.word	.LANCHOR13
 5470 00d4 00000000 		.word	.LANCHOR4
 5471 00d8 00000000 		.word	.LANCHOR10
 5472 00dc 04ED00E0 		.word	-536810236
 5473              		.cfi_endproc
 5474              	.LFE59:
 5476              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5477              		.align	2
 5478              		.global	xTaskGenericNotifyFromISR
 5479              		.thumb
 5480              		.thumb_func
 5482              	xTaskGenericNotifyFromISR:
 5483              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5484              		.loc 1 4664 0
 5485              		.cfi_startproc
 5486              		@ args = 4, pretend = 0, frame = 0
 5487              		@ frame_needed = 0, uses_anonymous_args = 0
 5488              	.LVL475:
 5489 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5490              	.LCFI54:
 5491              		.cfi_def_cfa_offset 32
 5492              		.cfi_offset 3, -32
 5493              		.cfi_offset 4, -28
 5494              		.cfi_offset 5, -24
 5495              		.cfi_offset 6, -20
 5496              		.cfi_offset 7, -16
 5497              		.cfi_offset 8, -12
 5498              		.cfi_offset 9, -8
 5499              		.cfi_offset 14, -4
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 199


 5500 0004 089E     		ldr	r6, [sp, #32]
 5501              	.LVL476:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5502              		.loc 1 4670 0
 5503 0006 40B9     		cbnz	r0, .L486
 5504              	.LBB215:
 5505              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5506              		.loc 2 195 0
 5507              		.syntax unified
 5508              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5509 0008 4FF05003 			mov r3, #80												
 5510 000c 83F31188 		msr basepri, r3											
 5511 0010 BFF36F8F 		isb														
 5512 0014 BFF34F8F 		dsb														
 5513              	
 5514              	@ 0 "" 2
 5515              	.LVL477:
 5516              		.thumb
 5517              		.syntax unified
 5518              	.L487:
 5519 0018 FEE7     		b	.L487
 5520              	.LVL478:
 5521              	.L486:
 5522 001a 0446     		mov	r4, r0
 5523 001c 9946     		mov	r9, r3
 5524 001e 1546     		mov	r5, r2
 5525 0020 8846     		mov	r8, r1
 5526              	.LBE216:
 5527              	.LBE215:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5528              		.loc 1 4688 0
 5529 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5530              	.LVL479:
 5531              	.LBB217:
 5532              	.LBB218:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5533              		.loc 2 211 0
 5534              		.syntax unified
 5535              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5536 0026 EFF31187 			mrs r7, basepri											
 5537 002a 4FF05003 		mov r3, #80												
 5538 002e 83F31188 		msr basepri, r3											
 5539 0032 BFF36F8F 		isb														
 5540 0036 BFF34F8F 		dsb														
 5541              	
 5542              	@ 0 "" 2
 5543              		.thumb
 5544              		.syntax unified
 5545              	.LBE218:
 5546              	.LBE217:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5547              		.loc 1 4694 0
 5548 003a B9F1000F 		cmp	r9, #0
 5549 003e 02D0     		beq	.L488
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5550              		.loc 1 4696 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 200


 5551 0040 636D     		ldr	r3, [r4, #84]
 5552 0042 C9F80030 		str	r3, [r9]
 5553              	.L488:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5554              		.loc 1 4699 0
 5555 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5556 004a DBB2     		uxtb	r3, r3
 5557              	.LVL480:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5558              		.loc 1 4700 0
 5559 004c 0222     		movs	r2, #2
 5560 004e 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5561              		.loc 1 4702 0
 5562 0052 6A1E     		subs	r2, r5, #1
 5563 0054 032A     		cmp	r2, #3
 5564 0056 18D8     		bhi	.L502
 5565 0058 DFE802F0 		tbb	[pc, r2]
 5566              	.L491:
 5567 005c 02       		.byte	(.L490-.L491)/2
 5568 005d 08       		.byte	(.L492-.L491)/2
 5569 005e 0D       		.byte	(.L493-.L491)/2
 5570 005f 11       		.byte	(.L494-.L491)/2
 5571              		.p2align 1
 5572              	.L490:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5573              		.loc 1 4705 0
 5574 0060 626D     		ldr	r2, [r4, #84]
 5575 0062 42EA0802 		orr	r2, r2, r8
 5576 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5577              		.loc 1 4667 0
 5578 0068 0125     		movs	r5, #1
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5579              		.loc 1 4706 0
 5580 006a 11E0     		b	.L489
 5581              	.L492:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5582              		.loc 1 4709 0
 5583 006c 626D     		ldr	r2, [r4, #84]
 5584 006e 0132     		adds	r2, r2, #1
 5585 0070 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5586              		.loc 1 4667 0
 5587 0072 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5588              		.loc 1 4710 0
 5589 0074 0CE0     		b	.L489
 5590              	.L493:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5591              		.loc 1 4713 0
 5592 0076 C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5593              		.loc 1 4667 0
 5594 007a 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5595              		.loc 1 4714 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 201


 5596 007c 08E0     		b	.L489
 5597              	.L494:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5598              		.loc 1 4717 0
 5599 007e 022B     		cmp	r3, #2
 5600 0080 05D0     		beq	.L503
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5601              		.loc 1 4719 0
 5602 0082 C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5603              		.loc 1 4667 0
 5604 0086 0125     		movs	r5, #1
 5605 0088 02E0     		b	.L489
 5606              	.L502:
 5607 008a 0125     		movs	r5, #1
 5608 008c 00E0     		b	.L489
 5609              	.L503:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5610              		.loc 1 4724 0
 5611 008e 0025     		movs	r5, #0
 5612              	.L489:
 5613              	.LVL481:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5614              		.loc 1 4738 0
 5615 0090 012B     		cmp	r3, #1
 5616 0092 34D1     		bne	.L495
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5617              		.loc 1 4741 0
 5618 0094 A36A     		ldr	r3, [r4, #40]
 5619              	.LVL482:
 5620 0096 43B1     		cbz	r3, .L496
 5621              	.LBB219:
 5622              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5623              		.loc 2 195 0
 5624              		.syntax unified
 5625              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5626 0098 4FF05003 			mov r3, #80												
 5627 009c 83F31188 		msr basepri, r3											
 5628 00a0 BFF36F8F 		isb														
 5629 00a4 BFF34F8F 		dsb														
 5630              	
 5631              	@ 0 "" 2
 5632              	.LVL483:
 5633              		.thumb
 5634              		.syntax unified
 5635              	.L497:
 5636 00a8 FEE7     		b	.L497
 5637              	.L496:
 5638              	.LBE220:
 5639              	.LBE219:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5640              		.loc 1 4743 0
 5641 00aa 174B     		ldr	r3, .L505
 5642 00ac 1B68     		ldr	r3, [r3]
 5643 00ae A3B9     		cbnz	r3, .L498
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 202


 5644              		.loc 1 4745 0
 5645 00b0 04F10408 		add	r8, r4, #4
 5646              	.LVL484:
 5647 00b4 4046     		mov	r0, r8
 5648 00b6 FFF7FEFF 		bl	uxListRemove
 5649              	.LVL485:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5650              		.loc 1 4746 0
 5651 00ba E36A     		ldr	r3, [r4, #44]
 5652 00bc 134A     		ldr	r2, .L505+4
 5653 00be 1268     		ldr	r2, [r2]
 5654 00c0 9342     		cmp	r3, r2
 5655 00c2 01D9     		bls	.L499
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5656              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5657 00c4 114A     		ldr	r2, .L505+4
 5658 00c6 1360     		str	r3, [r2]
 5659              	.L499:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5660              		.loc 1 4746 0 discriminator 3
 5661 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 5662 00cc 9A00     		lsls	r2, r3, #2
 5663 00ce 4146     		mov	r1, r8
 5664 00d0 0F48     		ldr	r0, .L505+8
 5665 00d2 1044     		add	r0, r0, r2
 5666 00d4 FFF7FEFF 		bl	vListInsertEnd
 5667              	.LVL486:
 5668 00d8 04E0     		b	.L500
 5669              	.LVL487:
 5670              	.L498:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5671              		.loc 1 4752 0 is_stmt 1
 5672 00da 04F11801 		add	r1, r4, #24
 5673 00de 0D48     		ldr	r0, .L505+12
 5674 00e0 FFF7FEFF 		bl	vListInsertEnd
 5675              	.LVL488:
 5676              	.L500:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5677              		.loc 1 4755 0
 5678 00e4 E26A     		ldr	r2, [r4, #44]
 5679 00e6 0C4B     		ldr	r3, .L505+16
 5680 00e8 1B68     		ldr	r3, [r3]
 5681 00ea DB6A     		ldr	r3, [r3, #44]
 5682 00ec 9A42     		cmp	r2, r3
 5683 00ee 06D9     		bls	.L495
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5684              		.loc 1 4759 0
 5685 00f0 16B1     		cbz	r6, .L501
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5686              		.loc 1 4761 0
 5687 00f2 0123     		movs	r3, #1
 5688 00f4 3360     		str	r3, [r6]
 5689 00f6 02E0     		b	.L495
 5690              	.L501:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5691              		.loc 1 4768 0
 5692 00f8 0122     		movs	r2, #1
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 203


 5693 00fa 084B     		ldr	r3, .L505+20
 5694 00fc 1A60     		str	r2, [r3]
 5695              	.L495:
 5696              	.LVL489:
 5697              	.LBB221:
 5698              	.LBB222:
 5699              		.loc 2 229 0
 5700              		.syntax unified
 5701              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5702 00fe 87F31188 			msr basepri, r7	
 5703              	@ 0 "" 2
 5704              	.LVL490:
 5705              		.thumb
 5706              		.syntax unified
 5707              	.LBE222:
 5708              	.LBE221:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5709              		.loc 1 4780 0
 5710 0102 2846     		mov	r0, r5
 5711 0104 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5712              	.LVL491:
 5713              	.L506:
 5714              		.align	2
 5715              	.L505:
 5716 0108 00000000 		.word	.LANCHOR16
 5717 010c 00000000 		.word	.LANCHOR13
 5718 0110 00000000 		.word	.LANCHOR4
 5719 0114 00000000 		.word	.LANCHOR1
 5720 0118 00000000 		.word	.LANCHOR10
 5721 011c 00000000 		.word	.LANCHOR19
 5722              		.cfi_endproc
 5723              	.LFE60:
 5725              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5726              		.align	2
 5727              		.global	vTaskNotifyGiveFromISR
 5728              		.thumb
 5729              		.thumb_func
 5731              	vTaskNotifyGiveFromISR:
 5732              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5733              		.loc 1 4788 0
 5734              		.cfi_startproc
 5735              		@ args = 0, pretend = 0, frame = 0
 5736              		@ frame_needed = 0, uses_anonymous_args = 0
 5737              	.LVL492:
 5738 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5739              	.LCFI55:
 5740              		.cfi_def_cfa_offset 24
 5741              		.cfi_offset 3, -24
 5742              		.cfi_offset 4, -20
 5743              		.cfi_offset 5, -16
 5744              		.cfi_offset 6, -12
 5745              		.cfi_offset 7, -8
 5746              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5747              		.loc 1 4793 0
 5748 0002 40B9     		cbnz	r0, .L508
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 204


 5749              	.LBB223:
 5750              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5751              		.loc 2 195 0
 5752              		.syntax unified
 5753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5754 0004 4FF05003 			mov r3, #80												
 5755 0008 83F31188 		msr basepri, r3											
 5756 000c BFF36F8F 		isb														
 5757 0010 BFF34F8F 		dsb														
 5758              	
 5759              	@ 0 "" 2
 5760              	.LVL493:
 5761              		.thumb
 5762              		.syntax unified
 5763              	.L509:
 5764 0014 FEE7     		b	.L509
 5765              	.L508:
 5766 0016 0446     		mov	r4, r0
 5767 0018 0D46     		mov	r5, r1
 5768              	.LBE224:
 5769              	.LBE223:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5770              		.loc 1 4811 0
 5771 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5772              	.LVL494:
 5773              	.LBB225:
 5774              	.LBB226:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5775              		.loc 2 211 0
 5776              		.syntax unified
 5777              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5778 001e EFF31186 			mrs r6, basepri											
 5779 0022 4FF05003 		mov r3, #80												
 5780 0026 83F31188 		msr basepri, r3											
 5781 002a BFF36F8F 		isb														
 5782 002e BFF34F8F 		dsb														
 5783              	
 5784              	@ 0 "" 2
 5785              		.thumb
 5786              		.syntax unified
 5787              	.LBE226:
 5788              	.LBE225:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5789              		.loc 1 4817 0
 5790 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5791 0036 DBB2     		uxtb	r3, r3
 5792              	.LVL495:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5793              		.loc 1 4818 0
 5794 0038 0222     		movs	r2, #2
 5795 003a 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5796              		.loc 1 4822 0
 5797 003e 626D     		ldr	r2, [r4, #84]
 5798 0040 0132     		adds	r2, r2, #1
 5799 0042 6265     		str	r2, [r4, #84]
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 205


4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5800              		.loc 1 4828 0
 5801 0044 012B     		cmp	r3, #1
 5802 0046 33D1     		bne	.L510
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5803              		.loc 1 4831 0
 5804 0048 A36A     		ldr	r3, [r4, #40]
 5805              	.LVL496:
 5806 004a 43B1     		cbz	r3, .L511
 5807              	.LBB227:
 5808              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5809              		.loc 2 195 0
 5810              		.syntax unified
 5811              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5812 004c 4FF05003 			mov r3, #80												
 5813 0050 83F31188 		msr basepri, r3											
 5814 0054 BFF36F8F 		isb														
 5815 0058 BFF34F8F 		dsb														
 5816              	
 5817              	@ 0 "" 2
 5818              	.LVL497:
 5819              		.thumb
 5820              		.syntax unified
 5821              	.L512:
 5822 005c FEE7     		b	.L512
 5823              	.L511:
 5824              	.LBE228:
 5825              	.LBE227:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5826              		.loc 1 4833 0
 5827 005e 164B     		ldr	r3, .L518
 5828 0060 1B68     		ldr	r3, [r3]
 5829 0062 9BB9     		cbnz	r3, .L513
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5830              		.loc 1 4835 0
 5831 0064 271D     		adds	r7, r4, #4
 5832 0066 3846     		mov	r0, r7
 5833 0068 FFF7FEFF 		bl	uxListRemove
 5834              	.LVL498:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5835              		.loc 1 4836 0
 5836 006c E36A     		ldr	r3, [r4, #44]
 5837 006e 134A     		ldr	r2, .L518+4
 5838 0070 1268     		ldr	r2, [r2]
 5839 0072 9342     		cmp	r3, r2
 5840 0074 01D9     		bls	.L514
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5841              		.loc 1 4836 0 is_stmt 0 discriminator 1
 5842 0076 114A     		ldr	r2, .L518+4
 5843 0078 1360     		str	r3, [r2]
 5844              	.L514:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5845              		.loc 1 4836 0 discriminator 3
 5846 007a 03EB8303 		add	r3, r3, r3, lsl #2
 5847 007e 9A00     		lsls	r2, r3, #2
 5848 0080 3946     		mov	r1, r7
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 206


 5849 0082 0F48     		ldr	r0, .L518+8
 5850 0084 1044     		add	r0, r0, r2
 5851 0086 FFF7FEFF 		bl	vListInsertEnd
 5852              	.LVL499:
 5853 008a 04E0     		b	.L515
 5854              	.L513:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5855              		.loc 1 4842 0 is_stmt 1
 5856 008c 04F11801 		add	r1, r4, #24
 5857 0090 0C48     		ldr	r0, .L518+12
 5858 0092 FFF7FEFF 		bl	vListInsertEnd
 5859              	.LVL500:
 5860              	.L515:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5861              		.loc 1 4845 0
 5862 0096 E26A     		ldr	r2, [r4, #44]
 5863 0098 0B4B     		ldr	r3, .L518+16
 5864 009a 1B68     		ldr	r3, [r3]
 5865 009c DB6A     		ldr	r3, [r3, #44]
 5866 009e 9A42     		cmp	r2, r3
 5867 00a0 06D9     		bls	.L510
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5868              		.loc 1 4849 0
 5869 00a2 15B1     		cbz	r5, .L516
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5870              		.loc 1 4851 0
 5871 00a4 0123     		movs	r3, #1
 5872 00a6 2B60     		str	r3, [r5]
 5873 00a8 02E0     		b	.L510
 5874              	.L516:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5875              		.loc 1 4858 0
 5876 00aa 0122     		movs	r2, #1
 5877 00ac 074B     		ldr	r3, .L518+20
 5878 00ae 1A60     		str	r2, [r3]
 5879              	.L510:
 5880              	.LVL501:
 5881              	.LBB229:
 5882              	.LBB230:
 5883              		.loc 2 229 0
 5884              		.syntax unified
 5885              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5886 00b0 86F31188 			msr basepri, r6	
 5887              	@ 0 "" 2
 5888              	.LVL502:
 5889              		.thumb
 5890              		.syntax unified
 5891 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5892              	.LVL503:
 5893              	.L519:
 5894 00b6 00BF     		.align	2
 5895              	.L518:
 5896 00b8 00000000 		.word	.LANCHOR16
 5897 00bc 00000000 		.word	.LANCHOR13
 5898 00c0 00000000 		.word	.LANCHOR4
 5899 00c4 00000000 		.word	.LANCHOR1
 5900 00c8 00000000 		.word	.LANCHOR10
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 207


 5901 00cc 00000000 		.word	.LANCHOR19
 5902              	.LBE230:
 5903              	.LBE229:
 5904              		.cfi_endproc
 5905              	.LFE61:
 5907              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5908              		.align	2
 5909              		.global	xTaskNotifyStateClear
 5910              		.thumb
 5911              		.thumb_func
 5913              	xTaskNotifyStateClear:
 5914              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5915              		.loc 1 4877 0
 5916              		.cfi_startproc
 5917              		@ args = 0, pretend = 0, frame = 0
 5918              		@ frame_needed = 0, uses_anonymous_args = 0
 5919              	.LVL504:
 5920 0000 10B5     		push	{r4, lr}
 5921              	.LCFI56:
 5922              		.cfi_def_cfa_offset 8
 5923              		.cfi_offset 4, -8
 5924              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5925              		.loc 1 4883 0
 5926 0002 0446     		mov	r4, r0
 5927 0004 08B9     		cbnz	r0, .L521
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5928              		.loc 1 4883 0 is_stmt 0 discriminator 1
 5929 0006 094B     		ldr	r3, .L525
 5930 0008 1C68     		ldr	r4, [r3]
 5931              	.LVL505:
 5932              	.L521:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5933              		.loc 1 4885 0 is_stmt 1 discriminator 4
 5934 000a FFF7FEFF 		bl	vPortEnterCritical
 5935              	.LVL506:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5936              		.loc 1 4887 0 discriminator 4
 5937 000e 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5938 0012 DBB2     		uxtb	r3, r3
 5939 0014 022B     		cmp	r3, #2
 5940 0016 04D1     		bne	.L523
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5941              		.loc 1 4889 0
 5942 0018 0023     		movs	r3, #0
 5943 001a 84F85830 		strb	r3, [r4, #88]
 5944              	.LVL507:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5945              		.loc 1 4890 0
 5946 001e 0124     		movs	r4, #1
 5947              	.LVL508:
 5948 0020 00E0     		b	.L522
 5949              	.LVL509:
 5950              	.L523:
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5951              		.loc 1 4894 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 208


 5952 0022 0024     		movs	r4, #0
 5953              	.LVL510:
 5954              	.L522:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5955              		.loc 1 4897 0
 5956 0024 FFF7FEFF 		bl	vPortExitCritical
 5957              	.LVL511:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5958              		.loc 1 4900 0
 5959 0028 2046     		mov	r0, r4
 5960 002a 10BD     		pop	{r4, pc}
 5961              	.LVL512:
 5962              	.L526:
 5963              		.align	2
 5964              	.L525:
 5965 002c 00000000 		.word	.LANCHOR10
 5966              		.cfi_endproc
 5967              	.LFE62:
 5969              		.global	pxCurrentTCB
 5970              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5971              		.align	2
 5972              		.set	.LANCHOR2,. + 0
 5975              	pxDelayedTaskList:
 5976 0000 00000000 		.space	4
 5977              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5978              		.align	2
 5979              		.set	.LANCHOR11,. + 0
 5982              	xSchedulerRunning:
 5983 0000 00000000 		.space	4
 5984              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5985              		.align	2
 5986              		.set	.LANCHOR7,. + 0
 5989              	xTasksWaitingTermination:
 5990 0000 00000000 		.space	20
 5990      00000000 
 5990      00000000 
 5990      00000000 
 5990      00000000 
 5991              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5992              		.align	2
 5993              		.set	.LANCHOR8,. + 0
 5996              	pxOverflowDelayedTaskList:
 5997 0000 00000000 		.space	4
 5998              		.section	.bss.uxPendedTicks,"aw",%nobits
 5999              		.align	2
 6000              		.set	.LANCHOR18,. + 0
 6003              	uxPendedTicks:
 6004 0000 00000000 		.space	4
 6005              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6006              		.align	2
 6007              		.set	.LANCHOR4,. + 0
 6010              	pxReadyTasksLists:
 6011 0000 00000000 		.space	1120
 6011      00000000 
 6011      00000000 
 6011      00000000 
 6011      00000000 
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 209


 6012              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6013              		.align	2
 6014              		.set	.LANCHOR16,. + 0
 6017              	uxSchedulerSuspended:
 6018 0000 00000000 		.space	4
 6019              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6020              		.align	2
 6021              		.set	.LANCHOR14,. + 0
 6024              	uxDeletedTasksWaitingCleanUp:
 6025 0000 00000000 		.space	4
 6026              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6027              		.align	2
 6028              		.set	.LANCHOR9,. + 0
 6031              	uxCurrentNumberOfTasks:
 6032 0000 00000000 		.space	4
 6033              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6034              		.align	2
 6035              		.set	.LANCHOR10,. + 0
 6038              	pxCurrentTCB:
 6039 0000 00000000 		.space	4
 6040              		.section	.bss.xPendingReadyList,"aw",%nobits
 6041              		.align	2
 6042              		.set	.LANCHOR1,. + 0
 6045              	xPendingReadyList:
 6046 0000 00000000 		.space	20
 6046      00000000 
 6046      00000000 
 6046      00000000 
 6046      00000000 
 6047              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6048              		.align	2
 6049              		.set	.LANCHOR17,. + 0
 6052              	xNumOfOverflows:
 6053 0000 00000000 		.space	4
 6054              		.section	.bss.xTickCount,"aw",%nobits
 6055              		.align	2
 6056              		.set	.LANCHOR15,. + 0
 6059              	xTickCount:
 6060 0000 00000000 		.space	4
 6061              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6062              		.align	2
 6063              		.set	.LANCHOR3,. + 0
 6066              	xNextTaskUnblockTime:
 6067 0000 00000000 		.space	4
 6068              		.section	.rodata.str1.4,"aMS",%progbits,1
 6069              		.align	2
 6070              	.LC0:
 6071 0000 49444C45 		.ascii	"IDLE\000"
 6071      00
 6072              		.section	.bss.uxTaskNumber,"aw",%nobits
 6073              		.align	2
 6074              		.set	.LANCHOR12,. + 0
 6077              	uxTaskNumber:
 6078 0000 00000000 		.space	4
 6079              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6080              		.align	2
 6081              		.set	.LANCHOR5,. + 0
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 210


 6084              	xDelayedTaskList1:
 6085 0000 00000000 		.space	20
 6085      00000000 
 6085      00000000 
 6085      00000000 
 6085      00000000 
 6086              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6087              		.align	2
 6088              		.set	.LANCHOR6,. + 0
 6091              	xDelayedTaskList2:
 6092 0000 00000000 		.space	20
 6092      00000000 
 6092      00000000 
 6092      00000000 
 6092      00000000 
 6093              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6094              		.align	2
 6095              		.set	.LANCHOR0,. + 0
 6098              	xSuspendedTaskList:
 6099 0000 00000000 		.space	20
 6099      00000000 
 6099      00000000 
 6099      00000000 
 6099      00000000 
 6100              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6101              		.align	2
 6102              		.set	.LANCHOR13,. + 0
 6105              	uxTopReadyPriority:
 6106 0000 00000000 		.space	4
 6107              		.section	.bss.xYieldPending,"aw",%nobits
 6108              		.align	2
 6109              		.set	.LANCHOR19,. + 0
 6112              	xYieldPending:
 6113 0000 00000000 		.space	4
 6114              		.text
 6115              	.Letext0:
 6116              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\\s
 6117              		.file 4 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 6118              		.file 5 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 6119              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6120              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6121              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6122              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6123              		.file 10 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\string.h"
 6124              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6125              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 211


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
D:\Programme\Cygwin\tmp\ccVaHhBo.s:22     .text.prvTaskIsTaskSuspended:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:26     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
D:\Programme\Cygwin\tmp\ccVaHhBo.s:105    .text.prvTaskIsTaskSuspended:00000044 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:111    .text.prvTaskCheckFreeStackSpace:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:115    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
D:\Programme\Cygwin\tmp\ccVaHhBo.s:149    .text.prvResetNextTaskUnblockTime:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:153    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
D:\Programme\Cygwin\tmp\ccVaHhBo.s:193    .text.prvResetNextTaskUnblockTime:0000002c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:199    .text.prvInitialiseNewTask:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:203    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
D:\Programme\Cygwin\tmp\ccVaHhBo.s:323    .text.prvInitialiseTaskLists:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:327    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
D:\Programme\Cygwin\tmp\ccVaHhBo.s:393    .text.prvInitialiseTaskLists:00000048 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:405    .text.prvAddNewTaskToReadyList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:409    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:519    .text.prvAddNewTaskToReadyList:0000008c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:530    .text.prvDeleteTCB:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:534    .text.prvDeleteTCB:00000000 prvDeleteTCB
D:\Programme\Cygwin\tmp\ccVaHhBo.s:598    .text.prvCheckTasksWaitingTermination:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:602    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
D:\Programme\Cygwin\tmp\ccVaHhBo.s:658    .text.prvCheckTasksWaitingTermination:00000038 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:665    .text.prvIdleTask:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:669    .text.prvIdleTask:00000000 prvIdleTask
D:\Programme\Cygwin\tmp\ccVaHhBo.s:709    .text.prvIdleTask:00000020 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:715    .text.prvAddCurrentTaskToDelayedList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:719    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:804    .text.prvAddCurrentTaskToDelayedList:00000064 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:814    .text.xTaskCreateStatic:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:819    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
D:\Programme\Cygwin\tmp\ccVaHhBo.s:955    .text.xTaskCreate:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:960    .text.xTaskCreate:00000000 xTaskCreate
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1059   .text.vTaskDelete:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1064   .text.vTaskDelete:00000000 vTaskDelete
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1191   .text.vTaskDelete:00000094 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1203   .text.eTaskGetState:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1208   .text.eTaskGetState:00000000 eTaskGetState
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1326   .text.eTaskGetState:0000006c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1335   .text.uxTaskPriorityGet:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1340   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1376   .text.uxTaskPriorityGet:00000018 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1381   .text.uxTaskPriorityGetFromISR:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1386   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1446   .text.uxTaskPriorityGetFromISR:0000002c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1451   .text.vTaskPrioritySet:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1456   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1641   .text.vTaskPrioritySet:000000cc $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1649   .text.vTaskResume:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1654   .text.vTaskResume:00000000 vTaskResume
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1759   .text.vTaskResume:00000078 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1767   .text.xTaskResumeFromISR:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1772   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1911   .text.xTaskResumeFromISR:00000090 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1920   .text.vTaskStartScheduler:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:1925   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2049   .text.vTaskStartScheduler:00000084 $d
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 212


D:\Programme\Cygwin\tmp\ccVaHhBo.s:2058   .text.vTaskEndScheduler:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2063   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2100   .text.vTaskEndScheduler:00000020 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2105   .text.vTaskSuspendAll:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2110   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2126   .text.vTaskSuspendAll:0000000c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2131   .text.xTaskGetTickCount:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2136   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2152   .text.xTaskGetTickCount:00000008 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2157   .text.xTaskGetTickCountFromISR:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2162   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2185   .text.xTaskGetTickCountFromISR:0000000c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2190   .text.uxTaskGetNumberOfTasks:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2195   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2210   .text.uxTaskGetNumberOfTasks:00000008 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2215   .text.pcTaskGetName:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2220   .text.pcTaskGetName:00000000 pcTaskGetName
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2264   .text.pcTaskGetName:00000024 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2269   .text.xTaskIncrementTick:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2274   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2490   .text.xTaskIncrementTick:000000f8 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2505   .text.xTaskResumeAll:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2510   .text.xTaskResumeAll:00000000 xTaskResumeAll
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2698   .text.xTaskResumeAll:000000d4 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2711   .text.vTaskDelayUntil:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2716   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2887   .text.vTaskDelayUntil:000000a0 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2894   .text.vTaskDelay:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2899   .text.vTaskDelay:00000000 vTaskDelay
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2976   .text.vTaskDelay:00000048 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2982   .text.vTaskSwitchContext:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:2987   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3103   .text.vTaskSwitchContext:00000084 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3112   .text.vTaskSuspend:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3117   .text.vTaskSuspend:00000000 vTaskSuspend
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3257   .text.vTaskSuspend:000000a4 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3267   .text.vTaskPlaceOnEventList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3272   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3324   .text.vTaskPlaceOnEventList:0000002c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3329   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3334   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3421   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3427   .text.vTaskPlaceOnEventListRestricted:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3432   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3493   .text.vTaskPlaceOnEventListRestricted:00000034 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3498   .text.xTaskRemoveFromEventList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3503   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3607   .text.xTaskRemoveFromEventList:00000074 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3617   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3622   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3729   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3738   .text.vTaskSetTimeOutState:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3743   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3797   .text.vTaskSetTimeOutState:00000030 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3803   .text.vTaskInternalSetTimeOutState:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3808   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3828   .text.vTaskInternalSetTimeOutState:00000010 $d
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 213


D:\Programme\Cygwin\tmp\ccVaHhBo.s:3834   .text.xTaskCheckForTimeOut:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3839   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3973   .text.xTaskCheckForTimeOut:00000078 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3979   .text.vTaskMissedYield:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3984   .text.vTaskMissedYield:00000000 vTaskMissedYield
D:\Programme\Cygwin\tmp\ccVaHhBo.s:3999   .text.vTaskMissedYield:00000008 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4004   .text.uxTaskGetTaskNumber:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4009   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4035   .text.vTaskSetTaskNumber:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4040   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4060   .text.vTaskGetInfo:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4065   .text.vTaskGetInfo:00000000 vTaskGetInfo
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4170   .text.vTaskGetInfo:00000070 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4175   .text.prvListTasksWithinSingleList:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4179   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4271   .text.uxTaskGetSystemState:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4276   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4392   .text.uxTaskGetSystemState:00000098 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4402   .text.uxTaskGetStackHighWaterMark:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4407   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4436   .text.uxTaskGetStackHighWaterMark:00000014 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4441   .text.xTaskGetCurrentTaskHandle:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4446   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4462   .text.xTaskGetCurrentTaskHandle:00000008 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4467   .text.xTaskGetSchedulerState:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4472   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4503   .text.xTaskGetSchedulerState:00000018 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4509   .text.xTaskPriorityInherit:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4514   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4649   .text.xTaskPriorityInherit:00000094 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4656   .text.xTaskPriorityDisinherit:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4661   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4803   .text.xTaskPriorityDisinherit:00000088 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4810   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4815   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4964   .text.vTaskPriorityDisinheritAfterTimeout:0000009c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4971   .text.uxTaskResetEventItemValue:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4976   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
D:\Programme\Cygwin\tmp\ccVaHhBo.s:4999   .text.uxTaskResetEventItemValue:00000014 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5004   .text.pvTaskIncrementMutexHeldCount:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5009   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5035   .text.pvTaskIncrementMutexHeldCount:00000018 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5040   .text.ulTaskNotifyTake:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5045   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5138   .text.ulTaskNotifyTake:0000006c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5144   .text.xTaskNotifyWait:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5149   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5264   .text.xTaskNotifyWait:00000090 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5270   .text.xTaskGenericNotify:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5275   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5341   .text.xTaskGenericNotify:0000003e $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5345   .text.xTaskGenericNotify:00000042 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5469   .text.xTaskGenericNotify:000000d0 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5477   .text.xTaskGenericNotifyFromISR:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5482   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5567   .text.xTaskGenericNotifyFromISR:0000005c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5571   .text.xTaskGenericNotifyFromISR:00000060 $t
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 214


D:\Programme\Cygwin\tmp\ccVaHhBo.s:5716   .text.xTaskGenericNotifyFromISR:00000108 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5726   .text.vTaskNotifyGiveFromISR:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5731   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5896   .text.vTaskNotifyGiveFromISR:000000b8 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5908   .text.xTaskNotifyStateClear:00000000 $t
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5913   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5965   .text.xTaskNotifyStateClear:0000002c $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6038   .bss.pxCurrentTCB:00000000 pxCurrentTCB
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5971   .bss.pxDelayedTaskList:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5975   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5978   .bss.xSchedulerRunning:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5982   .bss.xSchedulerRunning:00000000 xSchedulerRunning
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5985   .bss.xTasksWaitingTermination:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5989   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5992   .bss.pxOverflowDelayedTaskList:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5996   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:5999   .bss.uxPendedTicks:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6003   .bss.uxPendedTicks:00000000 uxPendedTicks
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6006   .bss.pxReadyTasksLists:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6010   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6013   .bss.uxSchedulerSuspended:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6017   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6020   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6024   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6027   .bss.uxCurrentNumberOfTasks:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6031   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6034   .bss.pxCurrentTCB:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6041   .bss.xPendingReadyList:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6045   .bss.xPendingReadyList:00000000 xPendingReadyList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6048   .bss.xNumOfOverflows:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6052   .bss.xNumOfOverflows:00000000 xNumOfOverflows
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6055   .bss.xTickCount:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6059   .bss.xTickCount:00000000 xTickCount
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6062   .bss.xNextTaskUnblockTime:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6066   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6069   .rodata.str1.4:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6073   .bss.uxTaskNumber:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6077   .bss.uxTaskNumber:00000000 uxTaskNumber
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6080   .bss.xDelayedTaskList1:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6084   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6087   .bss.xDelayedTaskList2:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6091   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6094   .bss.xSuspendedTaskList:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6098   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6101   .bss.uxTopReadyPriority:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6105   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6108   .bss.xYieldPending:00000000 $d
D:\Programme\Cygwin\tmp\ccVaHhBo.s:6112   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
ARM GAS  D:\Programme\Cygwin\tmp\ccVaHhBo.s 			page 215


vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
