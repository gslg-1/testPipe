ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB130:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 2


  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** UART_HandleTypeDef huart2;
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Definitions for defaultTask */
  48:Src/main.c    **** osThreadId_t defaultTaskHandle;
  49:Src/main.c    **** const osThreadAttr_t defaultTask_attributes = {
  50:Src/main.c    ****   .name = "defaultTask",
  51:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal,
  52:Src/main.c    ****   .stack_size = 128
  53:Src/main.c    **** };
  54:Src/main.c    **** /* Definitions for blinkLEDTask */
  55:Src/main.c    **** osThreadId_t blinkLEDTaskHandle;
  56:Src/main.c    **** const osThreadAttr_t blinkLEDTask_attributes = {
  57:Src/main.c    ****   .name = "blinkLEDTask",
  58:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal1,
  59:Src/main.c    ****   .stack_size = 128
  60:Src/main.c    **** };
  61:Src/main.c    **** /* USER CODE BEGIN PV */
  62:Src/main.c    **** osThreadId_t comUSBTaskHandle;
  63:Src/main.c    **** const osThreadAttr_t comUSBTask_attributes = {
  64:Src/main.c    ****   .name = "comUSBTask",
  65:Src/main.c    ****   .priority = (osPriority_t) osPriorityNormal1,
  66:Src/main.c    ****   .stack_size = 128
  67:Src/main.c    **** };
  68:Src/main.c    **** /* USER CODE END PV */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** void SystemClock_Config(void);
  72:Src/main.c    **** static void MX_GPIO_Init(void);
  73:Src/main.c    **** static void MX_USART2_UART_Init(void);
  74:Src/main.c    **** void StartDefaultTask(void *argument);
  75:Src/main.c    **** void StartTask02(void *argument);
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** void StartComUSBTask(void *argument);
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 3


  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    ****   
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Src/main.c    ****   HAL_Init();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN Init */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END Init */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Configure the system clock */
 107:Src/main.c    ****   SystemClock_Config();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Initialize all configured peripherals */
 114:Src/main.c    ****   MX_GPIO_Init();
 115:Src/main.c    ****   MX_USART2_UART_Init();
 116:Src/main.c    ****   /* USER CODE BEGIN 2 */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END 2 */
 119:Src/main.c    ****   /* Init scheduler */
 120:Src/main.c    ****   osKernelInitialize();
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 123:Src/main.c    ****   /* add mutexes, ... */
 124:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 127:Src/main.c    ****   /* add semaphores, ... */
 128:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 131:Src/main.c    ****   /* start timers, add new ones, ... */
 132:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 135:Src/main.c    ****   /* add queues, ... */
 136:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Create the thread(s) */
 139:Src/main.c    ****   /* creation of defaultTask */
 140:Src/main.c    ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* creation of blinkLEDTask */
 143:Src/main.c    ****   blinkLEDTaskHandle = osThreadNew(StartTask02, NULL, &blinkLEDTask_attributes);
 144:Src/main.c    **** 
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 4


 145:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 146:Src/main.c    ****   /* add threads, ... */
 147:Src/main.c    ****   comUSBTaskHandle = osThreadNew(StartComUSBTask, NULL, &comUSBTask_attributes);
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Start scheduler */
 152:Src/main.c    ****   osKernelStart();
 153:Src/main.c    ****  
 154:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* Infinite loop */
 157:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 158:Src/main.c    ****   while (1)
 159:Src/main.c    ****   {
 160:Src/main.c    ****     /* USER CODE END WHILE */
 161:Src/main.c    **** 
 162:Src/main.c    ****     /* USER CODE BEGIN 3 */
 163:Src/main.c    ****   }
 164:Src/main.c    ****   /* USER CODE END 3 */
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** /**
 168:Src/main.c    ****   * @brief System Clock Configuration
 169:Src/main.c    ****   * @retval None
 170:Src/main.c    ****   */
 171:Src/main.c    **** void SystemClock_Config(void)
 172:Src/main.c    **** {
 173:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 174:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 175:Src/main.c    **** 
 176:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 177:Src/main.c    ****   */
 178:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 179:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 180:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 182:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 184:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     Error_Handler();
 187:Src/main.c    ****   }
 188:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 189:Src/main.c    ****   */
 190:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 191:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 192:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 193:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 194:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 195:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 196:Src/main.c    **** 
 197:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 198:Src/main.c    ****   {
 199:Src/main.c    ****     Error_Handler();
 200:Src/main.c    ****   }
 201:Src/main.c    **** }
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 5


 202:Src/main.c    **** 
 203:Src/main.c    **** /**
 204:Src/main.c    ****   * @brief USART2 Initialization Function
 205:Src/main.c    ****   * @param None
 206:Src/main.c    ****   * @retval None
 207:Src/main.c    ****   */
 208:Src/main.c    **** static void MX_USART2_UART_Init(void)
 209:Src/main.c    **** {
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 214:Src/main.c    **** 
 215:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 218:Src/main.c    ****   huart2.Instance = USART2;
 219:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 220:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 221:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 222:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 223:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 224:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 225:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 226:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 227:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 228:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 235:Src/main.c    **** 
 236:Src/main.c    **** }
 237:Src/main.c    **** 
 238:Src/main.c    **** /**
 239:Src/main.c    ****   * @brief GPIO Initialization Function
 240:Src/main.c    ****   * @param None
 241:Src/main.c    ****   * @retval None
 242:Src/main.c    ****   */
 243:Src/main.c    **** static void MX_GPIO_Init(void)
 244:Src/main.c    **** {
  29              		.loc 1 244 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40 0002 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 56
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 6


 245:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 245 0
  44 0004 0024     		movs	r4, #0
  45 0006 0594     		str	r4, [sp, #20]
  46 0008 0694     		str	r4, [sp, #24]
  47 000a 0794     		str	r4, [sp, #28]
  48 000c 0894     		str	r4, [sp, #32]
  49 000e 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* GPIO Ports Clock Enable */
 248:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  51              		.loc 1 248 0
  52 0010 204B     		ldr	r3, .L3
  53 0012 5A69     		ldr	r2, [r3, #20]
  54 0014 42F40022 		orr	r2, r2, #524288
  55 0018 5A61     		str	r2, [r3, #20]
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 02F40022 		and	r2, r2, #524288
  58 0020 0192     		str	r2, [sp, #4]
  59 0022 019A     		ldr	r2, [sp, #4]
  60              	.LBE2:
  61              	.LBB3:
 249:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  62              		.loc 1 249 0
  63 0024 5A69     		ldr	r2, [r3, #20]
  64 0026 42F48002 		orr	r2, r2, #4194304
  65 002a 5A61     		str	r2, [r3, #20]
  66 002c 5A69     		ldr	r2, [r3, #20]
  67 002e 02F48002 		and	r2, r2, #4194304
  68 0032 0292     		str	r2, [sp, #8]
  69 0034 029A     		ldr	r2, [sp, #8]
  70              	.LBE3:
  71              	.LBB4:
 250:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  72              		.loc 1 250 0
  73 0036 5A69     		ldr	r2, [r3, #20]
  74 0038 42F40032 		orr	r2, r2, #131072
  75 003c 5A61     		str	r2, [r3, #20]
  76 003e 5A69     		ldr	r2, [r3, #20]
  77 0040 02F40032 		and	r2, r2, #131072
  78 0044 0392     		str	r2, [sp, #12]
  79 0046 039A     		ldr	r2, [sp, #12]
  80              	.LBE4:
  81              	.LBB5:
 251:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  82              		.loc 1 251 0
  83 0048 5A69     		ldr	r2, [r3, #20]
  84 004a 42F48022 		orr	r2, r2, #262144
  85 004e 5A61     		str	r2, [r3, #20]
  86 0050 5B69     		ldr	r3, [r3, #20]
  87 0052 03F48023 		and	r3, r3, #262144
  88 0056 0493     		str	r3, [sp, #16]
  89 0058 049B     		ldr	r3, [sp, #16]
  90              	.LBE5:
 252:Src/main.c    **** 
 253:Src/main.c    ****   /*Configure GPIO pin Output Level */
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 7


 254:Src/main.c    ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
  91              		.loc 1 254 0
  92 005a 0F4D     		ldr	r5, .L3+4
  93 005c 2246     		mov	r2, r4
  94 005e 4FF40051 		mov	r1, #8192
  95 0062 2846     		mov	r0, r5
  96 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  97              	.LVL0:
 255:Src/main.c    **** 
 256:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 257:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
  98              		.loc 1 257 0
  99 0068 4FF40056 		mov	r6, #8192
 100 006c 0596     		str	r6, [sp, #20]
 258:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 101              		.loc 1 258 0
 102 006e 0B4B     		ldr	r3, .L3+8
 103 0070 0693     		str	r3, [sp, #24]
 259:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 104              		.loc 1 259 0
 105 0072 0794     		str	r4, [sp, #28]
 260:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 106              		.loc 1 260 0
 107 0074 05A9     		add	r1, sp, #20
 108 0076 0A48     		ldr	r0, .L3+12
 109 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL1:
 261:Src/main.c    **** 
 262:Src/main.c    ****   /*Configure GPIO pin : LD2_Pin */
 263:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin;
 111              		.loc 1 263 0
 112 007c 0596     		str	r6, [sp, #20]
 264:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 264 0
 114 007e 0123     		movs	r3, #1
 115 0080 0693     		str	r3, [sp, #24]
 265:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 265 0
 117 0082 0794     		str	r4, [sp, #28]
 266:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 266 0
 119 0084 0894     		str	r4, [sp, #32]
 267:Src/main.c    ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 120              		.loc 1 267 0
 121 0086 05A9     		add	r1, sp, #20
 122 0088 2846     		mov	r0, r5
 123 008a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL2:
 268:Src/main.c    **** 
 269:Src/main.c    **** }
 125              		.loc 1 269 0
 126 008e 0AB0     		add	sp, sp, #40
 127              	.LCFI2:
 128              		.cfi_def_cfa_offset 16
 129              		@ sp needed
 130 0090 70BD     		pop	{r4, r5, r6, pc}
 131              	.L4:
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 8


 132 0092 00BF     		.align	2
 133              	.L3:
 134 0094 00100240 		.word	1073876992
 135 0098 00040048 		.word	1207960576
 136 009c 00002110 		.word	270598144
 137 00a0 00080048 		.word	1207961600
 138              		.cfi_endproc
 139              	.LFE130:
 141              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 142              		.align	2
 143              		.thumb
 144              		.thumb_func
 146              	MX_USART2_UART_Init:
 147              	.LFB129:
 209:Src/main.c    **** 
 148              		.loc 1 209 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 08B5     		push	{r3, lr}
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 3, -8
 156              		.cfi_offset 14, -4
 218:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 157              		.loc 1 218 0
 158 0002 0948     		ldr	r0, .L7
 159 0004 094B     		ldr	r3, .L7+4
 160 0006 0360     		str	r3, [r0]
 219:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 161              		.loc 1 219 0
 162 0008 4FF41643 		mov	r3, #38400
 163 000c 4360     		str	r3, [r0, #4]
 220:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 164              		.loc 1 220 0
 165 000e 0023     		movs	r3, #0
 166 0010 8360     		str	r3, [r0, #8]
 221:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 167              		.loc 1 221 0
 168 0012 C360     		str	r3, [r0, #12]
 222:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 169              		.loc 1 222 0
 170 0014 0361     		str	r3, [r0, #16]
 223:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 171              		.loc 1 223 0
 172 0016 0C22     		movs	r2, #12
 173 0018 4261     		str	r2, [r0, #20]
 224:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 174              		.loc 1 224 0
 175 001a 8361     		str	r3, [r0, #24]
 225:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 176              		.loc 1 225 0
 177 001c C361     		str	r3, [r0, #28]
 226:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 178              		.loc 1 226 0
 179 001e 0362     		str	r3, [r0, #32]
 227:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 9


 180              		.loc 1 227 0
 181 0020 4362     		str	r3, [r0, #36]
 228:Src/main.c    ****   {
 182              		.loc 1 228 0
 183 0022 FFF7FEFF 		bl	HAL_UART_Init
 184              	.LVL3:
 185 0026 08BD     		pop	{r3, pc}
 186              	.L8:
 187              		.align	2
 188              	.L7:
 189 0028 00000000 		.word	huart2
 190 002c 00440040 		.word	1073759232
 191              		.cfi_endproc
 192              	.LFE129:
 194              		.section	.text.StartComUSBTask,"ax",%progbits
 195              		.align	2
 196              		.global	StartComUSBTask
 197              		.thumb
 198              		.thumb_func
 200              	StartComUSBTask:
 201              	.LFB131:
 270:Src/main.c    **** 
 271:Src/main.c    **** /* USER CODE BEGIN 4 */
 272:Src/main.c    **** void StartComUSBTask(void *argument)
 273:Src/main.c    **** {
 202              		.loc 1 273 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 16
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              	.LVL4:
 207 0000 00B5     		push	{lr}
 208              	.LCFI4:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 14, -4
 211 0002 85B0     		sub	sp, sp, #20
 212              	.LCFI5:
 213              		.cfi_def_cfa_offset 24
 274:Src/main.c    **** #ifdef __UTEST
 275:Src/main.c    ****   uint8_t txBuf[9] = "Unit-T\n\r";
 276:Src/main.c    **** #else
 277:Src/main.c    ****   uint8_t txBuf[9] = "Normal\n\r";
 214              		.loc 1 277 0
 215 0004 084A     		ldr	r2, .L12
 216 0006 01AB     		add	r3, sp, #4
 217 0008 07CA     		ldmia	r2, {r0, r1, r2}
 218              	.LVL5:
 219 000a 03C3     		stmia	r3!, {r0, r1}
 220 000c 1A70     		strb	r2, [r3]
 221              	.L10:
 278:Src/main.c    **** #endif
 279:Src/main.c    ****   for(;;)
 280:Src/main.c    ****   {
 281:Src/main.c    ****     HAL_UART_Transmit(&huart2,txBuf,9,500);
 222              		.loc 1 281 0 discriminator 1
 223 000e 4FF4FA73 		mov	r3, #500
 224 0012 0922     		movs	r2, #9
 225 0014 01A9     		add	r1, sp, #4
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 10


 226 0016 0548     		ldr	r0, .L12+4
 227 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 228              	.LVL6:
 282:Src/main.c    ****     osDelay(1000);
 229              		.loc 1 282 0 discriminator 1
 230 001c 4FF47A70 		mov	r0, #1000
 231 0020 FFF7FEFF 		bl	osDelay
 232              	.LVL7:
 233 0024 F3E7     		b	.L10
 234              	.L13:
 235 0026 00BF     		.align	2
 236              	.L12:
 237 0028 00000000 		.word	.LC0
 238 002c 00000000 		.word	huart2
 239              		.cfi_endproc
 240              	.LFE131:
 242              		.section	.text.StartDefaultTask,"ax",%progbits
 243              		.align	2
 244              		.global	StartDefaultTask
 245              		.thumb
 246              		.thumb_func
 248              	StartDefaultTask:
 249              	.LFB132:
 283:Src/main.c    ****   }
 284:Src/main.c    **** }
 285:Src/main.c    **** 
 286:Src/main.c    **** /* USER CODE END 4 */
 287:Src/main.c    **** 
 288:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 289:Src/main.c    **** /**
 290:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 291:Src/main.c    ****   * @param  argument: Not used 
 292:Src/main.c    ****   * @retval None
 293:Src/main.c    ****   */
 294:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 295:Src/main.c    **** void StartDefaultTask(void *argument)
 296:Src/main.c    **** {
 250              		.loc 1 296 0
 251              		.cfi_startproc
 252              		@ Volatile: function does not return.
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              	.LVL8:
 256 0000 08B5     		push	{r3, lr}
 257              	.LCFI6:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 3, -8
 260              		.cfi_offset 14, -4
 261              	.LVL9:
 262              	.L15:
 297:Src/main.c    ****   /* USER CODE BEGIN 5 */
 298:Src/main.c    ****   /* Infinite loop */  
 299:Src/main.c    ****   for(;;)
 300:Src/main.c    ****   {
 301:Src/main.c    ****     osDelay(1);
 263              		.loc 1 301 0 discriminator 1
 264 0002 0120     		movs	r0, #1
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 11


 265 0004 FFF7FEFF 		bl	osDelay
 266              	.LVL10:
 267 0008 FBE7     		b	.L15
 268              		.cfi_endproc
 269              	.LFE132:
 271 000a 00BF     		.section	.text.StartTask02,"ax",%progbits
 272              		.align	2
 273              		.global	StartTask02
 274              		.thumb
 275              		.thumb_func
 277              	StartTask02:
 278              	.LFB133:
 302:Src/main.c    ****   }
 303:Src/main.c    ****   /* USER CODE END 5 */ 
 304:Src/main.c    **** }
 305:Src/main.c    **** 
 306:Src/main.c    **** /* USER CODE BEGIN Header_StartTask02 */
 307:Src/main.c    **** /**
 308:Src/main.c    **** * @brief Function implementing the blinkLEDTask thread.
 309:Src/main.c    **** * @param argument: Not used
 310:Src/main.c    **** * @retval None
 311:Src/main.c    **** */
 312:Src/main.c    **** /* USER CODE END Header_StartTask02 */
 313:Src/main.c    **** void StartTask02(void *argument)
 314:Src/main.c    **** {
 279              		.loc 1 314 0
 280              		.cfi_startproc
 281              		@ Volatile: function does not return.
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL11:
 285 0000 08B5     		push	{r3, lr}
 286              	.LCFI7:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 3, -8
 289              		.cfi_offset 14, -4
 290              	.LVL12:
 291              	.L18:
 315:Src/main.c    ****   /* USER CODE BEGIN StartTask02 */
 316:Src/main.c    ****   /* Infinite loop */
 317:Src/main.c    ****   for(;;)
 318:Src/main.c    ****   {
 319:Src/main.c    ****     HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 292              		.loc 1 319 0 discriminator 1
 293 0002 4FF40051 		mov	r1, #8192
 294 0006 0348     		ldr	r0, .L20
 295 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 296              	.LVL13:
 320:Src/main.c    ****     osDelay(200);
 297              		.loc 1 320 0 discriminator 1
 298 000c C820     		movs	r0, #200
 299 000e FFF7FEFF 		bl	osDelay
 300              	.LVL14:
 301 0012 F6E7     		b	.L18
 302              	.L21:
 303              		.align	2
 304              	.L20:
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 12


 305 0014 00040048 		.word	1207960576
 306              		.cfi_endproc
 307              	.LFE133:
 309              		.section	.text.SystemClock_Config,"ax",%progbits
 310              		.align	2
 311              		.global	SystemClock_Config
 312              		.thumb
 313              		.thumb_func
 315              	SystemClock_Config:
 316              	.LFB128:
 172:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 317              		.loc 1 172 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 64
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321 0000 30B5     		push	{r4, r5, lr}
 322              	.LCFI8:
 323              		.cfi_def_cfa_offset 12
 324              		.cfi_offset 4, -12
 325              		.cfi_offset 5, -8
 326              		.cfi_offset 14, -4
 327 0002 91B0     		sub	sp, sp, #68
 328              	.LCFI9:
 329              		.cfi_def_cfa_offset 80
 173:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 330              		.loc 1 173 0
 331 0004 2822     		movs	r2, #40
 332 0006 0021     		movs	r1, #0
 333 0008 06A8     		add	r0, sp, #24
 334 000a FFF7FEFF 		bl	memset
 335              	.LVL15:
 174:Src/main.c    **** 
 336              		.loc 1 174 0
 337 000e 0024     		movs	r4, #0
 338 0010 0194     		str	r4, [sp, #4]
 339 0012 0294     		str	r4, [sp, #8]
 340 0014 0394     		str	r4, [sp, #12]
 341 0016 0494     		str	r4, [sp, #16]
 342 0018 0594     		str	r4, [sp, #20]
 178:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 343              		.loc 1 178 0
 344 001a 0225     		movs	r5, #2
 345 001c 0695     		str	r5, [sp, #24]
 179:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 346              		.loc 1 179 0
 347 001e 0123     		movs	r3, #1
 348 0020 0A93     		str	r3, [sp, #40]
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 349              		.loc 1 180 0
 350 0022 1023     		movs	r3, #16
 351 0024 0B93     		str	r3, [sp, #44]
 181:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 352              		.loc 1 181 0
 353 0026 0D95     		str	r5, [sp, #52]
 183:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 354              		.loc 1 183 0
 355 0028 4FF46013 		mov	r3, #3670016
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 13


 356 002c 0F93     		str	r3, [sp, #60]
 184:Src/main.c    ****   {
 357              		.loc 1 184 0
 358 002e 06A8     		add	r0, sp, #24
 359 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 360              	.LVL16:
 190:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 361              		.loc 1 190 0
 362 0034 0F23     		movs	r3, #15
 363 0036 0193     		str	r3, [sp, #4]
 192:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 364              		.loc 1 192 0
 365 0038 0295     		str	r5, [sp, #8]
 193:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 366              		.loc 1 193 0
 367 003a 0394     		str	r4, [sp, #12]
 194:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 368              		.loc 1 194 0
 369 003c 4FF48063 		mov	r3, #1024
 370 0040 0493     		str	r3, [sp, #16]
 195:Src/main.c    **** 
 371              		.loc 1 195 0
 372 0042 0594     		str	r4, [sp, #20]
 197:Src/main.c    ****   {
 373              		.loc 1 197 0
 374 0044 2946     		mov	r1, r5
 375 0046 01A8     		add	r0, sp, #4
 376 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 377              	.LVL17:
 201:Src/main.c    **** 
 378              		.loc 1 201 0
 379 004c 11B0     		add	sp, sp, #68
 380              	.LCFI10:
 381              		.cfi_def_cfa_offset 12
 382              		@ sp needed
 383 004e 30BD     		pop	{r4, r5, pc}
 384              		.cfi_endproc
 385              	.LFE128:
 387              		.section	.text.main,"ax",%progbits
 388              		.align	2
 389              		.global	main
 390              		.thumb
 391              		.thumb_func
 393              	main:
 394              	.LFB127:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 395              		.loc 1 91 0
 396              		.cfi_startproc
 397              		@ Volatile: function does not return.
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 08B5     		push	{r3, lr}
 401              	.LCFI11:
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 3, -8
 404              		.cfi_offset 14, -4
 100:Src/main.c    **** 
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 14


 405              		.loc 1 100 0
 406 0002 FFF7FEFF 		bl	HAL_Init
 407              	.LVL18:
 107:Src/main.c    **** 
 408              		.loc 1 107 0
 409 0006 FFF7FEFF 		bl	SystemClock_Config
 410              	.LVL19:
 114:Src/main.c    ****   MX_USART2_UART_Init();
 411              		.loc 1 114 0
 412 000a FFF7FEFF 		bl	MX_GPIO_Init
 413              	.LVL20:
 115:Src/main.c    ****   /* USER CODE BEGIN 2 */
 414              		.loc 1 115 0
 415 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 416              	.LVL21:
 120:Src/main.c    **** 
 417              		.loc 1 120 0
 418 0012 FFF7FEFF 		bl	osKernelInitialize
 419              	.LVL22:
 140:Src/main.c    **** 
 420              		.loc 1 140 0
 421 0016 0C4A     		ldr	r2, .L27
 422 0018 0021     		movs	r1, #0
 423 001a 0C48     		ldr	r0, .L27+4
 424 001c FFF7FEFF 		bl	osThreadNew
 425              	.LVL23:
 426 0020 0B4B     		ldr	r3, .L27+8
 427 0022 1860     		str	r0, [r3]
 143:Src/main.c    **** 
 428              		.loc 1 143 0
 429 0024 0B4A     		ldr	r2, .L27+12
 430 0026 0021     		movs	r1, #0
 431 0028 0B48     		ldr	r0, .L27+16
 432 002a FFF7FEFF 		bl	osThreadNew
 433              	.LVL24:
 434 002e 0B4B     		ldr	r3, .L27+20
 435 0030 1860     		str	r0, [r3]
 147:Src/main.c    **** 
 436              		.loc 1 147 0
 437 0032 0B4A     		ldr	r2, .L27+24
 438 0034 0021     		movs	r1, #0
 439 0036 0B48     		ldr	r0, .L27+28
 440 0038 FFF7FEFF 		bl	osThreadNew
 441              	.LVL25:
 442 003c 0A4B     		ldr	r3, .L27+32
 443 003e 1860     		str	r0, [r3]
 152:Src/main.c    ****  
 444              		.loc 1 152 0
 445 0040 FFF7FEFF 		bl	osKernelStart
 446              	.LVL26:
 447              	.L25:
 448 0044 FEE7     		b	.L25
 449              	.L28:
 450 0046 00BF     		.align	2
 451              	.L27:
 452 0048 00000000 		.word	.LANCHOR0
 453 004c 00000000 		.word	StartDefaultTask
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 15


 454 0050 00000000 		.word	defaultTaskHandle
 455 0054 00000000 		.word	.LANCHOR1
 456 0058 00000000 		.word	StartTask02
 457 005c 00000000 		.word	blinkLEDTaskHandle
 458 0060 00000000 		.word	.LANCHOR2
 459 0064 00000000 		.word	StartComUSBTask
 460 0068 00000000 		.word	comUSBTaskHandle
 461              		.cfi_endproc
 462              	.LFE127:
 464              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 465              		.align	2
 466              		.global	HAL_TIM_PeriodElapsedCallback
 467              		.thumb
 468              		.thumb_func
 470              	HAL_TIM_PeriodElapsedCallback:
 471              	.LFB134:
 321:Src/main.c    ****   }
 322:Src/main.c    ****   /* USER CODE END StartTask02 */
 323:Src/main.c    **** }
 324:Src/main.c    **** 
 325:Src/main.c    **** /**
 326:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 327:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 328:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 329:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 330:Src/main.c    ****   * @param  htim : TIM handle
 331:Src/main.c    ****   * @retval None
 332:Src/main.c    ****   */
 333:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 334:Src/main.c    **** {
 472              		.loc 1 334 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              	.LVL27:
 477 0000 08B5     		push	{r3, lr}
 478              	.LCFI12:
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 3, -8
 481              		.cfi_offset 14, -4
 335:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* USER CODE END Callback 0 */
 338:Src/main.c    ****   if (htim->Instance == TIM1) {
 482              		.loc 1 338 0
 483 0002 0268     		ldr	r2, [r0]
 484 0004 024B     		ldr	r3, .L32
 485 0006 9A42     		cmp	r2, r3
 486 0008 01D1     		bne	.L29
 339:Src/main.c    ****     HAL_IncTick();
 487              		.loc 1 339 0
 488 000a FFF7FEFF 		bl	HAL_IncTick
 489              	.LVL28:
 490              	.L29:
 491 000e 08BD     		pop	{r3, pc}
 492              	.L33:
 493              		.align	2
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 16


 494              	.L32:
 495 0010 002C0140 		.word	1073818624
 496              		.cfi_endproc
 497              	.LFE134:
 499              		.section	.text.Error_Handler,"ax",%progbits
 500              		.align	2
 501              		.global	Error_Handler
 502              		.thumb
 503              		.thumb_func
 505              	Error_Handler:
 506              	.LFB135:
 340:Src/main.c    ****   }
 341:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 342:Src/main.c    **** 
 343:Src/main.c    ****   /* USER CODE END Callback 1 */
 344:Src/main.c    **** }
 345:Src/main.c    **** 
 346:Src/main.c    **** /**
 347:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 348:Src/main.c    ****   * @retval None
 349:Src/main.c    ****   */
 350:Src/main.c    **** void Error_Handler(void)
 351:Src/main.c    **** {
 507              		.loc 1 351 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512 0000 7047     		bx	lr
 513              		.cfi_endproc
 514              	.LFE135:
 516              		.global	comUSBTask_attributes
 517              		.comm	comUSBTaskHandle,4,4
 518              		.global	blinkLEDTask_attributes
 519              		.comm	blinkLEDTaskHandle,4,4
 520              		.global	defaultTask_attributes
 521              		.comm	defaultTaskHandle,4,4
 522              		.comm	huart2,128,4
 523 0002 00BF     		.section	.rodata.defaultTask_attributes,"a",%progbits
 524              		.align	2
 525              		.set	.LANCHOR0,. + 0
 528              	defaultTask_attributes:
 529 0000 28000000 		.word	.LC3
 530 0004 00000000 		.space	16
 530      00000000 
 530      00000000 
 530      00000000 
 531 0014 80000000 		.word	128
 532 0018 18000000 		.word	24
 533 001c 00000000 		.space	8
 533      00000000 
 534              		.section	.rodata.blinkLEDTask_attributes,"a",%progbits
 535              		.align	2
 536              		.set	.LANCHOR1,. + 0
 539              	blinkLEDTask_attributes:
 540 0000 18000000 		.word	.LC2
 541 0004 00000000 		.space	16
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 17


 541      00000000 
 541      00000000 
 541      00000000 
 542 0014 80000000 		.word	128
 543 0018 19000000 		.word	25
 544 001c 00000000 		.space	8
 544      00000000 
 545              		.section	.rodata.str1.4,"aMS",%progbits,1
 546              		.align	2
 547              	.LC0:
 548 0000 4E6F726D 		.ascii	"Normal\012\015\000"
 548      616C0A0D 
 548      00
 549 0009 000000   		.space	3
 550              	.LC1:
 551 000c 636F6D55 		.ascii	"comUSBTask\000"
 551      53425461 
 551      736B00
 552 0017 00       		.space	1
 553              	.LC2:
 554 0018 626C696E 		.ascii	"blinkLEDTask\000"
 554      6B4C4544 
 554      5461736B 
 554      00
 555 0025 000000   		.space	3
 556              	.LC3:
 557 0028 64656661 		.ascii	"defaultTask\000"
 557      756C7454 
 557      61736B00 
 558              		.section	.rodata.comUSBTask_attributes,"a",%progbits
 559              		.align	2
 560              		.set	.LANCHOR2,. + 0
 563              	comUSBTask_attributes:
 564 0000 0C000000 		.word	.LC1
 565 0004 00000000 		.space	16
 565      00000000 
 565      00000000 
 565      00000000 
 566 0014 80000000 		.word	128
 567 0018 19000000 		.word	25
 568 001c 00000000 		.space	8
 568      00000000 
 569              		.text
 570              	.Letext0:
 571              		.file 2 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 572              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 573              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f302x8.h"
 574              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 575              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 576              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 577              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 578              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 579              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 580              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 581              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 582              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  D:\Programme\Cygwin\tmp\cc9PKoDA.s 			page 18


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
D:\Programme\Cygwin\tmp\cc9PKoDA.s:22     .text.MX_GPIO_Init:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
D:\Programme\Cygwin\tmp\cc9PKoDA.s:134    .text.MX_GPIO_Init:00000094 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:142    .text.MX_USART2_UART_Init:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:146    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
D:\Programme\Cygwin\tmp\cc9PKoDA.s:189    .text.MX_USART2_UART_Init:00000028 $d
                            *COM*:00000080 huart2
D:\Programme\Cygwin\tmp\cc9PKoDA.s:195    .text.StartComUSBTask:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:200    .text.StartComUSBTask:00000000 StartComUSBTask
D:\Programme\Cygwin\tmp\cc9PKoDA.s:237    .text.StartComUSBTask:00000028 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:243    .text.StartDefaultTask:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:248    .text.StartDefaultTask:00000000 StartDefaultTask
D:\Programme\Cygwin\tmp\cc9PKoDA.s:272    .text.StartTask02:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:277    .text.StartTask02:00000000 StartTask02
D:\Programme\Cygwin\tmp\cc9PKoDA.s:305    .text.StartTask02:00000014 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:310    .text.SystemClock_Config:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:315    .text.SystemClock_Config:00000000 SystemClock_Config
D:\Programme\Cygwin\tmp\cc9PKoDA.s:388    .text.main:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:393    .text.main:00000000 main
D:\Programme\Cygwin\tmp\cc9PKoDA.s:452    .text.main:00000048 $d
                            *COM*:00000004 defaultTaskHandle
                            *COM*:00000004 blinkLEDTaskHandle
                            *COM*:00000004 comUSBTaskHandle
D:\Programme\Cygwin\tmp\cc9PKoDA.s:465    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:470    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
D:\Programme\Cygwin\tmp\cc9PKoDA.s:495    .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:500    .text.Error_Handler:00000000 $t
D:\Programme\Cygwin\tmp\cc9PKoDA.s:505    .text.Error_Handler:00000000 Error_Handler
D:\Programme\Cygwin\tmp\cc9PKoDA.s:563    .rodata.comUSBTask_attributes:00000000 comUSBTask_attributes
D:\Programme\Cygwin\tmp\cc9PKoDA.s:539    .rodata.blinkLEDTask_attributes:00000000 blinkLEDTask_attributes
D:\Programme\Cygwin\tmp\cc9PKoDA.s:528    .rodata.defaultTask_attributes:00000000 defaultTask_attributes
D:\Programme\Cygwin\tmp\cc9PKoDA.s:524    .rodata.defaultTask_attributes:00000000 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:535    .rodata.blinkLEDTask_attributes:00000000 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:546    .rodata.str1.4:00000000 $d
D:\Programme\Cygwin\tmp\cc9PKoDA.s:559    .rodata.comUSBTask_attributes:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_UART_Transmit
osDelay
HAL_GPIO_TogglePin
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osThreadNew
osKernelStart
HAL_IncTick
