pipeline
{
    agent any
    environment {
        LOCAL_BRANCH="loaclBranch"
        MERGE_BRANCH="mergeBranch"
    }
    stages
    {
        stage('Availability Check')
        {
            steps
            {
                echo "Check if all required Tests, Modules"
                // checkout on 
                sh('''
                    git branch 
                    ls
                ''')

                // List all Modules
                MODULES="""${sh(
                    returnStdout: true,
                    script: 'ls "code/*/modules/inc/" | grep ".h" | sed "s/.h//g"'
                )}""" 
                echo ${MODULES}
                // List all Module Tests
                //sh('''
                //    TESTS=$(ls tests/test/ | grep '.c' | sed s/.c//g | sed s/Test//g)
                //    echo $TESTS
                //''')

                // Compar Tests and Modules
                script
                {
                    //String mods[]=env.MODULES.split();
                    //String tests[]=env.TESTS.split();
                    int avaiable = 0;
                    
                    println("Availability Check Scipt");
                    println("${MODULES}");
                    //println("${env.TESTS}");
                    
                    // Compare List of Modules and Module Tests
                    //mods.each{
                    //    print("Module: ");
                    //    println(it);
                    //}
                    //tests="${env.TESTS}".split();
                    //tests.each{
                    //    print("Tests: ");
                    //    println(it);
                    //}
                    //mods.each
                    //{ String mod ->
                    //    print("Check Module: ");
                    //    println(mod);
                    //    tests.each
                    //    { String test ->
                    //        print("Module:")
                    //        print(mod);
                    //        print(" <-> Test:")
                    //        print(test)
                    //        if(mod==test)
                    //        {
                    //            println(" (match) ")
                    //            avaiable = 1;
                    //        }else{
                    //            println(" (no match) ")
                    //        }
                    //    }
                    //    if (avaiable == 0)
                    //    {
                    //        // no match found
                    //        return 1;
                    //    }
                    //    else
                    //    {
                    //        avaiable = 0;
                    //    }
                    //}
                    
                }
            }
        }
        stage('Build')
        {
            steps
            {
                echo "Build Project"
                
                // Execute Build
                sh('''
                    cd code/*/
                    make clean
                    make
                    cd ../..    
                ''')

                // Flash Device

                // Exucute Doxygen
            }
        }
        stage('Test & Analysis')
        {
            parallel
            {
                stage('Static Code Analysis')
                {
                    steps
                    {
                        echo "Static Code Analysis"
                        // Execute the Static Code Analysis of every Module
                        sh('''
                            ./exec/scripts/cpa-auto.sh "$Modules"
                        ''')
                    }
                }
                stage('Unit Test (off target)')
                {
                    steps
                    {
                        echo "Unit Test"
                        // Execute the Unit Test of every Module
                        sh('''
                            cd test/
                            make
                            cd ..
                        ''')
                    }
                }
            }
        }
        stage('Deploy')
        {
            steps
            {
                echo "Deploy" 
                sh('''  
                    #git add output/
                    #git commit -m "Jenkins: Successful Feature Check"
                    #git checkout -b $MERGE_BR
                    #git merge $LOC_BR
                    #git push origin $MERGE_BR:$MERGE_BR
                    #curl <github merge request>
                ''')
            }
        }
    }
    post
    {
        success {
            echo 'The pipe succeded'
            cleanUp();
        }
        unstable {
            echo 'the pipe failed'
            cleanUp();
        }
        failure {
            echo 'the pipe failed'
            sh('''  
                   #git add output/
                   #git commit -m "Jenkins: Successful Feature Check"
                   #git checkout -b GIT_LOCAL_BRANCH
                   #git merge $LOC_BR
                   #git push origin $GIT_BRANCH
            ''')
            cleanUp();
            
        }
    }
}


/**
* @description: This function is used to delete all files at a especial location
*       
*/
def cleanUp()
{
    sh('''
        ls
        rm -fr *
    ''')
}
