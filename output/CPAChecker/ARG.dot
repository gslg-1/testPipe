digraph ARG {
node [style="filled" shape="box" color="white"]
0 [label="0 @ N387\nmain entry\nValueAnalysisState: []\n" id="0"]
1 [label="1 @ N518\nmain\nValueAnalysisState: []\n" id="1"]
2 [label="2 @ N389\nmain\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="2"]
3 [label="3 @ N402\nSystemClock_Config entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="3"]
4 [label="4 @ N415\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="4"]
23 [label="23 @ N412\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="23"]
25 [label="25 @ N425\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="25"]
36 [label="36 @ N422\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="36"]
14 [label="14 @ N401\nSystemClock_Config exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="14"]
17 [label="17 @ N390\nmain\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="17"]
18 [label="18 @ N446\nMX_GPIO_Init entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="18"]
19 [label="19 @ N486\nMX_GPIO_Init\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="19"]
20 [label="20 @ N445\nMX_GPIO_Init exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="20"]
38 [label="38 @ N391\nmain\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="38"]
39 [label="39 @ N428\nMX_USART2_UART_Init entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="39"]
40 [label="40 @ N443\nMX_USART2_UART_Init\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="40"]
56 [label="56 @ N440\nMX_USART2_UART_Init\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="56"]
45 [label="45 @ N427\nMX_USART2_UART_Init exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="45"]
50 [label="50 @ N392\nmain\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="50"]
51 [label="51 @ N397\nmain\nValueAnalysisState: []\n" id="51"]
52 [label="52 @ N398\nmain\nValueAnalysisState: []\n" id="52"]
53 [label="53 @ N399\nmain\nValueAnalysisState: []\n" id="53"]
58 [fillcolor="green" label="58 @ N398\nmain\nValueAnalysisState: []\n" id="58"]
41 [label="41 @ N441\nMX_USART2_UART_Init\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="41"]
43 [label="43 @ N516\nError_Handler entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="43"]
44 [label="44 @ N517\nError_Handler\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="44"]
46 [label="46 @ N515\nError_Handler exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="46"]
54 [label="54 @ N444\nMX_USART2_UART_Init\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="54"]
28 [label="28 @ N423\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="28"]
30 [label="30 @ N516\nError_Handler entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="30"]
31 [label="31 @ N517\nError_Handler\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="31"]
33 [label="33 @ N515\nError_Handler exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="33"]
48 [label="48 @ N426\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="48"]
11 [label="11 @ N516\nError_Handler entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t ), SystemClock_Config::__CPAchecker_TMP_0=NumericValue [number=0] (signed int)]\n" id="11"]
13 [label="13 @ N517\nError_Handler\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t ), SystemClock_Config::__CPAchecker_TMP_0=NumericValue [number=0] (signed int)]\n" id="13"]
16 [label="16 @ N515\nError_Handler exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t ), SystemClock_Config::__CPAchecker_TMP_0=NumericValue [number=0] (signed int)]\n" id="16"]
5 [label="5 @ N413\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="5"]
7 [label="7 @ N516\nError_Handler entry\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="7"]
12 [label="12 @ N517\nError_Handler\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="12"]
15 [label="15 @ N515\nError_Handler exit\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="15"]
21 [label="21 @ N416\nSystemClock_Config\nValueAnalysisState: [blinkLEDTaskHandle=NumericValue [number=0] (osThreadId_t ), comUSBTaskHandle=NumericValue [number=0] (osThreadId_t ), defaultTaskHandle=NumericValue [number=0] (osThreadId_t )]\n" id="21"]
0 -> 1 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [label="Lines 20 - 4168: \lenum __anon_type_0 {   NonMaskableInt_IRQn = -14,   HardFault_IRQn = -13,   MemoryManagement_IRQn = -12,   BusFault_IRQn = -11,   UsageFault_IRQn = -10,   SVCall_IRQn = -5,   DebugMonitor_IRQn = -4,   PendSV_IRQn = -2,   SysTick_IRQn = -1,   WWDG_IRQn = 0,   PVD_IRQn = 1,   TAMP_STAMP_IRQn = 2,   RTC_WKUP_IRQn = 3,   FLASH_IRQn = 4,   RCC_IRQn = 5,   EXTI0_IRQn = 6,   EXTI1_IRQn = 7,   EXTI2_TSC_IRQn = 8,   EXTI3_IRQn = 9,   EXTI4_IRQn = 10,   DMA1_Channel1_IRQn = 11,   DMA1_Channel2_IRQn = 12,   DMA1_Channel3_IRQn = 13,   DMA1_Channel4_IRQn = 14,   DMA1_Channel5_IRQn = 15,   DMA1_Channel6_IRQn = 16,   DMA1_Channel7_IRQn = 17,   ADC1_IRQn = 18,   USB_HP_CAN_TX_IRQn = 19,   USB_LP_CAN_RX0_IRQn = 20,   CAN_RX1_IRQn = 21,   CAN_SCE_IRQn = 22,   EXTI9_5_IRQn = 23,   TIM1_BRK_TIM15_IRQn = 24,   TIM1_UP_TIM16_IRQn = 25,   TIM1_TRG_COM_TIM17_IRQn = 26,   TIM1_CC_IRQn = 27,   TIM2_IRQn = 28,   I2C1_EV_IRQn = 31,   I2C1_ER_IRQn = 32,   I2C2_EV_IRQn = 33,   I2C2_ER_IRQn = 34,   SPI2_IRQn = 36,   USART1_IRQn = 37,   USART2_IRQn = 38,   USART3_IRQn = 39,   EXTI15_10_IRQn = 40,   RTC_Alarm_IRQn = 41,   USBWakeUp_IRQn = 42,   SPI3_IRQn = 51,   TIM6_DAC_IRQn = 54,   COMP2_IRQn = 64,   COMP4_6_IRQn = 65,   I2C3_EV_IRQn = 72,   I2C3_ER_IRQn = 73,   USB_HP_IRQn = 74,   USB_LP_IRQn = 75,   USBWakeUp_RMP_IRQn = 76,   FPU_IRQn = 81 } ;\ltypedef enum __anon_type_0 IRQn_Type;\ltypedef signed char __int8_t;\ltypedef unsigned char __uint8_t;\ltypedef short int __int16_t;\ltypedef unsigned short int __uint16_t;\ltypedef long int __int32_t;\ltypedef unsigned long int __uint32_t;\ltypedef long long int __int64_t;\ltypedef unsigned long long int __uint64_t;\ltypedef signed char __int_least8_t;\ltypedef unsigned char __uint_least8_t;\ltypedef short int __int_least16_t;\ltypedef unsigned short int __uint_least16_t;\ltypedef long int __int_least32_t;\ltypedef unsigned long int __uint_least32_t;\ltypedef long long int __int_least64_t;\ltypedef unsigned long long int __uint_least64_t;\ltypedef int __intptr_t;\ltypedef unsigned int __uintptr_t;\ltypedef __int8_t int8_t;\ltypedef __uint8_t uint8_t;\ltypedef __int16_t int16_t;\ltypedef __uint16_t uint16_t;\ltypedef __int32_t int32_t;\ltypedef __uint32_t uint32_t;\ltypedef __int64_t int64_t;\ltypedef __uint64_t uint64_t;\ltypedef __intptr_t intptr_t;\ltypedef __uintptr_t uintptr_t;\ltypedef __int_least8_t int_least8_t;\ltypedef __uint_least8_t uint_least8_t;\ltypedef __int_least16_t int_least16_t;\ltypedef __uint_least16_t uint_least16_t;\ltypedef __int_least32_t int_least32_t;\ltypedef __uint_least32_t uint_least32_t;\ltypedef __int_least64_t int_least64_t;\ltypedef __uint_least64_t uint_least64_t;\ltypedef int int_fast8_t;\ltypedef unsigned int uint_fast8_t;\ltypedef int int_fast16_t;\ltypedef unsigned int uint_fast16_t;\ltypedef int int_fast32_t;\ltypedef unsigned int uint_fast32_t;\ltypedef long long int int_fast64_t;\ltypedef unsigned long long int uint_fast64_t;\ltypedef long long int intmax_t;\ltypedef unsigned long long int uintmax_t;\lstruct T_UINT32 {   uint32_t v; } ;\lstruct T_UINT16_WRITE {   uint16_t v; } ;\lstruct T_UINT16_READ {   uint16_t v; } ;\lstruct T_UINT32_WRITE {   uint32_t v; } ;\lstruct T_UINT32_READ {   uint32_t v; } ;\lvoid __enable_irq();\lvoid __disable_irq();\luint32_t __get_CONTROL();\lvoid __set_CONTROL(uint32_t control);\luint32_t __get_IPSR();\luint32_t __get_APSR();\luint32_t __get_xPSR();\luint32_t __get_PSP();\lvoid __set_PSP(uint32_t topOfProcStack);\luint32_t __get_MSP();\lvoid __set_MSP(uint32_t topOfMainStack);\luint32_t __get_PRIMASK();\lvoid __set_PRIMASK(uint32_t priMask);\luint32_t __get_FPSCR();\lvoid __set_FPSCR(uint32_t fpscr);\lvoid __ISB();\lvoid __DSB();\lvoid __DMB();\luint32_t __REV(uint32_t value);\luint32_t __REV16(uint32_t value);\lint16_t __REVSH(int16_t value);\luint32_t __ROR(uint32_t op1, uint32_t op2);\luint32_t __RBIT(uint32_t value);\lint32_t __SSAT(int32_t val, uint32_t sat);\luint32_t __USAT(int32_t val, uint32_t sat);\lstruct __anon_type_1 {   uint32_t _reserved0 : 16;   uint32_t GE : 4;   uint32_t _reserved1 : 7;   uint32_t Q : 1;   uint32_t V : 1;   uint32_t C : 1;   uint32_t Z : 1;   uint32_t N : 1; } ;\lunion __anon_type_APSR_Type {   struct __anon_type_1 b;   uint32_t w; } ;\ltypedef union __anon_type_APSR_Type APSR_Type;\lstruct __anon_type_2 {   uint32_t ISR : 9;   uint32_t _reserved0 : 23; } ;\lunion __anon_type_IPSR_Type {   struct __anon_type_2 b;   uint32_t w; } ;\ltypedef union __anon_type_IPSR_Type IPSR_Type;\lstruct __anon_type_3 {   uint32_t ISR : 9;   uint32_t _reserved0 : 1;   uint32_t ICI_IT_1 : 6;   uint32_t GE : 4;   uint32_t _reserved1 : 4;   uint32_t T : 1;   uint32_t ICI_IT_2 : 2;   uint32_t Q : 1;   uint32_t V : 1;   uint32_t C : 1;   uint32_t Z : 1;   uint32_t N : 1; } ;\lunion __anon_type_xPSR_Type {   struct __anon_type_3 b;   uint32_t w; } ;\ltypedef union __anon_type_xPSR_Type xPSR_Type;\lstruct __anon_type_4 {   uint32_t nPRIV : 1;   uint32_t SPSEL : 1;   uint32_t FPCA : 1;   uint32_t _reserved0 : 29; } ;\lunion __anon_type_CONTROL_Type {   struct __anon_type_4 b;   uint32_t w; } ;\ltypedef union __anon_type_CONTROL_Type CONTROL_Type;\lstruct __anon_type_NVIC_Type {   volatile uint32_t ISER[8U];   uint32_t RESERVED0[24U];   volatile uint32_t ICER[8U];   uint32_t RSERVED1[24U];   volatile uint32_t ISPR[8U];   uint32_t RESERVED2[24U];   volatile uint32_t ICPR[8U];   uint32_t RESERVED3[24U];   volatile uint32_t IABR[8U];   uint32_t RESERVED4[56U];   volatile uint8_t IP[240U];   uint32_t RESERVED5[644U];   volatile uint32_t STIR; } ;\ltypedef struct __anon_type_NVIC_Type NVIC_Type;\lstruct __anon_type_SCB_Type {   const volatile uint32_t CPUID;   volatile uint32_t ICSR;   volatile uint32_t VTOR;   volatile uint32_t AIRCR;   volatile uint32_t SCR;   volatile uint32_t CCR;   volatile uint8_t SHP[12U];   volatile uint32_t SHCSR;   volatile uint32_t CFSR;   volatile uint32_t HFSR;   volatile uint32_t DFSR;   volatile uint32_t MMFAR;   volatile uint32_t BFAR;   volatile uint32_t AFSR;   const volatile uint32_t PFR[2U];   const volatile uint32_t DFR;   const volatile uint32_t ADR;   const volatile uint32_t MMFR[4U];   const volatile uint32_t ISAR[5U];   uint32_t RESERVED0[5U];   volatile uint32_t CPACR; } ;\ltypedef struct __anon_type_SCB_Type SCB_Type;\lstruct __anon_type_SCnSCB_Type {   uint32_t RESERVED0[1U];   const volatile uint32_t ICTR;   volatile uint32_t ACTLR; } ;\ltypedef struct __anon_type_SCnSCB_Type SCnSCB_Type;\lstruct __anon_type_SysTick_Type {   volatile uint32_t CTRL;   volatile uint32_t LOAD;   volatile uint32_t VAL;   const volatile uint32_t CALIB; } ;\ltypedef struct __anon_type_SysTick_Type SysTick_Type;\lvolatile union __anon_type_5 {   volatile uint8_t u8;   volatile uint16_t u16;   volatile uint32_t u32; } ;\lstruct __anon_type_ITM_Type {   volatile union __anon_type_5 PORT[32U];   uint32_t RESERVED0[864U];   volatile uint32_t TER;   uint32_t RESERVED1[15U];   volatile uint32_t TPR;   uint32_t RESERVED2[15U];   volatile uint32_t TCR;   uint32_t RESERVED3[29U];   volatile uint32_t IWR;   const volatile uint32_t IRR;   volatile uint32_t IMCR;   uint32_t RESERVED4[43U];   volatile uint32_t LAR;   const volatile uint32_t LSR;   uint32_t RESERVED5[6U];   const volatile uint32_t PID4;   const volatile uint32_t PID5;   const volatile uint32_t PID6;   const volatile uint32_t PID7;   const volatile uint32_t PID0;   const volatile uint32_t PID1;   const volatile uint32_t PID2;   const volatile uint32_t PID3;   const volatile uint32_t CID0;   const volatile uint32_t CID1;   const volatile uint32_t CID2;   const volatile uint32_t CID3; } ;\ltypedef struct __anon_type_ITM_Type ITM_Type;\lstruct __anon_type_DWT_Type {   volatile uint32_t CTRL;   volatile uint32_t CYCCNT;   volatile uint32_t CPICNT;   volatile uint32_t EXCCNT;   volatile uint32_t SLEEPCNT;   volatile uint32_t LSUCNT;   volatile uint32_t FOLDCNT;   const volatile uint32_t PCSR;   volatile uint32_t COMP0;   volatile uint32_t MASK0;   volatile uint32_t FUNCTION0;   uint32_t RESERVED0[1U];   volatile uint32_t COMP1;   volatile uint32_t MASK1;   volatile uint32_t FUNCTION1;   uint32_t RESERVED1[1U];   volatile uint32_t COMP2;   volatile uint32_t MASK2;   volatile uint32_t FUNCTION2;   uint32_t RESERVED2[1U];   volatile uint32_t COMP3;   volatile uint32_t MASK3;   volatile uint32_t FUNCTION3; } ;\ltypedef struct __anon_type_DWT_Type DWT_Type;\lstruct __anon_type_TPI_Type {   const volatile uint32_t SSPSR;   volatile uint32_t CSPSR;   uint32_t RESERVED0[2U];   volatile uint32_t ACPR;   uint32_t RESERVED1[55U];   volatile uint32_t SPPR;   uint32_t RESERVED2[131U];   const volatile uint32_t FFSR;   volatile uint32_t FFCR;   const volatile uint32_t FSCR;   uint32_t RESERVED3[759U];   const volatile uint32_t TRIGGER;   const volatile uint32_t FIFO0;   const volatile uint32_t ITATBCTR2;   uint32_t RESERVED4[1U];   const volatile uint32_t ITATBCTR0;   const volatile uint32_t FIFO1;   volatile uint32_t ITCTRL;   uint32_t RESERVED5[39U];   volatile uint32_t CLAIMSET;   volatile uint32_t CLAIMCLR;   uint32_t RESERVED7[8U];   const volatile uint32_t DEVID;   const volatile uint32_t DEVTYPE; } ;\ltypedef struct __anon_type_TPI_Type TPI_Type;\lstruct __anon_type_FPU_Type {   uint32_t RESERVED0[1U];   volatile uint32_t FPCCR;   volatile uint32_t FPCAR;   volatile uint32_t FPDSCR;   const volatile uint32_t MVFR0;   const volatile uint32_t MVFR1; } ;\ltypedef struct __anon_type_FPU_Type FPU_Type;\lstruct __anon_type_CoreDebug_Type {   volatile uint32_t DHCSR;   volatile uint32_t DCRSR;   volatile uint32_t DCRDR;   volatile uint32_t DEMCR; } ;\ltypedef struct __anon_type_CoreDebug_Type CoreDebug_Type;\lvoid __NVIC_SetPriorityGrouping(uint32_t PriorityGroup);\luint32_t __NVIC_GetPriorityGrouping();\lvoid __NVIC_EnableIRQ(IRQn_Type IRQn);\luint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn);\lvoid __NVIC_DisableIRQ(IRQn_Type IRQn);\luint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn);\lvoid __NVIC_SetPendingIRQ(IRQn_Type IRQn);\lvoid __NVIC_ClearPendingIRQ(IRQn_Type IRQn);\luint32_t __NVIC_GetActive(IRQn_Type IRQn);\lvoid __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority);\luint32_t __NVIC_GetPriority(IRQn_Type IRQn);\luint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority);\lvoid NVIC_DecodePriority(uint32_t Priority, uint32_t PriorityGroup, uint32_t * const pPreemptPriority, uint32_t * const pSubPriority);\lvoid __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector);\luint32_t __NVIC_GetVector(IRQn_Type IRQn);\lvoid __NVIC_SystemReset();\luint32_t SCB_GetFPUType();\luint32_t SysTick_Config(uint32_t ticks);\lextern volatile int32_t ITM_RxBuffer;\luint32_t ITM_SendChar(uint32_t ch);\lint32_t ITM_ReceiveChar();\lint32_t ITM_CheckChar();\lextern uint32_t SystemCoreClock;\lextern const uint8_t AHBPrescTable[16];\lextern const uint8_t APBPrescTable[8];\lvoid SystemInit();\lvoid SystemCoreClockUpdate();\lstruct __anon_type_ADC_TypeDef {   volatile uint32_t ISR;   volatile uint32_t IER;   volatile uint32_t CR;   volatile uint32_t CFGR;   uint32_t RESERVED0;   volatile uint32_t SMPR1;   volatile uint32_t SMPR2;   uint32_t RESERVED1;   volatile uint32_t TR1;   volatile uint32_t TR2;   volatile uint32_t TR3;   uint32_t RESERVED2;   volatile uint32_t SQR1;   volatile uint32_t SQR2;   volatile uint32_t SQR3;   volatile uint32_t SQR4;   volatile uint32_t DR;   uint32_t RESERVED3;   uint32_t RESERVED4;   volatile uint32_t JSQR;   uint32_t RESERVED5[4];   volatile uint32_t OFR1;   volatile uint32_t OFR2;   volatile uint32_t OFR3;   volatile uint32_t OFR4;   uint32_t RESERVED6[4];   volatile uint32_t JDR1;   volatile uint32_t JDR2;   volatile uint32_t JDR3;   volatile uint32_t JDR4;   uint32_t RESERVED7[4];   volatile uint32_t AWD2CR;   volatile uint32_t AWD3CR;   uint32_t RESERVED8;   uint32_t RESERVED9;   volatile uint32_t DIFSEL;   volatile uint32_t CALFACT; } ;\ltypedef struct __anon_type_ADC_TypeDef ADC_TypeDef;\lstruct __anon_type_ADC_Common_TypeDef {   volatile uint32_t CSR;   uint32_t RESERVED;   volatile uint32_t CCR;   volatile uint32_t CDR; } ;\ltypedef struct __anon_type_ADC_Common_TypeDef ADC_Common_TypeDef;\lstruct __anon_type_CAN_TxMailBox_TypeDef {   volatile uint32_t TIR;   volatile uint32_t TDTR;   volatile uint32_t TDLR;   volatile uint32_t TDHR; } ;\ltypedef struct __anon_type_CAN_TxMailBox_TypeDef CAN_TxMailBox_TypeDef;\lstruct __anon_type_CAN_FIFOMailBox_TypeDef {   volatile uint32_t RIR;   volatile uint32_t RDTR;   volatile uint32_t RDLR;   volatile uint32_t RDHR; } ;\ltypedef struct __anon_type_CAN_FIFOMailBox_TypeDef CAN_FIFOMailBox_TypeDef;\lstruct __anon_type_CAN_FilterRegister_TypeDef {   volatile uint32_t FR1;   volatile uint32_t FR2; } ;\ltypedef struct __anon_type_CAN_FilterRegister_TypeDef CAN_FilterRegister_TypeDef;\lstruct __anon_type_CAN_TypeDef {   volatile uint32_t MCR;   volatile uint32_t MSR;   volatile uint32_t TSR;   volatile uint32_t RF0R;   volatile uint32_t RF1R;   volatile uint32_t IER;   volatile uint32_t ESR;   volatile uint32_t BTR;   uint32_t RESERVED0[88];   CAN_TxMailBox_TypeDef sTxMailBox[3];   CAN_FIFOMailBox_TypeDef sFIFOMailBox[2];   uint32_t RESERVED1[12];   volatile uint32_t FMR;   volatile uint32_t FM1R;   uint32_t RESERVED2;   volatile uint32_t FS1R;   uint32_t RESERVED3;   volatile uint32_t FFA1R;   uint32_t RESERVED4;   volatile uint32_t FA1R;   uint32_t RESERVED5[8];   CAN_FilterRegister_TypeDef sFilterRegister[28]; } ;\ltypedef struct __anon_type_CAN_TypeDef CAN_TypeDef;\lstruct __anon_type_COMP_TypeDef {   volatile uint32_t CSR; } ;\ltypedef struct __anon_type_COMP_TypeDef COMP_TypeDef;\lstruct __anon_type_COMP_Common_TypeDef {   volatile uint32_t CSR; } ;\ltypedef struct __anon_type_COMP_TypeDef COMP_Common_TypeDef;\lstruct __anon_type_CRC_TypeDef {   volatile uint32_t DR;   volatile uint8_t IDR;   uint8_t RESERVED0;   uint16_t RESERVED1;   volatile uint32_t CR;   uint32_t RESERVED2;   volatile uint32_t INIT;   volatile uint32_t POL; } ;\ltypedef struct __anon_type_CRC_TypeDef CRC_TypeDef;\lstruct __anon_type_DAC_TypeDef {   volatile uint32_t CR;   volatile uint32_t SWTRIGR;   volatile uint32_t DHR12R1;   volatile uint32_t DHR12L1;   volatile uint32_t DHR8R1;   volatile uint32_t RESERVED0;   volatile uint32_t RESERVED1;   volatile uint32_t RESERVED2;   volatile uint32_t DHR12RD;   volatile uint32_t DHR12LD;   volatile uint32_t DHR8RD;   volatile uint32_t DOR1;   volatile uint32_t RESERVED3;   volatile uint32_t SR; } ;\ltypedef struct __anon_type_DAC_TypeDef DAC_TypeDef;\lstruct __anon_type_DBGMCU_TypeDef {   volatile uint32_t IDCODE;   volatile uint32_t CR;   volatile uint32_t APB1FZ;   volatile uint32_t APB2FZ; } ;\ltypedef struct __anon_type_DBGMCU_TypeDef DBGMCU_TypeDef;\lstruct __anon_type_DMA_Channel_TypeDef {   volatile uint32_t CCR;   volatile uint32_t CNDTR;   volatile uint32_t CPAR;   volatile uint32_t CMAR; } ;\ltypedef struct __anon_type_DMA_Channel_TypeDef DMA_Channel_TypeDef;\lstruct __anon_type_DMA_TypeDef {   volatile uint32_t ISR;   volatile uint32_t IFCR; } ;\ltypedef struct __anon_type_DMA_TypeDef DMA_TypeDef;\lstruct __anon_type_EXTI_TypeDef {   volatile uint32_t IMR;   volatile uint32_t EMR;   volatile uint32_t RTSR;   volatile uint32_t FTSR;   volatile uint32_t SWIER;   volatile uint32_t PR;   uint32_t RESERVED1;   uint32_t RESERVED2;   volatile uint32_t IMR2;   volatile uint32_t EMR2;   volatile uint32_t RTSR2;   volatile uint32_t FTSR2;   volatile uint32_t SWIER2;   volatile uint32_t PR2; } ;\ltypedef struct __anon_type_EXTI_TypeDef EXTI_TypeDef;\lstruct __anon_type_FLASH_TypeDef {   volatile uint32_t ACR;   volatile uint32_t KEYR;   volatile uint32_t OPTKEYR;   volatile uint32_t SR;   volatile uint32_t CR;   volatile uint32_t AR;   uint32_t RESERVED;   volatile uint32_t OBR;   volatile uint32_t WRPR; } ;\ltypedef struct __anon_type_FLASH_TypeDef FLASH_TypeDef;\lstruct __anon_type_OB_TypeDef {   volatile uint16_t RDP;   volatile uint16_t USER;   volatile uint16_t Data0;   volatile uint16_t Data1;   volatile uint16_t WRP0;   volatile uint16_t WRP1; } ;\ltypedef struct __anon_type_OB_TypeDef OB_TypeDef;\lstruct __anon_type_GPIO_TypeDef {   volatile uint32_t MODER;   volatile uint32_t OTYPER;   volatile uint32_t OSPEEDR;   volatile uint32_t PUPDR;   volatile uint32_t IDR;   volatile uint32_t ODR;   volatile uint32_t BSRR;   volatile uint32_t LCKR;   volatile uint32_t AFR[2];   volatile uint32_t BRR; } ;\ltypedef struct __anon_type_GPIO_TypeDef GPIO_TypeDef;\lstruct __anon_type_OPAMP_TypeDef {   volatile uint32_t CSR; } ;\ltypedef struct __anon_type_COMP_TypeDef OPAMP_TypeDef;\lstruct __anon_type_SYSCFG_TypeDef {   volatile uint32_t CFGR1;   uint32_t RESERVED;   volatile uint32_t EXTICR[4];   volatile uint32_t CFGR2; } ;\ltypedef struct __anon_type_SYSCFG_TypeDef SYSCFG_TypeDef;\lstruct __anon_type_I2C_TypeDef {   volatile uint32_t CR1;   volatile uint32_t CR2;   volatile uint32_t OAR1;   volatile uint32_t OAR2;   volatile uint32_t TIMINGR;   volatile uint32_t TIMEOUTR;   volatile uint32_t ISR;   volatile uint32_t ICR;   volatile uint32_t PECR;   volatile uint32_t RXDR;   volatile uint32_t TXDR; } ;\ltypedef struct __anon_type_I2C_TypeDef I2C_TypeDef;\lstruct __anon_type_IWDG_TypeDef {   volatile uint32_t KR;   volatile uint32_t PR;   volatile uint32_t RLR;   volatile uint32_t SR;   volatile uint32_t WINR; } ;\ltypedef struct __anon_type_IWDG_TypeDef IWDG_TypeDef;\lstruct __anon_type_PWR_TypeDef {   volatile uint32_t CR;   volatile uint32_t CSR; } ;\ltypedef struct __anon_type_PWR_TypeDef PWR_TypeDef;\lstruct __anon_type_RCC_TypeDef {   volatile uint32_t CR;   volatile uint32_t CFGR;   volatile uint32_t CIR;   volatile uint32_t APB2RSTR;   volatile uint32_t APB1RSTR;   volatile uint32_t AHBENR;   volatile uint32_t APB2ENR;   volatile uint32_t APB1ENR;   volatile uint32_t BDCR;   volatile uint32_t CSR;   volatile uint32_t AHBRSTR;   volatile uint32_t CFGR2;   volatile uint32_t CFGR3; } ;\ltypedef struct __anon_type_RCC_TypeDef RCC_TypeDef;\lstruct __anon_type_RTC_TypeDef {   volatile uint32_t TR;   volatile uint32_t DR;   volatile uint32_t CR;   volatile uint32_t ISR;   volatile uint32_t PRER;   volatile uint32_t WUTR;   uint32_t RESERVED0;   volatile uint32_t ALRMAR;   volatile uint32_t ALRMBR;   volatile uint32_t WPR;   volatile uint32_t SSR;   volatile uint32_t SHIFTR;   volatile uint32_t TSTR;   volatile uint32_t TSDR;   volatile uint32_t TSSSR;   volatile uint32_t CALR;   volatile uint32_t TAFCR;   volatile uint32_t ALRMASSR;   volatile uint32_t ALRMBSSR;   uint32_t RESERVED7;   volatile uint32_t BKP0R;   volatile uint32_t BKP1R;   volatile uint32_t BKP2R;   volatile uint32_t BKP3R;   volatile uint32_t BKP4R;   volatile uint32_t BKP5R;   volatile uint32_t BKP6R;   volatile uint32_t BKP7R;   volatile uint32_t BKP8R;   volatile uint32_t BKP9R;   volatile uint32_t BKP10R;   volatile uint32_t BKP11R;   volatile uint32_t BKP12R;   volatile uint32_t BKP13R;   volatile uint32_t BKP14R;   volatile uint32_t BKP15R;   volatile uint32_t BKP16R;   volatile uint32_t BKP17R;   volatile uint32_t BKP18R;   volatile uint32_t BKP19R; } ;\ltypedef struct __anon_type_RTC_TypeDef RTC_TypeDef;\lstruct __anon_type_SPI_TypeDef {   volatile uint32_t CR1;   volatile uint32_t CR2;   volatile uint32_t SR;   volatile uint32_t DR;   volatile uint32_t CRCPR;   volatile uint32_t RXCRCR;   volatile uint32_t TXCRCR;   volatile uint32_t I2SCFGR;   volatile uint32_t I2SPR; } ;\ltypedef struct __anon_type_SPI_TypeDef SPI_TypeDef;\lstruct __anon_type_TIM_TypeDef {   volatile uint32_t CR1;   volatile uint32_t CR2;   volatile uint32_t SMCR;   volatile uint32_t DIER;   volatile uint32_t SR;   volatile uint32_t EGR;   volatile uint32_t CCMR1;   volatile uint32_t CCMR2;   volatile uint32_t CCER;   volatile uint32_t CNT;   volatile uint32_t PSC;   volatile uint32_t ARR;   volatile uint32_t RCR;   volatile uint32_t CCR1;   volatile uint32_t CCR2;   volatile uint32_t CCR3;   volatile uint32_t CCR4;   volatile uint32_t BDTR;   volatile uint32_t DCR;   volatile uint32_t DMAR;   volatile uint32_t OR;   volatile uint32_t CCMR3;   volatile uint32_t CCR5;   volatile uint32_t CCR6; } ;\ltypedef struct __anon_type_TIM_TypeDef TIM_TypeDef;\lstruct __anon_type_TSC_TypeDef {   volatile uint32_t CR;   volatile uint32_t IER;   volatile uint32_t ICR;   volatile uint32_t ISR;   volatile uint32_t IOHCR;   uint32_t RESERVED1;   volatile uint32_t IOASCR;   uint32_t RESERVED2;   volatile uint32_t IOSCR;   uint32_t RESERVED3;   volatile uint32_t IOCCR;   uint32_t RESERVED4;   volatile uint32_t IOGCSR;   volatile uint32_t IOGXCR[8]; } ;\ltypedef struct __anon_type_TSC_TypeDef TSC_TypeDef;\lstruct __anon_type_USART_TypeDef {   volatile uint32_t CR1;   volatile uint32_t CR2;   volatile uint32_t CR3;   volatile uint32_t BRR;   volatile uint32_t GTPR;   volatile uint32_t RTOR;   volatile uint32_t RQR;   volatile uint32_t ISR;   volatile uint32_t ICR;   volatile uint16_t RDR;   uint16_t RESERVED1;   volatile uint16_t TDR;   uint16_t RESERVED2; } ;\ltypedef struct __anon_type_USART_TypeDef USART_TypeDef;\lstruct __anon_type_USB_TypeDef {   volatile uint16_t EP0R;   volatile uint16_t RESERVED0;   volatile uint16_t EP1R;   volatile uint16_t RESERVED1;   volatile uint16_t EP2R;   volatile uint16_t RESERVED2;   volatile uint16_t EP3R;   volatile uint16_t RESERVED3;   volatile uint16_t EP4R;   volatile uint16_t RESERVED4;   volatile uint16_t EP5R;   volatile uint16_t RESERVED5;   volatile uint16_t EP6R;   volatile uint16_t RESERVED6;   volatile uint16_t EP7R;   volatile uint16_t RESERVED7[17];   volatile uint16_t CNTR;   volatile uint16_t RESERVED8;   volatile uint16_t ISTR;   volatile uint16_t RESERVED9;   volatile uint16_t FNR;   volatile uint16_t RESERVEDA;   volatile uint16_t DADDR;   volatile uint16_t RESERVEDB;   volatile uint16_t BTABLE;   volatile uint16_t RESERVEDC;   volatile uint16_t LPMCSR;   volatile uint16_t RESERVEDD; } ;\ltypedef struct __anon_type_USB_TypeDef USB_TypeDef;\lstruct __anon_type_WWDG_TypeDef {   volatile uint32_t CR;   volatile uint32_t CFR;   volatile uint32_t SR; } ;\ltypedef struct __anon_type_WWDG_TypeDef WWDG_TypeDef;\lenum __anon_type_6 {   RESET = 0,   SET = 1 } ;\ltypedef enum __anon_type_6 FlagStatus;\ltypedef enum __anon_type_6 ITStatus;\lenum __anon_type_7 {   DISABLE = 0,   ENABLE = 1 } ;\ltypedef enum __anon_type_7 FunctionalState;\lenum __anon_type_8 {   SUCCESS = 0,   ERROR = 1 } ;\ltypedef enum __anon_type_8 ErrorStatus;\ltypedef int ptrdiff_t;\ltypedef unsigned int size_t;\ltypedef unsigned int wchar_t;\lstruct __anon_type_max_align_t {   long long __max_align_ll;   long double __max_align_ld; } ;\ltypedef struct __anon_type_max_align_t max_align_t;\lenum __anon_type_9 {   HAL_OK = 0,   HAL_ERROR = 1,   HAL_BUSY = 2,   HAL_TIMEOUT = 3 } ;\ltypedef enum __anon_type_9 HAL_StatusTypeDef;\lenum __anon_type_10 {   HAL_UNLOCKED = 0,   HAL_LOCKED = 1 } ;\ltypedef enum __anon_type_10 HAL_LockTypeDef;\lstruct __anon_type_RCC_PLLInitTypeDef {   uint32_t PLLState;   uint32_t PLLSource;   uint32_t PLLMUL; } ;\ltypedef struct __anon_type_RCC_PLLInitTypeDef RCC_PLLInitTypeDef;\lstruct __anon_type_RCC_OscInitTypeDef {   uint32_t OscillatorType;   uint32_t HSEState;   uint32_t HSEPredivValue;   uint32_t LSEState;   uint32_t HSIState;   uint32_t HSICalibrationValue;   uint32_t LSIState;   RCC_PLLInitTypeDef PLL; } ;\ltypedef struct __anon_type_RCC_OscInitTypeDef RCC_OscInitTypeDef;\lstruct __anon_type_RCC_ClkInitTypeDef {   uint32_t ClockType;   uint32_t SYSCLKSource;   uint32_t AHBCLKDivider;   uint32_t APB1CLKDivider;   uint32_t APB2CLKDivider; } ;\ltypedef struct __anon_type_RCC_ClkInitTypeDef RCC_ClkInitTypeDef;\lstruct __anon_type_RCC_PeriphCLKInitTypeDef {   uint32_t PeriphClockSelection;   uint32_t RTCClockSelection;   uint32_t Usart1ClockSelection;   uint32_t I2c1ClockSelection;   uint32_t I2c2ClockSelection;   uint32_t I2c3ClockSelection;   uint32_t Adc1ClockSelection;   uint32_t I2sClockSelection;   uint32_t Tim1ClockSelection;   uint32_t Tim15ClockSelection;   uint32_t Tim16ClockSelection;   uint32_t Tim17ClockSelection;   uint32_t USBClockSelection; } ;\ltypedef struct __anon_type_RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitTypeDef;\lHAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);\lvoid HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);\luint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk);\lHAL_StatusTypeDef HAL_RCC_DeInit();\lHAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);\lHAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency);\lvoid HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv);\lvoid HAL_RCC_EnableCSS();\lvoid HAL_RCC_NMI_IRQHandler();\lvoid HAL_RCC_CSSCallback();\lvoid HAL_RCC_DisableCSS();\luint32_t HAL_RCC_GetSysClockFreq();\luint32_t HAL_RCC_GetHCLKFreq();\luint32_t HAL_RCC_GetPCLK1Freq();\luint32_t HAL_RCC_GetPCLK2Freq();\lvoid HAL_RCC_GetOscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);\lvoid HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t *pFLatency);\lstruct __anon_type_GPIO_InitTypeDef {   uint32_t Pin;   uint32_t Mode;   uint32_t Pull;   uint32_t Speed;   uint32_t Alternate; } ;\ltypedef struct __anon_type_GPIO_InitTypeDef GPIO_InitTypeDef;\lenum __anon_type_11 {   GPIO_PIN_RESET = 0,   GPIO_PIN_SET = 1 } ;\ltypedef enum __anon_type_11 GPIO_PinState;\lvoid HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init);\lvoid HAL_GPIO_DeInit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin);\lGPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);\lvoid HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);\lvoid HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);\lHAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);\lvoid HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);\lvoid HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);\lenum __anon_type_12 {   HAL_EXTI_COMMON_CB_ID = 0 } ;\ltypedef enum __anon_type_12 EXTI_CallbackIDTypeDef;\lstruct __anon_type_EXTI_HandleTypeDef {   uint32_t Line;   void (*PendingCallback)(); } ;\ltypedef struct __anon_type_EXTI_HandleTypeDef EXTI_HandleTypeDef;\lstruct __anon_type_EXTI_ConfigTypeDef {   uint32_t Line;   uint32_t Mode;   uint32_t Trigger;   uint32_t GPIOSel; } ;\ltypedef struct __anon_type_EXTI_ConfigTypeDef EXTI_ConfigTypeDef;\lHAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig);\lHAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig);\lHAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti);\lHAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)());\lHAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine);\lvoid HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti);\luint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge);\lvoid HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge);\lvoid HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti);\lstruct __anon_type_DMA_InitTypeDef {   uint32_t Direction;   uint32_t PeriphInc;   uint32_t MemInc;   uint32_t PeriphDataAlignment;   uint32_t MemDataAlignment;   uint32_t Mode;   uint32_t Priority; } ;\ltypedef struct __anon_type_DMA_InitTypeDef DMA_InitTypeDef;\lenum __anon_type_13 {   HAL_DMA_STATE_RESET = 0,   HAL_DMA_STATE_READY = 1,   HAL_DMA_STATE_BUSY = 2,   HAL_DMA_STATE_TIMEOUT = 3 } ;\ltypedef enum __anon_type_13 HAL_DMA_StateTypeDef;\lenum __anon_type_14 {   HAL_DMA_FULL_TRANSFER = 0,   HAL_DMA_HALF_TRANSFER = 1 } ;\ltypedef enum __anon_type_14 HAL_DMA_LevelCompleteTypeDef;\lenum __anon_type_15 {   HAL_DMA_XFER_CPLT_CB_ID = 0,   HAL_DMA_XFER_HALFCPLT_CB_ID = 1,   HAL_DMA_XFER_ERROR_CB_ID = 2,   HAL_DMA_XFER_ABORT_CB_ID = 3,   HAL_DMA_XFER_ALL_CB_ID = 4 } ;\ltypedef enum __anon_type_15 HAL_DMA_CallbackIDTypeDef;\lstruct __DMA_HandleTypeDef {   DMA_Channel_TypeDef *Instance;   DMA_InitTypeDef Init;   HAL_LockTypeDef Lock;   HAL_DMA_StateTypeDef State;   void *Parent;   void (*XferCpltCallback)(struct __DMA_HandleTypeDef *hdma);   void (*XferHalfCpltCallback)(struct __DMA_HandleTypeDef *hdma);   void (*XferErrorCallback)(struct __DMA_HandleTypeDef *hdma);   void (*XferAbortCallback)(struct __DMA_HandleTypeDef *hdma);   volatile uint32_t ErrorCode;   DMA_TypeDef *DmaBaseAddress;   uint32_t ChannelIndex; } ;\ltypedef struct __DMA_HandleTypeDef DMA_HandleTypeDef;\lHAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);\lHAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);\lHAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout);\lvoid HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (*pCallback)(DMA_HandleTypeDef *_hdma));\lHAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID);\lHAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma);\luint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma);\lvoid HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);\lvoid HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);\lvoid HAL_NVIC_EnableIRQ(IRQn_Type IRQn);\lvoid HAL_NVIC_DisableIRQ(IRQn_Type IRQn);\lvoid HAL_NVIC_SystemReset();\luint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);\luint32_t HAL_NVIC_GetPriorityGrouping();\lvoid HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority);\luint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);\lvoid HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);\lvoid HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);\luint32_t HAL_NVIC_GetActive(IRQn_Type IRQn);\lvoid HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);\lvoid HAL_SYSTICK_IRQHandler();\lvoid HAL_SYSTICK_Callback();\lenum __anon_type_16 {   FLASH_PROC_NONE = 0,   FLASH_PROC_PAGEERASE = 1,   FLASH_PROC_MASSERASE = 2,   FLASH_PROC_PROGRAMHALFWORD = 3,   FLASH_PROC_PROGRAMWORD = 4,   FLASH_PROC_PROGRAMDOUBLEWORD = 5 } ;\ltypedef enum __anon_type_16 FLASH_ProcedureTypeDef;\lstruct __anon_type_FLASH_ProcessTypeDef {   volatile FLASH_ProcedureTypeDef ProcedureOnGoing;   volatile uint32_t DataRemaining;   volatile uint32_t Address;   volatile uint64_t Data;   HAL_LockTypeDef Lock;   volatile uint32_t ErrorCode; } ;\ltypedef struct __anon_type_FLASH_ProcessTypeDef FLASH_ProcessTypeDef;\lstruct __anon_type_FLASH_EraseInitTypeDef {   uint32_t TypeErase;   uint32_t PageAddress;   uint32_t NbPages; } ;\ltypedef struct __anon_type_FLASH_EraseInitTypeDef FLASH_EraseInitTypeDef;\lstruct __anon_type_FLASH_OBProgramInitTypeDef {   uint32_t OptionType;   uint32_t WRPState;   uint32_t WRPPage;   uint8_t RDPLevel;   uint8_t USERConfig;   uint32_t DATAAddress;   uint8_t DATAData; } ;\ltypedef struct __anon_type_FLASH_OBProgramInitTypeDef FLASH_OBProgramInitTypeDef;\lHAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError);\lHAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit);\lHAL_StatusTypeDef HAL_FLASHEx_OBErase();\lHAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit);\lvoid HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);\luint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress);\lHAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data);\lHAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data);\lvoid HAL_FLASH_IRQHandler();\lvoid HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue);\lvoid HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue);\lHAL_StatusTypeDef HAL_FLASH_Unlock();\lHAL_StatusTypeDef HAL_FLASH_Lock();\lHAL_StatusTypeDef HAL_FLASH_OB_Unlock();\lHAL_StatusTypeDef HAL_FLASH_OB_Lock();\lHAL_StatusTypeDef HAL_FLASH_OB_Launch();\luint32_t HAL_FLASH_GetError();\lHAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout);\lstruct __anon_type_I2C_InitTypeDef {   uint32_t Timing;   uint32_t OwnAddress1;   uint32_t AddressingMode;   uint32_t DualAddressMode;   uint32_t OwnAddress2;   uint32_t OwnAddress2Masks;   uint32_t GeneralCallMode;   uint32_t NoStretchMode; } ;\ltypedef struct __anon_type_I2C_InitTypeDef I2C_InitTypeDef;\lenum __anon_type_17 {   HAL_I2C_STATE_RESET = 0,   HAL_I2C_STATE_READY = 32,   HAL_I2C_STATE_BUSY = 36,   HAL_I2C_STATE_BUSY_TX = 33,   HAL_I2C_STATE_BUSY_RX = 34,   HAL_I2C_STATE_LISTEN = 40,   HAL_I2C_STATE_BUSY_TX_LISTEN = 41,   HAL_I2C_STATE_BUSY_RX_LISTEN = 42,   HAL_I2C_STATE_ABORT = 96,   HAL_I2C_STATE_TIMEOUT = 160,   HAL_I2C_STATE_ERROR = 224 } ;\ltypedef enum __anon_type_17 HAL_I2C_StateTypeDef;\lenum __anon_type_18 {   HAL_I2C_MODE_NONE = 0,   HAL_I2C_MODE_MASTER = 16,   HAL_I2C_MODE_SLAVE = 32,   HAL_I2C_MODE_MEM = 64 } ;\ltypedef enum __anon_type_18 HAL_I2C_ModeTypeDef;\lstruct __I2C_HandleTypeDef {   I2C_TypeDef *Instance;   I2C_InitTypeDef Init;   uint8_t *pBuffPtr;   uint16_t XferSize;   volatile uint16_t XferCount;   volatile uint32_t XferOptions;   volatile uint32_t PreviousState;   HAL_StatusTypeDef (*XferISR)(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources);   DMA_HandleTypeDef *hdmatx;   DMA_HandleTypeDef *hdmarx;   HAL_LockTypeDef Lock;   volatile HAL_I2C_StateTypeDef State;   volatile HAL_I2C_ModeTypeDef Mode;   volatile uint32_t ErrorCode;   volatile uint32_t AddrEventCount; } ;\ltypedef struct __I2C_HandleTypeDef I2C_HandleTypeDef;\lHAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter);\lHAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);\lHAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);\lHAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus);\lvoid HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus);\lHAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c);\lHAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c);\lHAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);\lHAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c);\lHAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c);\lHAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress);\lHAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lHAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);\lvoid HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode);\lvoid HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);\lvoid HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c);\lHAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c);\lHAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c);\luint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c);\lstruct __anon_type_PWR_PVDTypeDef {   uint32_t PVDLevel;   uint32_t Mode; } ;\ltypedef struct __anon_type_PWR_PVDTypeDef PWR_PVDTypeDef;\lvoid HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD);\lvoid HAL_PWR_EnablePVD();\lvoid HAL_PWR_DisablePVD();\lvoid HAL_PWR_PVD_IRQHandler();\lvoid HAL_PWR_PVDCallback();\lvoid HAL_PWR_DeInit();\lvoid HAL_PWR_EnableBkUpAccess();\lvoid HAL_PWR_DisableBkUpAccess();\lvoid HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx);\lvoid HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx);\lvoid HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry);\lvoid HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry);\lvoid HAL_PWR_EnterSTANDBYMode();\lvoid HAL_PWR_EnableSleepOnExit();\lvoid HAL_PWR_DisableSleepOnExit();\lvoid HAL_PWR_EnableSEVOnPend();\lvoid HAL_PWR_DisableSEVOnPend();\lstruct __anon_type_TIM_Base_InitTypeDef {   uint32_t Prescaler;   uint32_t CounterMode;   uint32_t Period;   uint32_t ClockDivision;   uint32_t RepetitionCounter;   uint32_t AutoReloadPreload; } ;\ltypedef struct __anon_type_TIM_Base_InitTypeDef TIM_Base_InitTypeDef;\lstruct __anon_type_TIM_OC_InitTypeDef {   uint32_t OCMode;   uint32_t Pulse;   uint32_t OCPolarity;   uint32_t OCNPolarity;   uint32_t OCFastMode;   uint32_t OCIdleState;   uint32_t OCNIdleState; } ;\ltypedef struct __anon_type_TIM_OC_InitTypeDef TIM_OC_InitTypeDef;\lstruct __anon_type_TIM_OnePulse_InitTypeDef {   uint32_t OCMode;   uint32_t Pulse;   uint32_t OCPolarity;   uint32_t OCNPolarity;   uint32_t OCIdleState;   uint32_t OCNIdleState;   uint32_t ICPolarity;   uint32_t ICSelection;   uint32_t ICFilter; } ;\ltypedef struct __anon_type_TIM_OnePulse_InitTypeDef TIM_OnePulse_InitTypeDef;\lstruct __anon_type_TIM_IC_InitTypeDef {   uint32_t ICPolarity;   uint32_t ICSelection;   uint32_t ICPrescaler;   uint32_t ICFilter; } ;\ltypedef struct __anon_type_TIM_IC_InitTypeDef TIM_IC_InitTypeDef;\lstruct __anon_type_TIM_Encoder_InitTypeDef {   uint32_t EncoderMode;   uint32_t IC1Polarity;   uint32_t IC1Selection;   uint32_t IC1Prescaler;   uint32_t IC1Filter;   uint32_t IC2Polarity;   uint32_t IC2Selection;   uint32_t IC2Prescaler;   uint32_t IC2Filter; } ;\ltypedef struct __anon_type_TIM_Encoder_InitTypeDef TIM_Encoder_InitTypeDef;\lstruct __anon_type_TIM_ClockConfigTypeDef {   uint32_t ClockSource;   uint32_t ClockPolarity;   uint32_t ClockPrescaler;   uint32_t ClockFilter; } ;\ltypedef struct __anon_type_TIM_ClockConfigTypeDef TIM_ClockConfigTypeDef;\lstruct __anon_type_TIM_ClearInputConfigTypeDef {   uint32_t ClearInputState;   uint32_t ClearInputSource;   uint32_t ClearInputPolarity;   uint32_t ClearInputPrescaler;   uint32_t ClearInputFilter; } ;\ltypedef struct __anon_type_TIM_ClearInputConfigTypeDef TIM_ClearInputConfigTypeDef;\lstruct __anon_type_TIM_MasterConfigTypeDef {   uint32_t MasterOutputTrigger;   uint32_t MasterOutputTrigger2;   uint32_t MasterSlaveMode; } ;\ltypedef struct __anon_type_TIM_MasterConfigTypeDef TIM_MasterConfigTypeDef;\lstruct __anon_type_TIM_SlaveConfigTypeDef {   uint32_t SlaveMode;   uint32_t InputTrigger;   uint32_t TriggerPolarity;   uint32_t TriggerPrescaler;   uint32_t TriggerFilter; } ;\ltypedef struct __anon_type_TIM_SlaveConfigTypeDef TIM_SlaveConfigTypeDef;\lstruct __anon_type_TIM_BreakDeadTimeConfigTypeDef {   uint32_t OffStateRunMode;   uint32_t OffStateIDLEMode;   uint32_t LockLevel;   uint32_t DeadTime;   uint32_t BreakState;   uint32_t BreakPolarity;   uint32_t BreakFilter;   uint32_t Break2State;   uint32_t Break2Polarity;   uint32_t Break2Filter;   uint32_t AutomaticOutput; } ;\ltypedef struct __anon_type_TIM_BreakDeadTimeConfigTypeDef TIM_BreakDeadTimeConfigTypeDef;\lenum __anon_type_19 {   HAL_TIM_STATE_RESET = 0,   HAL_TIM_STATE_READY = 1,   HAL_TIM_STATE_BUSY = 2,   HAL_TIM_STATE_TIMEOUT = 3,   HAL_TIM_STATE_ERROR = 4 } ;\ltypedef enum __anon_type_19 HAL_TIM_StateTypeDef;\lenum __anon_type_20 {   HAL_TIM_ACTIVE_CHANNEL_1 = 1,   HAL_TIM_ACTIVE_CHANNEL_2 = 2,   HAL_TIM_ACTIVE_CHANNEL_3 = 4,   HAL_TIM_ACTIVE_CHANNEL_4 = 8,   HAL_TIM_ACTIVE_CHANNEL_5 = 16,   HAL_TIM_ACTIVE_CHANNEL_6 = 32,   HAL_TIM_ACTIVE_CHANNEL_CLEARED = 0 } ;\ltypedef enum __anon_type_20 HAL_TIM_ActiveChannel;\lstruct __anon_type_TIM_HandleTypeDef {   TIM_TypeDef *Instance;   TIM_Base_InitTypeDef Init;   HAL_TIM_ActiveChannel Channel;   DMA_HandleTypeDef *hdma[7];   HAL_LockTypeDef Lock;   volatile HAL_TIM_StateTypeDef State; } ;\ltypedef struct __anon_type_TIM_HandleTypeDef TIM_HandleTypeDef;\lstruct __anon_type_TIM_HallSensor_InitTypeDef {   uint32_t IC1Polarity;   uint32_t IC1Prescaler;   uint32_t IC1Filter;   uint32_t Commutation_Delay; } ;\ltypedef struct __anon_type_TIM_HallSensor_InitTypeDef TIM_HallSensor_InitTypeDef;\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);\lHAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);\lHAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t InputTrigger, uint32_t CommutationSource);\lHAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef *sMasterConfig);\lHAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig);\lHAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t Channels);\lHAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap);\lvoid HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim);\lvoid TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma);\lvoid TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma);\lHAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);\lHAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);\lHAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);\lHAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, TIM_Encoder_InitTypeDef *sConfig);\lHAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length);\lHAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);\lvoid HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);\lHAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef *sConfig, uint32_t OutputChannel, uint32_t InputChannel);\lHAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef *sClearInputConfig, uint32_t Channel);\lHAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig);\lHAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);\lHAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);\lHAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);\lHAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);\lHAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength, uint32_t DataLength);\lHAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);\lHAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);\lHAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength, uint32_t DataLength);\lHAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);\lHAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);\luint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);\lvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim);\lvoid HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);\lHAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);\lvoid TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure);\lvoid TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);\lvoid TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);\lvoid TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler, uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter);\lvoid TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma);\lvoid TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma);\lvoid TIM_DMAError(DMA_HandleTypeDef *hdma);\lvoid TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma);\lvoid TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma);\lvoid TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState);\lstruct __anon_type_UART_InitTypeDef {   uint32_t BaudRate;   uint32_t WordLength;   uint32_t StopBits;   uint32_t Parity;   uint32_t Mode;   uint32_t HwFlowCtl;   uint32_t OverSampling;   uint32_t OneBitSampling; } ;\ltypedef struct __anon_type_UART_InitTypeDef UART_InitTypeDef;\lstruct __anon_type_UART_AdvFeatureInitTypeDef {   uint32_t AdvFeatureInit;   uint32_t TxPinLevelInvert;   uint32_t RxPinLevelInvert;   uint32_t DataInvert;   uint32_t Swap;   uint32_t OverrunDisable;   uint32_t DMADisableonRxError;   uint32_t AutoBaudRateEnable;   uint32_t AutoBaudRateMode;   uint32_t MSBFirst; } ;\ltypedef struct __anon_type_UART_AdvFeatureInitTypeDef UART_AdvFeatureInitTypeDef;\ltypedef uint32_t HAL_UART_StateTypeDef;\lenum __anon_type_21 {   UART_CLOCKSOURCE_PCLK1 = 0,   UART_CLOCKSOURCE_PCLK2 = 1,   UART_CLOCKSOURCE_HSI = 2,   UART_CLOCKSOURCE_SYSCLK = 4,   UART_CLOCKSOURCE_LSE = 8,   UART_CLOCKSOURCE_UNDEFINED = 16 } ;\ltypedef enum __anon_type_21 UART_ClockSourceTypeDef;\lstruct __UART_HandleTypeDef {   USART_TypeDef *Instance;   UART_InitTypeDef Init;   UART_AdvFeatureInitTypeDef AdvancedInit;   uint8_t *pTxBuffPtr;   uint16_t TxXferSize;   volatile uint16_t TxXferCount;   uint8_t *pRxBuffPtr;   uint16_t RxXferSize;   volatile uint16_t RxXferCount;   uint16_t Mask;   void (*RxISR)(struct __UART_HandleTypeDef *huart);   void (*TxISR)(struct __UART_HandleTypeDef *huart);   DMA_HandleTypeDef *hdmatx;   DMA_HandleTypeDef *hdmarx;   HAL_LockTypeDef Lock;   volatile HAL_UART_StateTypeDef gState;   volatile HAL_UART_StateTypeDef RxState;   volatile uint32_t ErrorCode; } ;\ltypedef struct __UART_HandleTypeDef UART_HandleTypeDef;\lstruct __anon_type_UART_WakeUpTypeDef {   uint32_t WakeUpEvent;   uint16_t AddressLength;   uint8_t Address; } ;\ltypedef struct __anon_type_UART_WakeUpTypeDef UART_WakeUpTypeDef;\lHAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime);\lvoid HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);\lHAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength);\lHAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength);\lHAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod);\lHAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart);\lvoid HAL_UART_MspInit(UART_HandleTypeDef *huart);\lvoid HAL_UART_MspDeInit(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);\lHAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);\lHAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart);\lvoid HAL_UART_IRQHandler(UART_HandleTypeDef *huart);\lvoid HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart);\lvoid HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue);\lHAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart);\lvoid HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart);\lHAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart);\luint32_t HAL_UART_GetError(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);\lHAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout);\lvoid UART_AdvFeatureConfig(UART_HandleTypeDef *huart);\lenum __anon_type_22 {   HAL_TICK_FREQ_10HZ = 100,   HAL_TICK_FREQ_100HZ = 10,   HAL_TICK_FREQ_1KHZ = 1,   HAL_TICK_FREQ_DEFAULT = 1 } ;\ltypedef enum __anon_type_22 HAL_TickFreqTypeDef;\lHAL_StatusTypeDef HAL_Init();\lHAL_StatusTypeDef HAL_DeInit();\lvoid HAL_MspInit();\lvoid HAL_MspDeInit();\lHAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority);\lextern volatile uint32_t uwTick;\lextern uint32_t uwTickPrio;\lextern HAL_TickFreqTypeDef uwTickFreq;\lvoid HAL_IncTick();\lvoid HAL_Delay(uint32_t Delay);\lvoid HAL_SuspendTick();\lvoid HAL_ResumeTick();\luint32_t HAL_GetTick();\luint32_t HAL_GetTickPrio();\lHAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq);\lHAL_TickFreqTypeDef HAL_GetTickFreq();\luint32_t HAL_GetHalVersion();\luint32_t HAL_GetREVID();\luint32_t HAL_GetDEVID();\luint32_t HAL_GetUIDw0();\luint32_t HAL_GetUIDw1();\luint32_t HAL_GetUIDw2();\lvoid HAL_DBGMCU_EnableDBGSleepMode();\lvoid HAL_DBGMCU_DisableDBGSleepMode();\lvoid HAL_DBGMCU_EnableDBGStopMode();\lvoid HAL_DBGMCU_DisableDBGStopMode();\lvoid HAL_DBGMCU_EnableDBGStandbyMode();\lvoid HAL_DBGMCU_DisableDBGStandbyMode();\lvoid Error_Handler();\lstruct __anon_type_osVersion_t {   uint32_t api;   uint32_t kernel; } ;\ltypedef struct __anon_type_osVersion_t osVersion_t;\lenum __anon_type_23 {   osKernelInactive = 0,   osKernelReady = 1,   osKernelRunning = 2,   osKernelLocked = 3,   osKernelSuspended = 4,   osKernelError = -1,   osKernelReserved = 2147483647 } ;\ltypedef enum __anon_type_23 osKernelState_t;\lenum __anon_type_24 {   osThreadInactive = 0,   osThreadReady = 1,   osThreadRunning = 2,   osThreadBlocked = 3,   osThreadTerminated = 4,   osThreadError = -1,   osThreadReserved = 2147483647 } ;\ltypedef enum __anon_type_24 osThreadState_t;\lenum __anon_type_25 {   osPriorityNone = 0,   osPriorityIdle = 1,   osPriorityLow = 8,   osPriorityLow1 = 9,   osPriorityLow2 = 10,   osPriorityLow3 = 11,   osPriorityLow4 = 12,   osPriorityLow5 = 13,   osPriorityLow6 = 14,   osPriorityLow7 = 15,   osPriorityBelowNormal = 16,   osPriorityBelowNormal1 = 17,   osPriorityBelowNormal2 = 18,   osPriorityBelowNormal3 = 19,   osPriorityBelowNormal4 = 20,   osPriorityBelowNormal5 = 21,   osPriorityBelowNormal6 = 22,   osPriorityBelowNormal7 = 23,   osPriorityNormal = 24,   osPriorityNormal1 = 25,   osPriorityNormal2 = 26,   osPriorityNormal3 = 27,   osPriorityNormal4 = 28,   osPriorityNormal5 = 29,   osPriorityNormal6 = 30,   osPriorityNormal7 = 31,   osPriorityAboveNormal = 32,   osPriorityAboveNormal1 = 33,   osPriorityAboveNormal2 = 34,   osPriorityAboveNormal3 = 35,   osPriorityAboveNormal4 = 36,   osPriorityAboveNormal5 = 37,   osPriorityAboveNormal6 = 38,   osPriorityAboveNormal7 = 39,   osPriorityHigh = 40,   osPriorityHigh1 = 41,   osPriorityHigh2 = 42,   osPriorityHigh3 = 43,   osPriorityHigh4 = 44,   osPriorityHigh5 = 45,   osPriorityHigh6 = 46,   osPriorityHigh7 = 47,   osPriorityRealtime = 48,   osPriorityRealtime1 = 49,   osPriorityRealtime2 = 50,   osPriorityRealtime3 = 51,   osPriorityRealtime4 = 52,   osPriorityRealtime5 = 53,   osPriorityRealtime6 = 54,   osPriorityRealtime7 = 55,   osPriorityISR = 56,   osPriorityError = -1,   osPriorityReserved = 2147483647 } ;\ltypedef enum __anon_type_25 osPriority_t;\ltypedef void (*osThreadFunc_t)(void *argument);\ltypedef void (*osTimerFunc_t)(void *argument);\lenum __anon_type_26 {   osTimerOnce = 0,   osTimerPeriodic = 1 } ;\ltypedef enum __anon_type_26 osTimerType_t;\lenum __anon_type_27 {   osOK = 0,   osError = -1,   osErrorTimeout = -2,   osErrorResource = -3,   osErrorParameter = -4,   osErrorNoMemory = -5,   osErrorISR = -6,   osStatusReserved = 2147483647 } ;\ltypedef enum __anon_type_27 osStatus_t;\ltypedef void *osThreadId_t;\ltypedef void *osTimerId_t;\ltypedef void *osEventFlagsId_t;\ltypedef void *osMutexId_t;\ltypedef void *osSemaphoreId_t;\ltypedef void *osMemoryPoolId_t;\ltypedef void *osMessageQueueId_t;\ltypedef uint32_t TZ_ModuleId_t;\lstruct __anon_type_osThreadAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size;   void *stack_mem;   uint32_t stack_size;   osPriority_t priority;   TZ_ModuleId_t tz_module;   uint32_t reserved; } ;\ltypedef struct __anon_type_osThreadAttr_t osThreadAttr_t;\lstruct __anon_type_osTimerAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size; } ;\ltypedef struct __anon_type_osTimerAttr_t osTimerAttr_t;\lstruct __anon_type_osEventFlagsAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size; } ;\ltypedef struct __anon_type_osTimerAttr_t osEventFlagsAttr_t;\lstruct __anon_type_osMutexAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size; } ;\ltypedef struct __anon_type_osTimerAttr_t osMutexAttr_t;\lstruct __anon_type_osSemaphoreAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size; } ;\ltypedef struct __anon_type_osTimerAttr_t osSemaphoreAttr_t;\lstruct __anon_type_osMemoryPoolAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size;   void *mp_mem;   uint32_t mp_size; } ;\ltypedef struct __anon_type_osMemoryPoolAttr_t osMemoryPoolAttr_t;\lstruct __anon_type_osMessageQueueAttr_t {   const char *name;   uint32_t attr_bits;   void *cb_mem;   uint32_t cb_size;   void *mq_mem;   uint32_t mq_size; } ;\ltypedef struct __anon_type_osMessageQueueAttr_t osMessageQueueAttr_t;\losStatus_t osKernelInitialize();\losStatus_t osKernelGetInfo(osVersion_t *version, char *id_buf, uint32_t id_size);\losKernelState_t osKernelGetState();\losStatus_t osKernelStart();\lint32_t osKernelLock();\lint32_t osKernelUnlock();\lint32_t osKernelRestoreLock(int32_t lock);\luint32_t osKernelSuspend();\lvoid osKernelResume(uint32_t sleep_ticks);\luint32_t osKernelGetTickCount();\luint32_t osKernelGetTickFreq();\luint32_t osKernelGetSysTimerCount();\luint32_t osKernelGetSysTimerFreq();\losThreadId_t osThreadNew(osThreadFunc_t func, void *argument, const osThreadAttr_t *attr);\lconst char *osThreadGetName(osThreadId_t thread_id);\losThreadId_t osThreadGetId();\losThreadState_t osThreadGetState(osThreadId_t thread_id);\luint32_t osThreadGetStackSize(osThreadId_t thread_id);\luint32_t osThreadGetStackSpace(osThreadId_t thread_id);\losStatus_t osThreadSetPriority(osThreadId_t thread_id, osPriority_t priority);\losPriority_t osThreadGetPriority(osThreadId_t thread_id);\losStatus_t osThreadYield();\losStatus_t osThreadSuspend(osThreadId_t thread_id);\losStatus_t osThreadResume(osThreadId_t thread_id);\losStatus_t osThreadDetach(osThreadId_t thread_id);\losStatus_t osThreadJoin(osThreadId_t thread_id);\lvoid osThreadExit();\losStatus_t osThreadTerminate(osThreadId_t thread_id);\luint32_t osThreadGetCount();\luint32_t osThreadEnumerate(osThreadId_t *thread_array, uint32_t array_items);\luint32_t osThreadFlagsSet(osThreadId_t thread_id, uint32_t flags);\luint32_t osThreadFlagsClear(uint32_t flags);\luint32_t osThreadFlagsGet();\luint32_t osThreadFlagsWait(uint32_t flags, uint32_t options, uint32_t timeout);\losStatus_t osDelay(uint32_t ticks);\losStatus_t osDelayUntil(uint32_t ticks);\losTimerId_t osTimerNew(osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr);\lconst char *osTimerGetName(osTimerId_t timer_id);\losStatus_t osTimerStart(osTimerId_t timer_id, uint32_t ticks);\losStatus_t osTimerStop(osTimerId_t timer_id);\luint32_t osTimerIsRunning(osTimerId_t timer_id);\losStatus_t osTimerDelete(osTimerId_t timer_id);\losEventFlagsId_t osEventFlagsNew(const osEventFlagsAttr_t *attr);\lconst char *osEventFlagsGetName(osEventFlagsId_t ef_id);\luint32_t osEventFlagsSet(osEventFlagsId_t ef_id, uint32_t flags);\luint32_t osEventFlagsClear(osEventFlagsId_t ef_id, uint32_t flags);\luint32_t osEventFlagsGet(osEventFlagsId_t ef_id);\luint32_t osEventFlagsWait(osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout);\losStatus_t osEventFlagsDelete(osEventFlagsId_t ef_id);\losMutexId_t osMutexNew(const osMutexAttr_t *attr);\lconst char *osMutexGetName(osMutexId_t mutex_id);\losStatus_t osMutexAcquire(osMutexId_t mutex_id, uint32_t timeout);\losStatus_t osMutexRelease(osMutexId_t mutex_id);\losThreadId_t osMutexGetOwner(osMutexId_t mutex_id);\losStatus_t osMutexDelete(osMutexId_t mutex_id);\losSemaphoreId_t osSemaphoreNew(uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr);\lconst char *osSemaphoreGetName(osSemaphoreId_t semaphore_id);\losStatus_t osSemaphoreAcquire(osSemaphoreId_t semaphore_id, uint32_t timeout);\losStatus_t osSemaphoreRelease(osSemaphoreId_t semaphore_id);\luint32_t osSemaphoreGetCount(osSemaphoreId_t semaphore_id);\losStatus_t osSemaphoreDelete(osSemaphoreId_t semaphore_id);\losMemoryPoolId_t osMemoryPoolNew(uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr);\lconst char *osMemoryPoolGetName(osMemoryPoolId_t mp_id);\lvoid *osMemoryPoolAlloc(osMemoryPoolId_t mp_id, uint32_t timeout);\losStatus_t osMemoryPoolFree(osMemoryPoolId_t mp_id, void *block);\luint32_t osMemoryPoolGetCapacity(osMemoryPoolId_t mp_id);\luint32_t osMemoryPoolGetBlockSize(osMemoryPoolId_t mp_id);\luint32_t osMemoryPoolGetCount(osMemoryPoolId_t mp_id);\luint32_t osMemoryPoolGetSpace(osMemoryPoolId_t mp_id);\losStatus_t osMemoryPoolDelete(osMemoryPoolId_t mp_id);\losMessageQueueId_t osMessageQueueNew(uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr);\lconst char *osMessageQueueGetName(osMessageQueueId_t mq_id);\losStatus_t osMessageQueuePut(osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout);\losStatus_t osMessageQueueGet(osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout);\luint32_t osMessageQueueGetCapacity(osMessageQueueId_t mq_id);\luint32_t osMessageQueueGetMsgSize(osMessageQueueId_t mq_id);\luint32_t osMessageQueueGetCount(osMessageQueueId_t mq_id);\luint32_t osMessageQueueGetSpace(osMessageQueueId_t mq_id);\losStatus_t osMessageQueueReset(osMessageQueueId_t mq_id);\losStatus_t osMessageQueueDelete(osMessageQueueId_t mq_id);\ltypedef void (*TaskFunction_t)(void *);\ltypedef uint32_t StackType_t;\ltypedef long BaseType_t;\ltypedef unsigned long UBaseType_t;\ltypedef uint32_t TickType_t;\lvoid vPortEnterCritical();\lvoid vPortExitCritical();\lvoid vPortSuppressTicksAndSleep(TickType_t xExpectedIdleTime);\lvoid vPortValidateInterruptPriority();\lBaseType_t xPortIsInsideInterrupt();\lvoid vPortRaiseBASEPRI();\luint32_t ulPortRaiseBASEPRI();\lvoid vPortSetBASEPRI(uint32_t ulNewMaskValue);\lStackType_t *pxPortInitialiseStack(StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters);\lstruct HeapRegion {   uint8_t *pucStartAddress;   size_t xSizeInBytes; } ;\ltypedef struct HeapRegion HeapRegion_t;\lvoid vPortDefineHeapRegions(const HeapRegion_t * const pxHeapRegions);\lvoid *pvPortMalloc(size_t xSize);\lvoid vPortFree(void *pv);\lvoid vPortInitialiseBlocks();\lsize_t xPortGetFreeHeapSize();\lsize_t xPortGetMinimumEverFreeHeapSize();\lBaseType_t xPortStartScheduler();\lvoid vPortEndScheduler();\lstruct xSTATIC_LIST_ITEM {   TickType_t xDummy1;   void *pvDummy2[4]; } ;\ltypedef struct xSTATIC_LIST_ITEM StaticListItem_t;\lstruct xSTATIC_MINI_LIST_ITEM {   TickType_t xDummy1;   void *pvDummy2[2]; } ;\ltypedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;\lstruct xSTATIC_LIST {   UBaseType_t uxDummy1;   void *pvDummy2;   StaticMiniListItem_t xDummy3; } ;\ltypedef struct xSTATIC_LIST StaticList_t;\lstruct xSTATIC_TCB {   void *pxDummy1;   StaticListItem_t xDummy3[2];   UBaseType_t uxDummy5;   void *pxDummy6;   uint8_t ucDummy7[16];   UBaseType_t uxDummy10[2];   UBaseType_t uxDummy12[2];   uint32_t ulDummy18;   uint8_t ucDummy19;   uint8_t uxDummy20; } ;\ltypedef struct xSTATIC_TCB StaticTask_t;\lunion __anon_type_28 {   void *pvDummy2;   UBaseType_t uxDummy2; } ;\lstruct xSTATIC_QUEUE {   void *pvDummy1[3];   union __anon_type_28 u;   StaticList_t xDummy3[2];   UBaseType_t uxDummy4[3];   uint8_t ucDummy5[2];   uint8_t ucDummy6;   UBaseType_t uxDummy8;   uint8_t ucDummy9; } ;\ltypedef struct xSTATIC_QUEUE StaticQueue_t;\ltypedef StaticQueue_t StaticSemaphore_t;\lstruct xSTATIC_EVENT_GROUP {   TickType_t xDummy1;   StaticList_t xDummy2;   UBaseType_t uxDummy3;   uint8_t ucDummy4; } ;\ltypedef struct xSTATIC_EVENT_GROUP StaticEventGroup_t;\lstruct xSTATIC_TIMER {   void *pvDummy1;   StaticListItem_t xDummy2;   TickType_t xDummy3;   UBaseType_t uxDummy4;   void *pvDummy5[2];   UBaseType_t uxDummy6;   uint8_t ucDummy7; } ;\ltypedef struct xSTATIC_TIMER StaticTimer_t;\lstruct xSTATIC_STREAM_BUFFER {   size_t uxDummy1[4];   void *pvDummy2[3];   uint8_t ucDummy3;   UBaseType_t uxDummy4; } ;\ltypedef struct xSTATIC_STREAM_BUFFER StaticStreamBuffer_t;\ltypedef StaticStreamBuffer_t StaticMessageBuffer_t;\ltypedef void (*os_pthread)(const void *argument);\ltypedef void (*os_ptimer)(const void *argument);\ltypedef int32_t osStatus;\ltypedef void *osPoolId;\ltypedef void *osMessageQId;\ltypedef void *osMailQId;\lstruct os_thread_def {   os_pthread pthread;   osThreadAttr_t attr; } ;\ltypedef struct os_thread_def osThreadDef_t;\lstruct os_timer_def {   os_ptimer ptimer;   osTimerAttr_t attr; } ;\ltypedef struct os_timer_def osTimerDef_t;\lstruct os_pool_def {   uint32_t pool_sz;   uint32_t item_sz;   osMemoryPoolAttr_t attr; } ;\ltypedef struct os_pool_def osPoolDef_t;\lstruct os_messageQ_def {   uint32_t queue_sz;   osMessageQueueAttr_t attr; } ;\ltypedef struct os_messageQ_def osMessageQDef_t;\lstruct os_mailQ_def {   uint32_t queue_sz;   uint32_t item_sz;   void *mail;   osMemoryPoolAttr_t mp_attr;   osMessageQueueAttr_t mq_attr; } ;\ltypedef struct os_mailQ_def osMailQDef_t;\lunion __anon_type_29 {   uint32_t v;   void *p;   int32_t signals; } ;\lunion __anon_type_30 {   osMailQId mail_id;   osMessageQId message_id; } ;\lstruct __anon_type_osEvent {   osStatus status;   union __anon_type_29 value;   union __anon_type_30 def; } ;\ltypedef struct __anon_type_osEvent osEvent;\losThreadId_t osThreadCreate(const osThreadDef_t *thread_def, void *argument);\lint32_t osSignalSet(osThreadId_t thread_id, int32_t signals);\lint32_t osSignalClear(osThreadId_t thread_id, int32_t signals);\losEvent osSignalWait(int32_t signals, uint32_t millisec);\losTimerId_t osTimerCreate(const osTimerDef_t *timer_def, osTimerType_t type, void *argument);\losMutexId_t osMutexCreate(const osMutexAttr_t *mutex_def);\losSemaphoreId_t osSemaphoreCreate(const osSemaphoreAttr_t *semaphore_def, int32_t count);\lint32_t osSemaphoreWait(osSemaphoreId_t semaphore_id, uint32_t millisec);\losMessageQId osMessageCreate(const osMessageQDef_t *queue_def, osThreadId_t thread_id);\losStatus osMessagePut(osMessageQId queue_id, uint32_t info, uint32_t millisec);\losEvent osMessageGet(osMessageQId queue_id, uint32_t millisec);\lUART_HandleTypeDef huart2 = {  };\losThreadId_t defaultTaskHandle = 0;\lconst osThreadAttr_t defaultTask_attributes = { .name = 'defaultTask', .priority = (osPriority_t )24, .stack_size = 128 };\losThreadId_t blinkLEDTaskHandle = 0;\lconst osThreadAttr_t blinkLEDTask_attributes = { .name = 'blinkLEDTask', .priority = (osPriority_t )25, .stack_size = 128 };\losThreadId_t comUSBTaskHandle = 0;\lconst osThreadAttr_t comUSBTask_attributes = { .name = 'comUSBTask', .priority = (osPriority_t )25, .stack_size = 128 };\lvoid SystemClock_Config();\lvoid MX_GPIO_Init();\lvoid MX_USART2_UART_Init();\lvoid StartDefaultTask(void *argument);\lvoid StartTask02(void *argument);\lvoid StartComUSBTask(void *argument);\lint main();\lFunction start dummy edge\lHAL_Init();\l" id="1 -> 2"]
2 -> 3 [label="Line 4175: \lSystemClock_Config()\l" id="2 -> 3"]
3 -> 4 [label="Lines 0 - 4246: \lFunction start dummy edge\lRCC_OscInitTypeDef RCC_OscInitStruct = { 0 };\lRCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };\lRCC_OscInitStruct.OscillatorType = 2U;\lRCC_OscInitStruct.HSIState = 1UL;\lRCC_OscInitStruct.HSICalibrationValue = 16U;\lRCC_OscInitStruct.PLL.PLLState = 2U;\lRCC_OscInitStruct.PLL.PLLSource = 0U;\lRCC_OscInitStruct.PLL.PLLMUL = 3670016U;\lHAL_StatusTypeDef __CPAchecker_TMP_0;\l__CPAchecker_TMP_0 = HAL_RCC_OscConfig(&RCC_OscInitStruct);\l" id="3 -> 4"]
4 -> 5 [label="Line 4246: \l[__CPAchecker_TMP_0 != 0]\l" id="4 -> 5"]
4 -> 23 [label="Line 4246: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="4 -> 23"]
23 -> 25 [label="Lines 4252 - 4259: \lRCC_ClkInitStruct.ClockType = 15U;\lRCC_ClkInitStruct.SYSCLKSource = 2U;\lRCC_ClkInitStruct.AHBCLKDivider = 0U;\lRCC_ClkInitStruct.APB1CLKDivider = 1024U;\lRCC_ClkInitStruct.APB2CLKDivider = 0U;\lHAL_StatusTypeDef __CPAchecker_TMP_1;\l__CPAchecker_TMP_1 = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, 2UL);\l" id="23 -> 25"]
25 -> 28 [label="Line 4259: \l[__CPAchecker_TMP_1 != 0]\l" id="25 -> 28"]
25 -> 36 [label="Line 4259: \l[!(__CPAchecker_TMP_1 != 0)]\l" id="25 -> 36"]
36 -> 14 [label="Line 0: \ldefault return\l" id="36 -> 14"]
14 -> 17 [label="Line 4175: \lReturn edge from SystemClock_Config to main: SystemClock_Config();\l" id="14 -> 17"]
17 -> 18 [label="Line 4182: \lMX_GPIO_Init()\l" id="17 -> 18"]
18 -> 19 [label="Lines 0 - 4322: \lFunction start dummy edge\lGPIO_InitTypeDef GPIO_InitStruct = { 0 };\ldo\lvolatile uint32_t tmpreg;\l((RCC_TypeDef *)1073876992UL)->AHBENR = (((RCC_TypeDef *)1073876992UL)->AHBENR) | 524288UL;\ltmpreg = (((RCC_TypeDef *)1073876992UL)->AHBENR) & 524288UL;\ltmpreg;\l\l\ldo\lvolatile uint32_t tmpreg__1;\l((RCC_TypeDef *)1073876992UL)->AHBENR = (((RCC_TypeDef *)1073876992UL)->AHBENR) | 4194304UL;\ltmpreg__1 = (((RCC_TypeDef *)1073876992UL)->AHBENR) & 4194304UL;\ltmpreg__1;\l\l\ldo\lvolatile uint32_t tmpreg__2;\l((RCC_TypeDef *)1073876992UL)->AHBENR = (((RCC_TypeDef *)1073876992UL)->AHBENR) | 131072UL;\ltmpreg__2 = (((RCC_TypeDef *)1073876992UL)->AHBENR) & 131072UL;\ltmpreg__2;\l\l\ldo\lvolatile uint32_t tmpreg__3;\l((RCC_TypeDef *)1073876992UL)->AHBENR = (((RCC_TypeDef *)1073876992UL)->AHBENR) | 262144UL;\ltmpreg__3 = (((RCC_TypeDef *)1073876992UL)->AHBENR) & 262144UL;\ltmpreg__3;\l\l\lHAL_GPIO_WritePin((GPIO_TypeDef *)1207960576UL, 8192U, 0);\lGPIO_InitStruct.Pin = 8192U;\lGPIO_InitStruct.Mode = 270598144U;\lGPIO_InitStruct.Pull = 0U;\lHAL_GPIO_Init((GPIO_TypeDef *)1207961600UL, &GPIO_InitStruct);\lGPIO_InitStruct.Pin = 8192U;\lGPIO_InitStruct.Mode = 1U;\lGPIO_InitStruct.Pull = 0U;\lGPIO_InitStruct.Speed = 0U;\lHAL_GPIO_Init((GPIO_TypeDef *)1207960576UL, &GPIO_InitStruct);\l" id="18 -> 19"]
19 -> 20 [label="Line 0: \ldefault return\l" id="19 -> 20"]
20 -> 38 [label="Line 4182: \lReturn edge from MX_GPIO_Init to main: MX_GPIO_Init();\l" id="20 -> 38"]
38 -> 39 [label="Line 4183: \lMX_USART2_UART_Init()\l" id="38 -> 39"]
39 -> 40 [label="Lines 0 - 4283: \lFunction start dummy edge\lhuart2.Instance = (USART_TypeDef *)1073759232UL;\lhuart2.Init.BaudRate = 38400;\lhuart2.Init.WordLength = 0U;\lhuart2.Init.StopBits = 0U;\lhuart2.Init.Parity = 0U;\lhuart2.Init.Mode = 12UL;\lhuart2.Init.HwFlowCtl = 0U;\lhuart2.Init.OverSampling = 0U;\lhuart2.Init.OneBitSampling = 0U;\lhuart2.AdvancedInit.AdvFeatureInit = 0U;\lHAL_StatusTypeDef __CPAchecker_TMP_0;\l__CPAchecker_TMP_0 = HAL_UART_Init(&huart2);\l" id="39 -> 40"]
40 -> 41 [label="Line 4283: \l[__CPAchecker_TMP_0 != 0]\l" id="40 -> 41"]
40 -> 56 [label="Line 4283: \l[!(__CPAchecker_TMP_0 != 0)]\l" id="40 -> 56"]
56 -> 45 [label="Line 0: \ldefault return\l" id="56 -> 45"]
45 -> 50 [label="Line 4183: \lReturn edge from MX_USART2_UART_Init to main: MX_USART2_UART_Init();\l" id="45 -> 50"]
50 -> 51 [label="Lines 4188 - 4214: \losKernelInitialize();\ldefaultTaskHandle = osThreadNew(&StartDefaultTask, (void *)0, &defaultTask_attributes);\lblinkLEDTaskHandle = osThreadNew(&StartTask02, (void *)0, &blinkLEDTask_attributes);\lcomUSBTaskHandle = osThreadNew(&StartComUSBTask, (void *)0, &comUSBTask_attributes);\losKernelStart();\l" id="50 -> 51"]
51 -> 52 [label="Line 4220: \lwhile\l" id="51 -> 52"]
58 -> 52 [style="dashed" weight="0" label="covered by"]
52 -> 53 [label="Line 4220: \l\l" id="52 -> 53"]
53 -> 58 [label="Line 0: \l\l" id="53 -> 58"]
41 -> 43 [label="Line 4285: \lError_Handler()\l" id="41 -> 43"]
43 -> 44 [label="Line 0: \lFunction start dummy edge\l" id="43 -> 44"]
44 -> 46 [label="Line 0: \ldefault return\l" id="44 -> 46"]
46 -> 54 [label="Line 4285: \lReturn edge from Error_Handler to MX_USART2_UART_Init: Error_Handler();\l" id="46 -> 54"]
54 -> 56 [label="Line 0: \l\l" id="54 -> 56"]
28 -> 11 [label="Line 4261: \lError_Handler()\l" id="28 -> 11"]
28 -> 30 [label="Line 4261: \lError_Handler()\l" id="28 -> 30"]
30 -> 31 [label="Line 0: \lFunction start dummy edge\l" id="30 -> 31"]
31 -> 33 [label="Line 0: \ldefault return\l" id="31 -> 33"]
33 -> 48 [label="Line 4261: \lReturn edge from Error_Handler to SystemClock_Config: Error_Handler();\l" id="33 -> 48"]
48 -> 36 [label="Line 0: \l\l" id="48 -> 36"]
11 -> 13 [label="Line 0: \lFunction start dummy edge\l" id="11 -> 13"]
13 -> 16 [label="Line 0: \ldefault return\l" id="13 -> 16"]
16 -> 48 [label="Line 4261: \lReturn edge from Error_Handler to SystemClock_Config: Error_Handler();\l" id="16 -> 48"]
5 -> 7 [label="Line 4248: \lError_Handler()\l" id="5 -> 7"]
7 -> 12 [label="Line 0: \lFunction start dummy edge\l" id="7 -> 12"]
12 -> 15 [label="Line 0: \ldefault return\l" id="12 -> 15"]
15 -> 21 [label="Line 4248: \lReturn edge from Error_Handler to SystemClock_Config: Error_Handler();\l" id="15 -> 21"]
21 -> 23 [label="Line 0: \l\l" id="21 -> 23"]
}
